/*
 * Energy Coordination API - Partner Endpoints
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EnergyCoordinationClient.Client;
using EnergyCoordinationClient.Model;

namespace EnergyCoordinationClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserSparkProgramApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete User Enrollment
        /// </summary>
        /// <remarks>
        /// Remove a user from the SPARK Program
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteUserEnrollment(string userId, int operationIndex = 0);

        /// <summary>
        /// Delete User Enrollment
        /// </summary>
        /// <remarks>
        /// Remove a user from the SPARK Program
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteUserEnrollmentWithHttpInfo(string userId, int operationIndex = 0);

        /// <summary>
        /// Will fetch the total compensation per location the user has for the current month
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUserCompensationForCurrentMonthResponse</returns>
        GetUserCompensationForCurrentMonthResponse FetchUserCompensation(
            string userId,
            int operationIndex = 0
        );

        /// <summary>
        /// Will fetch the total compensation per location the user has for the current month
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUserCompensationForCurrentMonthResponse</returns>
        ApiResponse<GetUserCompensationForCurrentMonthResponse> FetchUserCompensationWithHttpInfo(
            string userId,
            int operationIndex = 0
        );

        /// <summary>
        /// Get Eligible Users
        /// </summary>
        /// <remarks>
        /// Get all users who are eligible for the SPARK Program. Maximum pageSize is 1000.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEligibleUsersResponse</returns>
        GetEligibleUsersResponse GetEligibleUsers(
            int? page = default(int?),
            int? pageSize = default(int?),
            int operationIndex = 0
        );

        /// <summary>
        /// Get Eligible Users
        /// </summary>
        /// <remarks>
        /// Get all users who are eligible for the SPARK Program. Maximum pageSize is 1000.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEligibleUsersResponse</returns>
        ApiResponse<GetEligibleUsersResponse> GetEligibleUsersWithHttpInfo(
            int? page = default(int?),
            int? pageSize = default(int?),
            int operationIndex = 0
        );

        /// <summary>
        /// Check if MeterPoint id eligible for Spark
        /// </summary>
        /// <remarks>
        /// Indicates whether or not the given MeterPoint is currently eligible for the Spark program
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mpid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMpidEligibilityResponse</returns>
        GetMpidEligibilityResponse GetMpidEligibility(string mpid, int operationIndex = 0);

        /// <summary>
        /// Check if MeterPoint id eligible for Spark
        /// </summary>
        /// <remarks>
        /// Indicates whether or not the given MeterPoint is currently eligible for the Spark program
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mpid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMpidEligibilityResponse</returns>
        ApiResponse<GetMpidEligibilityResponse> GetMpidEligibilityWithHttpInfo(
            string mpid,
            int operationIndex = 0
        );

        /// <summary>
        /// Get User Eligibility
        /// </summary>
        /// <remarks>
        /// Check if a user is eligible for the SPARK Program
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUserEligibilityResponse</returns>
        GetUserEligibilityResponse GetUserEligibilityByUserId(
            string userId,
            int operationIndex = 0
        );

        /// <summary>
        /// Get User Eligibility
        /// </summary>
        /// <remarks>
        /// Check if a user is eligible for the SPARK Program
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUserEligibilityResponse</returns>
        ApiResponse<GetUserEligibilityResponse> GetUserEligibilityByUserIdWithHttpInfo(
            string userId,
            int operationIndex = 0
        );

        /// <summary>
        /// Get User Enrollment
        /// </summary>
        /// <remarks>
        /// Get a user&#39;s enrollment status. Also returns when the user was enrolled.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUserEnrollmentResponse</returns>
        GetUserEnrollmentResponse GetUserEnrollmentByUserId(string userId, int operationIndex = 0);

        /// <summary>
        /// Get User Enrollment
        /// </summary>
        /// <remarks>
        /// Get a user&#39;s enrollment status. Also returns when the user was enrolled.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUserEnrollmentResponse</returns>
        ApiResponse<GetUserEnrollmentResponse> GetUserEnrollmentByUserIdWithHttpInfo(
            string userId,
            int operationIndex = 0
        );

        /// <summary>
        /// Enroll User
        /// </summary>
        /// <remarks>
        /// Enroll a user into the SPARK Program
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUserEnrollmentResponse</returns>
        GetUserEnrollmentResponse PostUserEnrollment(string userId, int operationIndex = 0);

        /// <summary>
        /// Enroll User
        /// </summary>
        /// <remarks>
        /// Enroll a user into the SPARK Program
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUserEnrollmentResponse</returns>
        ApiResponse<GetUserEnrollmentResponse> PostUserEnrollmentWithHttpInfo(
            string userId,
            int operationIndex = 0
        );
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserSparkProgramApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete User Enrollment
        /// </summary>
        /// <remarks>
        /// Remove a user from the SPARK Program
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteUserEnrollmentAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Delete User Enrollment
        /// </summary>
        /// <remarks>
        /// Remove a user from the SPARK Program
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteUserEnrollmentWithHttpInfoAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Will fetch the total compensation per location the user has for the current month
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserCompensationForCurrentMonthResponse</returns>
        System.Threading.Tasks.Task<GetUserCompensationForCurrentMonthResponse> FetchUserCompensationAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Will fetch the total compensation per location the user has for the current month
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserCompensationForCurrentMonthResponse)</returns>
        System.Threading.Tasks.Task<
            ApiResponse<GetUserCompensationForCurrentMonthResponse>
        > FetchUserCompensationWithHttpInfoAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Get Eligible Users
        /// </summary>
        /// <remarks>
        /// Get all users who are eligible for the SPARK Program. Maximum pageSize is 1000.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEligibleUsersResponse</returns>
        System.Threading.Tasks.Task<GetEligibleUsersResponse> GetEligibleUsersAsync(
            int? page = default(int?),
            int? pageSize = default(int?),
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Get Eligible Users
        /// </summary>
        /// <remarks>
        /// Get all users who are eligible for the SPARK Program. Maximum pageSize is 1000.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEligibleUsersResponse)</returns>
        System.Threading.Tasks.Task<
            ApiResponse<GetEligibleUsersResponse>
        > GetEligibleUsersWithHttpInfoAsync(
            int? page = default(int?),
            int? pageSize = default(int?),
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Check if MeterPoint id eligible for Spark
        /// </summary>
        /// <remarks>
        /// Indicates whether or not the given MeterPoint is currently eligible for the Spark program
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mpid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMpidEligibilityResponse</returns>
        System.Threading.Tasks.Task<GetMpidEligibilityResponse> GetMpidEligibilityAsync(
            string mpid,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Check if MeterPoint id eligible for Spark
        /// </summary>
        /// <remarks>
        /// Indicates whether or not the given MeterPoint is currently eligible for the Spark program
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mpid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMpidEligibilityResponse)</returns>
        System.Threading.Tasks.Task<
            ApiResponse<GetMpidEligibilityResponse>
        > GetMpidEligibilityWithHttpInfoAsync(
            string mpid,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Get User Eligibility
        /// </summary>
        /// <remarks>
        /// Check if a user is eligible for the SPARK Program
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserEligibilityResponse</returns>
        System.Threading.Tasks.Task<GetUserEligibilityResponse> GetUserEligibilityByUserIdAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Get User Eligibility
        /// </summary>
        /// <remarks>
        /// Check if a user is eligible for the SPARK Program
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserEligibilityResponse)</returns>
        System.Threading.Tasks.Task<
            ApiResponse<GetUserEligibilityResponse>
        > GetUserEligibilityByUserIdWithHttpInfoAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Get User Enrollment
        /// </summary>
        /// <remarks>
        /// Get a user&#39;s enrollment status. Also returns when the user was enrolled.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserEnrollmentResponse</returns>
        System.Threading.Tasks.Task<GetUserEnrollmentResponse> GetUserEnrollmentByUserIdAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Get User Enrollment
        /// </summary>
        /// <remarks>
        /// Get a user&#39;s enrollment status. Also returns when the user was enrolled.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserEnrollmentResponse)</returns>
        System.Threading.Tasks.Task<
            ApiResponse<GetUserEnrollmentResponse>
        > GetUserEnrollmentByUserIdWithHttpInfoAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Enroll User
        /// </summary>
        /// <remarks>
        /// Enroll a user into the SPARK Program
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserEnrollmentResponse</returns>
        System.Threading.Tasks.Task<GetUserEnrollmentResponse> PostUserEnrollmentAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Enroll User
        /// </summary>
        /// <remarks>
        /// Enroll a user into the SPARK Program
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserEnrollmentResponse)</returns>
        System.Threading.Tasks.Task<
            ApiResponse<GetUserEnrollmentResponse>
        > PostUserEnrollmentWithHttpInfoAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserSparkProgramApi : IUserSparkProgramApiSync, IUserSparkProgramApiAsync { }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserSparkProgramApi : IUserSparkProgramApi
    {
        private EnergyCoordinationClient.Client.ExceptionFactory _exceptionFactory = (
            name,
            response
        ) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserSparkProgramApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserSparkProgramApi()
            : this((string)null) { }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserSparkProgramApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserSparkProgramApi(string basePath)
        {
            this.Configuration = EnergyCoordinationClient.Client.Configuration.MergeConfigurations(
                EnergyCoordinationClient.Client.GlobalConfiguration.Instance,
                new EnergyCoordinationClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EnergyCoordinationClient.Client.ApiClient(
                this.Configuration.BasePath
            );
            this.AsynchronousClient = new EnergyCoordinationClient.Client.ApiClient(
                this.Configuration.BasePath
            );
            this.ExceptionFactory = EnergyCoordinationClient
                .Client
                .Configuration
                .DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserSparkProgramApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserSparkProgramApi(EnergyCoordinationClient.Client.Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException("configuration");

            this.Configuration = EnergyCoordinationClient.Client.Configuration.MergeConfigurations(
                EnergyCoordinationClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EnergyCoordinationClient.Client.ApiClient(
                this.Configuration.BasePath
            );
            this.AsynchronousClient = new EnergyCoordinationClient.Client.ApiClient(
                this.Configuration.BasePath
            );
            ExceptionFactory = EnergyCoordinationClient
                .Client
                .Configuration
                .DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserSparkProgramApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserSparkProgramApi(
            EnergyCoordinationClient.Client.ISynchronousClient client,
            EnergyCoordinationClient.Client.IAsynchronousClient asyncClient,
            EnergyCoordinationClient.Client.IReadableConfiguration configuration
        )
        {
            if (client == null)
                throw new ArgumentNullException("client");
            if (asyncClient == null)
                throw new ArgumentNullException("asyncClient");
            if (configuration == null)
                throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EnergyCoordinationClient
                .Client
                .Configuration
                .DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EnergyCoordinationClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EnergyCoordinationClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EnergyCoordinationClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EnergyCoordinationClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException(
                        "Multicast delegate for ExceptionFactory is unsupported."
                    );
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete User Enrollment Remove a user from the SPARK Program
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteUserEnrollment(string userId, int operationIndex = 0)
        {
            DeleteUserEnrollmentWithHttpInfo(userId);
        }

        /// <summary>
        /// Delete User Enrollment Remove a user from the SPARK Program
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EnergyCoordinationClient.Client.ApiResponse<Object> DeleteUserEnrollmentWithHttpInfo(
            string userId,
            int operationIndex = 0
        )
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'userId' when calling UserSparkProgramApi->DeleteUserEnrollment"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "userId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(userId)
            ); // path parameter

            localVarRequestOptions.Operation = "UserSparkProgramApi.DeleteUserEnrollment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>(
                "/users/{userId}/enrollment",
                localVarRequestOptions,
                this.Configuration
            );
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "DeleteUserEnrollment",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete User Enrollment Remove a user from the SPARK Program
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteUserEnrollmentAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            await DeleteUserEnrollmentWithHttpInfoAsync(userId, operationIndex, cancellationToken)
                .ConfigureAwait(false);
        }

        /// <summary>
        /// Delete User Enrollment Remove a user from the SPARK Program
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EnergyCoordinationClient.Client.ApiResponse<Object>> DeleteUserEnrollmentWithHttpInfoAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'userId' when calling UserSparkProgramApi->DeleteUserEnrollment"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "userId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(userId)
            ); // path parameter

            localVarRequestOptions.Operation = "UserSparkProgramApi.DeleteUserEnrollment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = await this
                .AsynchronousClient.DeleteAsync<Object>(
                    "/users/{userId}/enrollment",
                    localVarRequestOptions,
                    this.Configuration,
                    cancellationToken
                )
                .ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "DeleteUserEnrollment",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Will fetch the total compensation per location the user has for the current month
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUserCompensationForCurrentMonthResponse</returns>
        public GetUserCompensationForCurrentMonthResponse FetchUserCompensation(
            string userId,
            int operationIndex = 0
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<GetUserCompensationForCurrentMonthResponse> localVarResponse =
                FetchUserCompensationWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Will fetch the total compensation per location the user has for the current month
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUserCompensationForCurrentMonthResponse</returns>
        public EnergyCoordinationClient.Client.ApiResponse<GetUserCompensationForCurrentMonthResponse> FetchUserCompensationWithHttpInfo(
            string userId,
            int operationIndex = 0
        )
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'userId' when calling UserSparkProgramApi->FetchUserCompensation"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "userId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(userId)
            ); // path parameter

            localVarRequestOptions.Operation = "UserSparkProgramApi.FetchUserCompensation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetUserCompensationForCurrentMonthResponse>(
                "/users/{userId}/compensation",
                localVarRequestOptions,
                this.Configuration
            );
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "FetchUserCompensation",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Will fetch the total compensation per location the user has for the current month
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserCompensationForCurrentMonthResponse</returns>
        public async System.Threading.Tasks.Task<GetUserCompensationForCurrentMonthResponse> FetchUserCompensationAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<GetUserCompensationForCurrentMonthResponse> localVarResponse =
                await FetchUserCompensationWithHttpInfoAsync(
                        userId,
                        operationIndex,
                        cancellationToken
                    )
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Will fetch the total compensation per location the user has for the current month
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserCompensationForCurrentMonthResponse)</returns>
        public async System.Threading.Tasks.Task<EnergyCoordinationClient.Client.ApiResponse<GetUserCompensationForCurrentMonthResponse>> FetchUserCompensationWithHttpInfoAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'userId' when calling UserSparkProgramApi->FetchUserCompensation"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "userId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(userId)
            ); // path parameter

            localVarRequestOptions.Operation = "UserSparkProgramApi.FetchUserCompensation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = await this
                .AsynchronousClient.GetAsync<GetUserCompensationForCurrentMonthResponse>(
                    "/users/{userId}/compensation",
                    localVarRequestOptions,
                    this.Configuration,
                    cancellationToken
                )
                .ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "FetchUserCompensation",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Eligible Users Get all users who are eligible for the SPARK Program. Maximum pageSize is 1000.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetEligibleUsersResponse</returns>
        public GetEligibleUsersResponse GetEligibleUsers(
            int? page = default(int?),
            int? pageSize = default(int?),
            int operationIndex = 0
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<GetEligibleUsersResponse> localVarResponse =
                GetEligibleUsersWithHttpInfo(page, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Eligible Users Get all users who are eligible for the SPARK Program. Maximum pageSize is 1000.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetEligibleUsersResponse</returns>
        public EnergyCoordinationClient.Client.ApiResponse<GetEligibleUsersResponse> GetEligibleUsersWithHttpInfo(
            int? page = default(int?),
            int? pageSize = default(int?),
            int operationIndex = 0
        )
        {
            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json", "application/problem+json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(
                    EnergyCoordinationClient.Client.ClientUtils.ParameterToMultiMap(
                        "",
                        "page",
                        page
                    )
                );
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(
                    EnergyCoordinationClient.Client.ClientUtils.ParameterToMultiMap(
                        "",
                        "pageSize",
                        pageSize
                    )
                );
            }

            localVarRequestOptions.Operation = "UserSparkProgramApi.GetEligibleUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetEligibleUsersResponse>(
                "/users/eligible",
                localVarRequestOptions,
                this.Configuration
            );
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEligibleUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get Eligible Users Get all users who are eligible for the SPARK Program. Maximum pageSize is 1000.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetEligibleUsersResponse</returns>
        public async System.Threading.Tasks.Task<GetEligibleUsersResponse> GetEligibleUsersAsync(
            int? page = default(int?),
            int? pageSize = default(int?),
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<GetEligibleUsersResponse> localVarResponse =
                await GetEligibleUsersWithHttpInfoAsync(
                        page,
                        pageSize,
                        operationIndex,
                        cancellationToken
                    )
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get Eligible Users Get all users who are eligible for the SPARK Program. Maximum pageSize is 1000.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="page"> (optional)</param>
        /// <param name="pageSize"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetEligibleUsersResponse)</returns>
        public async System.Threading.Tasks.Task<EnergyCoordinationClient.Client.ApiResponse<GetEligibleUsersResponse>> GetEligibleUsersWithHttpInfoAsync(
            int? page = default(int?),
            int? pageSize = default(int?),
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json", "application/problem+json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (page != null)
            {
                localVarRequestOptions.QueryParameters.Add(
                    EnergyCoordinationClient.Client.ClientUtils.ParameterToMultiMap(
                        "",
                        "page",
                        page
                    )
                );
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(
                    EnergyCoordinationClient.Client.ClientUtils.ParameterToMultiMap(
                        "",
                        "pageSize",
                        pageSize
                    )
                );
            }

            localVarRequestOptions.Operation = "UserSparkProgramApi.GetEligibleUsers";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = await this
                .AsynchronousClient.GetAsync<GetEligibleUsersResponse>(
                    "/users/eligible",
                    localVarRequestOptions,
                    this.Configuration,
                    cancellationToken
                )
                .ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetEligibleUsers", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if MeterPoint id eligible for Spark Indicates whether or not the given MeterPoint is currently eligible for the Spark program
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mpid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetMpidEligibilityResponse</returns>
        public GetMpidEligibilityResponse GetMpidEligibility(string mpid, int operationIndex = 0)
        {
            EnergyCoordinationClient.Client.ApiResponse<GetMpidEligibilityResponse> localVarResponse =
                GetMpidEligibilityWithHttpInfo(mpid);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if MeterPoint id eligible for Spark Indicates whether or not the given MeterPoint is currently eligible for the Spark program
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mpid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetMpidEligibilityResponse</returns>
        public EnergyCoordinationClient.Client.ApiResponse<GetMpidEligibilityResponse> GetMpidEligibilityWithHttpInfo(
            string mpid,
            int operationIndex = 0
        )
        {
            // verify the required parameter 'mpid' is set
            if (mpid == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'mpid' when calling UserSparkProgramApi->GetMpidEligibility"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "mpid",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(mpid)
            ); // path parameter

            localVarRequestOptions.Operation = "UserSparkProgramApi.GetMpidEligibility";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetMpidEligibilityResponse>(
                "/meters/{mpid}/eligible",
                localVarRequestOptions,
                this.Configuration
            );
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "GetMpidEligibility",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Check if MeterPoint id eligible for Spark Indicates whether or not the given MeterPoint is currently eligible for the Spark program
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mpid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetMpidEligibilityResponse</returns>
        public async System.Threading.Tasks.Task<GetMpidEligibilityResponse> GetMpidEligibilityAsync(
            string mpid,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<GetMpidEligibilityResponse> localVarResponse =
                await GetMpidEligibilityWithHttpInfoAsync(mpid, operationIndex, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Check if MeterPoint id eligible for Spark Indicates whether or not the given MeterPoint is currently eligible for the Spark program
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="mpid"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetMpidEligibilityResponse)</returns>
        public async System.Threading.Tasks.Task<EnergyCoordinationClient.Client.ApiResponse<GetMpidEligibilityResponse>> GetMpidEligibilityWithHttpInfoAsync(
            string mpid,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            // verify the required parameter 'mpid' is set
            if (mpid == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'mpid' when calling UserSparkProgramApi->GetMpidEligibility"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "mpid",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(mpid)
            ); // path parameter

            localVarRequestOptions.Operation = "UserSparkProgramApi.GetMpidEligibility";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = await this
                .AsynchronousClient.GetAsync<GetMpidEligibilityResponse>(
                    "/meters/{mpid}/eligible",
                    localVarRequestOptions,
                    this.Configuration,
                    cancellationToken
                )
                .ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "GetMpidEligibility",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Eligibility Check if a user is eligible for the SPARK Program
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUserEligibilityResponse</returns>
        public GetUserEligibilityResponse GetUserEligibilityByUserId(
            string userId,
            int operationIndex = 0
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<GetUserEligibilityResponse> localVarResponse =
                GetUserEligibilityByUserIdWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Eligibility Check if a user is eligible for the SPARK Program
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUserEligibilityResponse</returns>
        public EnergyCoordinationClient.Client.ApiResponse<GetUserEligibilityResponse> GetUserEligibilityByUserIdWithHttpInfo(
            string userId,
            int operationIndex = 0
        )
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'userId' when calling UserSparkProgramApi->GetUserEligibilityByUserId"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "userId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(userId)
            ); // path parameter

            localVarRequestOptions.Operation = "UserSparkProgramApi.GetUserEligibilityByUserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetUserEligibilityResponse>(
                "/users/{userId}/eligibility",
                localVarRequestOptions,
                this.Configuration
            );
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "GetUserEligibilityByUserId",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Eligibility Check if a user is eligible for the SPARK Program
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserEligibilityResponse</returns>
        public async System.Threading.Tasks.Task<GetUserEligibilityResponse> GetUserEligibilityByUserIdAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<GetUserEligibilityResponse> localVarResponse =
                await GetUserEligibilityByUserIdWithHttpInfoAsync(
                        userId,
                        operationIndex,
                        cancellationToken
                    )
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Eligibility Check if a user is eligible for the SPARK Program
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserEligibilityResponse)</returns>
        public async System.Threading.Tasks.Task<EnergyCoordinationClient.Client.ApiResponse<GetUserEligibilityResponse>> GetUserEligibilityByUserIdWithHttpInfoAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'userId' when calling UserSparkProgramApi->GetUserEligibilityByUserId"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "userId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(userId)
            ); // path parameter

            localVarRequestOptions.Operation = "UserSparkProgramApi.GetUserEligibilityByUserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = await this
                .AsynchronousClient.GetAsync<GetUserEligibilityResponse>(
                    "/users/{userId}/eligibility",
                    localVarRequestOptions,
                    this.Configuration,
                    cancellationToken
                )
                .ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "GetUserEligibilityByUserId",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Enrollment Get a user&#39;s enrollment status. Also returns when the user was enrolled.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUserEnrollmentResponse</returns>
        public GetUserEnrollmentResponse GetUserEnrollmentByUserId(
            string userId,
            int operationIndex = 0
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<GetUserEnrollmentResponse> localVarResponse =
                GetUserEnrollmentByUserIdWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Enrollment Get a user&#39;s enrollment status. Also returns when the user was enrolled.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUserEnrollmentResponse</returns>
        public EnergyCoordinationClient.Client.ApiResponse<GetUserEnrollmentResponse> GetUserEnrollmentByUserIdWithHttpInfo(
            string userId,
            int operationIndex = 0
        )
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'userId' when calling UserSparkProgramApi->GetUserEnrollmentByUserId"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "userId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(userId)
            ); // path parameter

            localVarRequestOptions.Operation = "UserSparkProgramApi.GetUserEnrollmentByUserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetUserEnrollmentResponse>(
                "/users/{userId}/enrollment",
                localVarRequestOptions,
                this.Configuration
            );
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "GetUserEnrollmentByUserId",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Enrollment Get a user&#39;s enrollment status. Also returns when the user was enrolled.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserEnrollmentResponse</returns>
        public async System.Threading.Tasks.Task<GetUserEnrollmentResponse> GetUserEnrollmentByUserIdAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<GetUserEnrollmentResponse> localVarResponse =
                await GetUserEnrollmentByUserIdWithHttpInfoAsync(
                        userId,
                        operationIndex,
                        cancellationToken
                    )
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Enrollment Get a user&#39;s enrollment status. Also returns when the user was enrolled.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserEnrollmentResponse)</returns>
        public async System.Threading.Tasks.Task<EnergyCoordinationClient.Client.ApiResponse<GetUserEnrollmentResponse>> GetUserEnrollmentByUserIdWithHttpInfoAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'userId' when calling UserSparkProgramApi->GetUserEnrollmentByUserId"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "userId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(userId)
            ); // path parameter

            localVarRequestOptions.Operation = "UserSparkProgramApi.GetUserEnrollmentByUserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = await this
                .AsynchronousClient.GetAsync<GetUserEnrollmentResponse>(
                    "/users/{userId}/enrollment",
                    localVarRequestOptions,
                    this.Configuration,
                    cancellationToken
                )
                .ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "GetUserEnrollmentByUserId",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enroll User Enroll a user into the SPARK Program
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetUserEnrollmentResponse</returns>
        public GetUserEnrollmentResponse PostUserEnrollment(string userId, int operationIndex = 0)
        {
            EnergyCoordinationClient.Client.ApiResponse<GetUserEnrollmentResponse> localVarResponse =
                PostUserEnrollmentWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enroll User Enroll a user into the SPARK Program
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetUserEnrollmentResponse</returns>
        public EnergyCoordinationClient.Client.ApiResponse<GetUserEnrollmentResponse> PostUserEnrollmentWithHttpInfo(
            string userId,
            int operationIndex = 0
        )
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'userId' when calling UserSparkProgramApi->PostUserEnrollment"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "userId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(userId)
            ); // path parameter

            localVarRequestOptions.Operation = "UserSparkProgramApi.PostUserEnrollment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<GetUserEnrollmentResponse>(
                "/users/{userId}/enrollment",
                localVarRequestOptions,
                this.Configuration
            );
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "PostUserEnrollment",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Enroll User Enroll a user into the SPARK Program
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetUserEnrollmentResponse</returns>
        public async System.Threading.Tasks.Task<GetUserEnrollmentResponse> PostUserEnrollmentAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<GetUserEnrollmentResponse> localVarResponse =
                await PostUserEnrollmentWithHttpInfoAsync(userId, operationIndex, cancellationToken)
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Enroll User Enroll a user into the SPARK Program
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetUserEnrollmentResponse)</returns>
        public async System.Threading.Tasks.Task<EnergyCoordinationClient.Client.ApiResponse<GetUserEnrollmentResponse>> PostUserEnrollmentWithHttpInfoAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'userId' when calling UserSparkProgramApi->PostUserEnrollment"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "userId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(userId)
            ); // path parameter

            localVarRequestOptions.Operation = "UserSparkProgramApi.PostUserEnrollment";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = await this
                .AsynchronousClient.PostAsync<GetUserEnrollmentResponse>(
                    "/users/{userId}/enrollment",
                    localVarRequestOptions,
                    this.Configuration,
                    cancellationToken
                )
                .ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "PostUserEnrollment",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }
    }
}
