/*
 * Energy Coordination API - Partner Endpoints
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EnergyCoordinationClient.Client;
using EnergyCoordinationClient.Model;

namespace EnergyCoordinationClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISimulationEventsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Simulate LPC Location Event
        /// </summary>
        /// <remarks>
        /// Creates a &#x60;LocationLPC&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;locations&#x60; parameter is not specified, random locations will be targeted if any exist.  - If the &#x60;points&#x60; parameter is not specified, a random points array with maximum power will be generated.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulateLocationLPCEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SimulateEventResponse</returns>
        SimulateEventResponse PostLPCLocationSimulation(
            SimulateLocationLPCEventRequest simulateLocationLPCEventRequest,
            int operationIndex = 0
        );

        /// <summary>
        /// Simulate LPC Location Event
        /// </summary>
        /// <remarks>
        /// Creates a &#x60;LocationLPC&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;locations&#x60; parameter is not specified, random locations will be targeted if any exist.  - If the &#x60;points&#x60; parameter is not specified, a random points array with maximum power will be generated.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulateLocationLPCEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SimulateEventResponse</returns>
        ApiResponse<SimulateEventResponse> PostLPCLocationSimulationWithHttpInfo(
            SimulateLocationLPCEventRequest simulateLocationLPCEventRequest,
            int operationIndex = 0
        );

        /// <summary>
        /// Simulate LPC Resource Event
        /// </summary>
        /// <remarks>
        /// Creates a &#x60;ResourceLPC&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;resources&#x60; parameter is not specified, random resources at locations will be targeted if any exist.  - If the &#x60;points&#x60; parameter is not specified, a random points array with maximum power will be generated.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulateResourceLPCEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SimulateEventResponse</returns>
        SimulateEventResponse PostLPCResourceSimulation(
            SimulateResourceLPCEventRequest simulateResourceLPCEventRequest,
            int operationIndex = 0
        );

        /// <summary>
        /// Simulate LPC Resource Event
        /// </summary>
        /// <remarks>
        /// Creates a &#x60;ResourceLPC&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;resources&#x60; parameter is not specified, random resources at locations will be targeted if any exist.  - If the &#x60;points&#x60; parameter is not specified, a random points array with maximum power will be generated.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulateResourceLPCEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SimulateEventResponse</returns>
        ApiResponse<SimulateEventResponse> PostLPCResourceSimulationWithHttpInfo(
            SimulateResourceLPCEventRequest simulateResourceLPCEventRequest,
            int operationIndex = 0
        );

        /// <summary>
        /// Simulate Price Curve Event
        /// </summary>
        /// <remarks>
        /// Creates a &#x60;PriceCurve&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;targets&#x60; parameter is not specified, simulated resources and locations will be targeted instead if any exist.  - If the &#x60;priceArea&#x60; parameter is not specified, a random price area will be selected.  - If the &#x60;priceCurveDelta&#x60; parameter is not specified, a random price curve delta will be created.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulatePriceCurveEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SimulateEventResponse</returns>
        SimulateEventResponse PostPriceCurveSimulation(
            SimulatePriceCurveEventRequest simulatePriceCurveEventRequest,
            int operationIndex = 0
        );

        /// <summary>
        /// Simulate Price Curve Event
        /// </summary>
        /// <remarks>
        /// Creates a &#x60;PriceCurve&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;targets&#x60; parameter is not specified, simulated resources and locations will be targeted instead if any exist.  - If the &#x60;priceArea&#x60; parameter is not specified, a random price area will be selected.  - If the &#x60;priceCurveDelta&#x60; parameter is not specified, a random price curve delta will be created.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulatePriceCurveEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SimulateEventResponse</returns>
        ApiResponse<SimulateEventResponse> PostPriceCurveSimulationWithHttpInfo(
            SimulatePriceCurveEventRequest simulatePriceCurveEventRequest,
            int operationIndex = 0
        );

        /// <summary>
        /// Simulate User Eligibility Event
        /// </summary>
        /// <remarks>
        /// Creates a &#x60;UserEligibility&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  This event does not affect the eligibility of any users. It is only used to simulate the event.  For actual events, you can call the /users/eligible endpoint to check which users are eligible.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SimulateEventResponse</returns>
        SimulateEventResponse PostUserEligibilitySimulation(int operationIndex = 0);

        /// <summary>
        /// Simulate User Eligibility Event
        /// </summary>
        /// <remarks>
        /// Creates a &#x60;UserEligibility&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  This event does not affect the eligibility of any users. It is only used to simulate the event.  For actual events, you can call the /users/eligible endpoint to check which users are eligible.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SimulateEventResponse</returns>
        ApiResponse<SimulateEventResponse> PostUserEligibilitySimulationWithHttpInfo(
            int operationIndex = 0
        );
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISimulationEventsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Simulate LPC Location Event
        /// </summary>
        /// <remarks>
        /// Creates a &#x60;LocationLPC&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;locations&#x60; parameter is not specified, random locations will be targeted if any exist.  - If the &#x60;points&#x60; parameter is not specified, a random points array with maximum power will be generated.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulateLocationLPCEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimulateEventResponse</returns>
        System.Threading.Tasks.Task<SimulateEventResponse> PostLPCLocationSimulationAsync(
            SimulateLocationLPCEventRequest simulateLocationLPCEventRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Simulate LPC Location Event
        /// </summary>
        /// <remarks>
        /// Creates a &#x60;LocationLPC&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;locations&#x60; parameter is not specified, random locations will be targeted if any exist.  - If the &#x60;points&#x60; parameter is not specified, a random points array with maximum power will be generated.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulateLocationLPCEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimulateEventResponse)</returns>
        System.Threading.Tasks.Task<
            ApiResponse<SimulateEventResponse>
        > PostLPCLocationSimulationWithHttpInfoAsync(
            SimulateLocationLPCEventRequest simulateLocationLPCEventRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Simulate LPC Resource Event
        /// </summary>
        /// <remarks>
        /// Creates a &#x60;ResourceLPC&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;resources&#x60; parameter is not specified, random resources at locations will be targeted if any exist.  - If the &#x60;points&#x60; parameter is not specified, a random points array with maximum power will be generated.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulateResourceLPCEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimulateEventResponse</returns>
        System.Threading.Tasks.Task<SimulateEventResponse> PostLPCResourceSimulationAsync(
            SimulateResourceLPCEventRequest simulateResourceLPCEventRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Simulate LPC Resource Event
        /// </summary>
        /// <remarks>
        /// Creates a &#x60;ResourceLPC&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;resources&#x60; parameter is not specified, random resources at locations will be targeted if any exist.  - If the &#x60;points&#x60; parameter is not specified, a random points array with maximum power will be generated.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulateResourceLPCEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimulateEventResponse)</returns>
        System.Threading.Tasks.Task<
            ApiResponse<SimulateEventResponse>
        > PostLPCResourceSimulationWithHttpInfoAsync(
            SimulateResourceLPCEventRequest simulateResourceLPCEventRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Simulate Price Curve Event
        /// </summary>
        /// <remarks>
        /// Creates a &#x60;PriceCurve&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;targets&#x60; parameter is not specified, simulated resources and locations will be targeted instead if any exist.  - If the &#x60;priceArea&#x60; parameter is not specified, a random price area will be selected.  - If the &#x60;priceCurveDelta&#x60; parameter is not specified, a random price curve delta will be created.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulatePriceCurveEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimulateEventResponse</returns>
        System.Threading.Tasks.Task<SimulateEventResponse> PostPriceCurveSimulationAsync(
            SimulatePriceCurveEventRequest simulatePriceCurveEventRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Simulate Price Curve Event
        /// </summary>
        /// <remarks>
        /// Creates a &#x60;PriceCurve&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;targets&#x60; parameter is not specified, simulated resources and locations will be targeted instead if any exist.  - If the &#x60;priceArea&#x60; parameter is not specified, a random price area will be selected.  - If the &#x60;priceCurveDelta&#x60; parameter is not specified, a random price curve delta will be created.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulatePriceCurveEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimulateEventResponse)</returns>
        System.Threading.Tasks.Task<
            ApiResponse<SimulateEventResponse>
        > PostPriceCurveSimulationWithHttpInfoAsync(
            SimulatePriceCurveEventRequest simulatePriceCurveEventRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Simulate User Eligibility Event
        /// </summary>
        /// <remarks>
        /// Creates a &#x60;UserEligibility&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  This event does not affect the eligibility of any users. It is only used to simulate the event.  For actual events, you can call the /users/eligible endpoint to check which users are eligible.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimulateEventResponse</returns>
        System.Threading.Tasks.Task<SimulateEventResponse> PostUserEligibilitySimulationAsync(
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Simulate User Eligibility Event
        /// </summary>
        /// <remarks>
        /// Creates a &#x60;UserEligibility&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  This event does not affect the eligibility of any users. It is only used to simulate the event.  For actual events, you can call the /users/eligible endpoint to check which users are eligible.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimulateEventResponse)</returns>
        System.Threading.Tasks.Task<
            ApiResponse<SimulateEventResponse>
        > PostUserEligibilitySimulationWithHttpInfoAsync(
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface ISimulationEventsApi : ISimulationEventsApiSync, ISimulationEventsApiAsync { }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class SimulationEventsApi : ISimulationEventsApi
    {
        private EnergyCoordinationClient.Client.ExceptionFactory _exceptionFactory = (
            name,
            response
        ) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationEventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SimulationEventsApi()
            : this((string)null) { }

        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationEventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public SimulationEventsApi(string basePath)
        {
            this.Configuration = EnergyCoordinationClient.Client.Configuration.MergeConfigurations(
                EnergyCoordinationClient.Client.GlobalConfiguration.Instance,
                new EnergyCoordinationClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EnergyCoordinationClient.Client.ApiClient(
                this.Configuration.BasePath
            );
            this.AsynchronousClient = new EnergyCoordinationClient.Client.ApiClient(
                this.Configuration.BasePath
            );
            this.ExceptionFactory = EnergyCoordinationClient
                .Client
                .Configuration
                .DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationEventsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public SimulationEventsApi(EnergyCoordinationClient.Client.Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException("configuration");

            this.Configuration = EnergyCoordinationClient.Client.Configuration.MergeConfigurations(
                EnergyCoordinationClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EnergyCoordinationClient.Client.ApiClient(
                this.Configuration.BasePath
            );
            this.AsynchronousClient = new EnergyCoordinationClient.Client.ApiClient(
                this.Configuration.BasePath
            );
            ExceptionFactory = EnergyCoordinationClient
                .Client
                .Configuration
                .DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="SimulationEventsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public SimulationEventsApi(
            EnergyCoordinationClient.Client.ISynchronousClient client,
            EnergyCoordinationClient.Client.IAsynchronousClient asyncClient,
            EnergyCoordinationClient.Client.IReadableConfiguration configuration
        )
        {
            if (client == null)
                throw new ArgumentNullException("client");
            if (asyncClient == null)
                throw new ArgumentNullException("asyncClient");
            if (configuration == null)
                throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EnergyCoordinationClient
                .Client
                .Configuration
                .DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EnergyCoordinationClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EnergyCoordinationClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EnergyCoordinationClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EnergyCoordinationClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException(
                        "Multicast delegate for ExceptionFactory is unsupported."
                    );
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Simulate LPC Location Event Creates a &#x60;LocationLPC&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;locations&#x60; parameter is not specified, random locations will be targeted if any exist.  - If the &#x60;points&#x60; parameter is not specified, a random points array with maximum power will be generated.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulateLocationLPCEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SimulateEventResponse</returns>
        public SimulateEventResponse PostLPCLocationSimulation(
            SimulateLocationLPCEventRequest simulateLocationLPCEventRequest,
            int operationIndex = 0
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<SimulateEventResponse> localVarResponse =
                PostLPCLocationSimulationWithHttpInfo(simulateLocationLPCEventRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Simulate LPC Location Event Creates a &#x60;LocationLPC&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;locations&#x60; parameter is not specified, random locations will be targeted if any exist.  - If the &#x60;points&#x60; parameter is not specified, a random points array with maximum power will be generated.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulateLocationLPCEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SimulateEventResponse</returns>
        public EnergyCoordinationClient.Client.ApiResponse<SimulateEventResponse> PostLPCLocationSimulationWithHttpInfo(
            SimulateLocationLPCEventRequest simulateLocationLPCEventRequest,
            int operationIndex = 0
        )
        {
            // verify the required parameter 'simulateLocationLPCEventRequest' is set
            if (simulateLocationLPCEventRequest == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'simulateLocationLPCEventRequest' when calling SimulationEventsApi->PostLPCLocationSimulation"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { "application/json" };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = simulateLocationLPCEventRequest;

            localVarRequestOptions.Operation = "SimulationEventsApi.PostLPCLocationSimulation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SimulateEventResponse>(
                "/simulation/events/lpc/locations",
                localVarRequestOptions,
                this.Configuration
            );
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "PostLPCLocationSimulation",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Simulate LPC Location Event Creates a &#x60;LocationLPC&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;locations&#x60; parameter is not specified, random locations will be targeted if any exist.  - If the &#x60;points&#x60; parameter is not specified, a random points array with maximum power will be generated.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulateLocationLPCEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimulateEventResponse</returns>
        public async System.Threading.Tasks.Task<SimulateEventResponse> PostLPCLocationSimulationAsync(
            SimulateLocationLPCEventRequest simulateLocationLPCEventRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<SimulateEventResponse> localVarResponse =
                await PostLPCLocationSimulationWithHttpInfoAsync(
                        simulateLocationLPCEventRequest,
                        operationIndex,
                        cancellationToken
                    )
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Simulate LPC Location Event Creates a &#x60;LocationLPC&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;locations&#x60; parameter is not specified, random locations will be targeted if any exist.  - If the &#x60;points&#x60; parameter is not specified, a random points array with maximum power will be generated.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulateLocationLPCEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimulateEventResponse)</returns>
        public async System.Threading.Tasks.Task<EnergyCoordinationClient.Client.ApiResponse<SimulateEventResponse>> PostLPCLocationSimulationWithHttpInfoAsync(
            SimulateLocationLPCEventRequest simulateLocationLPCEventRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            // verify the required parameter 'simulateLocationLPCEventRequest' is set
            if (simulateLocationLPCEventRequest == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'simulateLocationLPCEventRequest' when calling SimulationEventsApi->PostLPCLocationSimulation"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { "application/json" };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = simulateLocationLPCEventRequest;

            localVarRequestOptions.Operation = "SimulationEventsApi.PostLPCLocationSimulation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = await this
                .AsynchronousClient.PostAsync<SimulateEventResponse>(
                    "/simulation/events/lpc/locations",
                    localVarRequestOptions,
                    this.Configuration,
                    cancellationToken
                )
                .ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "PostLPCLocationSimulation",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Simulate LPC Resource Event Creates a &#x60;ResourceLPC&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;resources&#x60; parameter is not specified, random resources at locations will be targeted if any exist.  - If the &#x60;points&#x60; parameter is not specified, a random points array with maximum power will be generated.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulateResourceLPCEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SimulateEventResponse</returns>
        public SimulateEventResponse PostLPCResourceSimulation(
            SimulateResourceLPCEventRequest simulateResourceLPCEventRequest,
            int operationIndex = 0
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<SimulateEventResponse> localVarResponse =
                PostLPCResourceSimulationWithHttpInfo(simulateResourceLPCEventRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Simulate LPC Resource Event Creates a &#x60;ResourceLPC&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;resources&#x60; parameter is not specified, random resources at locations will be targeted if any exist.  - If the &#x60;points&#x60; parameter is not specified, a random points array with maximum power will be generated.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulateResourceLPCEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SimulateEventResponse</returns>
        public EnergyCoordinationClient.Client.ApiResponse<SimulateEventResponse> PostLPCResourceSimulationWithHttpInfo(
            SimulateResourceLPCEventRequest simulateResourceLPCEventRequest,
            int operationIndex = 0
        )
        {
            // verify the required parameter 'simulateResourceLPCEventRequest' is set
            if (simulateResourceLPCEventRequest == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'simulateResourceLPCEventRequest' when calling SimulationEventsApi->PostLPCResourceSimulation"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { "application/json" };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = simulateResourceLPCEventRequest;

            localVarRequestOptions.Operation = "SimulationEventsApi.PostLPCResourceSimulation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SimulateEventResponse>(
                "/simulation/events/lpc/resources",
                localVarRequestOptions,
                this.Configuration
            );
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "PostLPCResourceSimulation",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Simulate LPC Resource Event Creates a &#x60;ResourceLPC&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;resources&#x60; parameter is not specified, random resources at locations will be targeted if any exist.  - If the &#x60;points&#x60; parameter is not specified, a random points array with maximum power will be generated.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulateResourceLPCEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimulateEventResponse</returns>
        public async System.Threading.Tasks.Task<SimulateEventResponse> PostLPCResourceSimulationAsync(
            SimulateResourceLPCEventRequest simulateResourceLPCEventRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<SimulateEventResponse> localVarResponse =
                await PostLPCResourceSimulationWithHttpInfoAsync(
                        simulateResourceLPCEventRequest,
                        operationIndex,
                        cancellationToken
                    )
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Simulate LPC Resource Event Creates a &#x60;ResourceLPC&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;resources&#x60; parameter is not specified, random resources at locations will be targeted if any exist.  - If the &#x60;points&#x60; parameter is not specified, a random points array with maximum power will be generated.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulateResourceLPCEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimulateEventResponse)</returns>
        public async System.Threading.Tasks.Task<EnergyCoordinationClient.Client.ApiResponse<SimulateEventResponse>> PostLPCResourceSimulationWithHttpInfoAsync(
            SimulateResourceLPCEventRequest simulateResourceLPCEventRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            // verify the required parameter 'simulateResourceLPCEventRequest' is set
            if (simulateResourceLPCEventRequest == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'simulateResourceLPCEventRequest' when calling SimulationEventsApi->PostLPCResourceSimulation"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { "application/json" };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = simulateResourceLPCEventRequest;

            localVarRequestOptions.Operation = "SimulationEventsApi.PostLPCResourceSimulation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = await this
                .AsynchronousClient.PostAsync<SimulateEventResponse>(
                    "/simulation/events/lpc/resources",
                    localVarRequestOptions,
                    this.Configuration,
                    cancellationToken
                )
                .ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "PostLPCResourceSimulation",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Simulate Price Curve Event Creates a &#x60;PriceCurve&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;targets&#x60; parameter is not specified, simulated resources and locations will be targeted instead if any exist.  - If the &#x60;priceArea&#x60; parameter is not specified, a random price area will be selected.  - If the &#x60;priceCurveDelta&#x60; parameter is not specified, a random price curve delta will be created.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulatePriceCurveEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SimulateEventResponse</returns>
        public SimulateEventResponse PostPriceCurveSimulation(
            SimulatePriceCurveEventRequest simulatePriceCurveEventRequest,
            int operationIndex = 0
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<SimulateEventResponse> localVarResponse =
                PostPriceCurveSimulationWithHttpInfo(simulatePriceCurveEventRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Simulate Price Curve Event Creates a &#x60;PriceCurve&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;targets&#x60; parameter is not specified, simulated resources and locations will be targeted instead if any exist.  - If the &#x60;priceArea&#x60; parameter is not specified, a random price area will be selected.  - If the &#x60;priceCurveDelta&#x60; parameter is not specified, a random price curve delta will be created.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulatePriceCurveEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SimulateEventResponse</returns>
        public EnergyCoordinationClient.Client.ApiResponse<SimulateEventResponse> PostPriceCurveSimulationWithHttpInfo(
            SimulatePriceCurveEventRequest simulatePriceCurveEventRequest,
            int operationIndex = 0
        )
        {
            // verify the required parameter 'simulatePriceCurveEventRequest' is set
            if (simulatePriceCurveEventRequest == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'simulatePriceCurveEventRequest' when calling SimulationEventsApi->PostPriceCurveSimulation"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { "application/json" };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = simulatePriceCurveEventRequest;

            localVarRequestOptions.Operation = "SimulationEventsApi.PostPriceCurveSimulation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SimulateEventResponse>(
                "/simulation/events/pricecurve",
                localVarRequestOptions,
                this.Configuration
            );
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "PostPriceCurveSimulation",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Simulate Price Curve Event Creates a &#x60;PriceCurve&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;targets&#x60; parameter is not specified, simulated resources and locations will be targeted instead if any exist.  - If the &#x60;priceArea&#x60; parameter is not specified, a random price area will be selected.  - If the &#x60;priceCurveDelta&#x60; parameter is not specified, a random price curve delta will be created.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulatePriceCurveEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimulateEventResponse</returns>
        public async System.Threading.Tasks.Task<SimulateEventResponse> PostPriceCurveSimulationAsync(
            SimulatePriceCurveEventRequest simulatePriceCurveEventRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<SimulateEventResponse> localVarResponse =
                await PostPriceCurveSimulationWithHttpInfoAsync(
                        simulatePriceCurveEventRequest,
                        operationIndex,
                        cancellationToken
                    )
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Simulate Price Curve Event Creates a &#x60;PriceCurve&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  - If the &#x60;targets&#x60; parameter is not specified, simulated resources and locations will be targeted instead if any exist.  - If the &#x60;priceArea&#x60; parameter is not specified, a random price area will be selected.  - If the &#x60;priceCurveDelta&#x60; parameter is not specified, a random price curve delta will be created.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="simulatePriceCurveEventRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimulateEventResponse)</returns>
        public async System.Threading.Tasks.Task<EnergyCoordinationClient.Client.ApiResponse<SimulateEventResponse>> PostPriceCurveSimulationWithHttpInfoAsync(
            SimulatePriceCurveEventRequest simulatePriceCurveEventRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            // verify the required parameter 'simulatePriceCurveEventRequest' is set
            if (simulatePriceCurveEventRequest == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'simulatePriceCurveEventRequest' when calling SimulationEventsApi->PostPriceCurveSimulation"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { "application/json" };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = simulatePriceCurveEventRequest;

            localVarRequestOptions.Operation = "SimulationEventsApi.PostPriceCurveSimulation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = await this
                .AsynchronousClient.PostAsync<SimulateEventResponse>(
                    "/simulation/events/pricecurve",
                    localVarRequestOptions,
                    this.Configuration,
                    cancellationToken
                )
                .ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "PostPriceCurveSimulation",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Simulate User Eligibility Event Creates a &#x60;UserEligibility&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  This event does not affect the eligibility of any users. It is only used to simulate the event.  For actual events, you can call the /users/eligible endpoint to check which users are eligible.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SimulateEventResponse</returns>
        public SimulateEventResponse PostUserEligibilitySimulation(int operationIndex = 0)
        {
            EnergyCoordinationClient.Client.ApiResponse<SimulateEventResponse> localVarResponse =
                PostUserEligibilitySimulationWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Simulate User Eligibility Event Creates a &#x60;UserEligibility&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  This event does not affect the eligibility of any users. It is only used to simulate the event.  For actual events, you can call the /users/eligible endpoint to check which users are eligible.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SimulateEventResponse</returns>
        public EnergyCoordinationClient.Client.ApiResponse<SimulateEventResponse> PostUserEligibilitySimulationWithHttpInfo(
            int operationIndex = 0
        )
        {
            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Operation = "SimulationEventsApi.PostUserEligibilitySimulation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SimulateEventResponse>(
                "/simulation/events/usereligibility",
                localVarRequestOptions,
                this.Configuration
            );
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "PostUserEligibilitySimulation",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Simulate User Eligibility Event Creates a &#x60;UserEligibility&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  This event does not affect the eligibility of any users. It is only used to simulate the event.  For actual events, you can call the /users/eligible endpoint to check which users are eligible.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SimulateEventResponse</returns>
        public async System.Threading.Tasks.Task<SimulateEventResponse> PostUserEligibilitySimulationAsync(
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<SimulateEventResponse> localVarResponse =
                await PostUserEligibilitySimulationWithHttpInfoAsync(
                        operationIndex,
                        cancellationToken
                    )
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Simulate User Eligibility Event Creates a &#x60;UserEligibility&#x60; event in the system using the given parameters. The event will be sent to all webhooks that subscribe to the given type of event.  This event does not affect the eligibility of any users. It is only used to simulate the event.  For actual events, you can call the /users/eligible endpoint to check which users are eligible.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SimulateEventResponse)</returns>
        public async System.Threading.Tasks.Task<EnergyCoordinationClient.Client.ApiResponse<SimulateEventResponse>> PostUserEligibilitySimulationWithHttpInfoAsync(
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Operation = "SimulationEventsApi.PostUserEligibilitySimulation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = await this
                .AsynchronousClient.PostAsync<SimulateEventResponse>(
                    "/simulation/events/usereligibility",
                    localVarRequestOptions,
                    this.Configuration,
                    cancellationToken
                )
                .ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "PostUserEligibilitySimulation",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }
    }
}
