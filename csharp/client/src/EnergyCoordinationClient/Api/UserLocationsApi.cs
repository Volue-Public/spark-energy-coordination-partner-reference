/*
 * Energy Coordination API - Partner Endpoints
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EnergyCoordinationClient.Client;
using EnergyCoordinationClient.Model;

namespace EnergyCoordinationClient.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserLocationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Delete User Location
        /// </summary>
        /// <remarks>
        /// Returns 204 No Content if the location was deleted successfully. Returns 404 Not Found if the location to delete does not exist.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void DeleteLocation(string userId, string locationId, int operationIndex = 0);

        /// <summary>
        /// Delete User Location
        /// </summary>
        /// <remarks>
        /// Returns 204 No Content if the location was deleted successfully. Returns 404 Not Found if the location to delete does not exist.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> DeleteLocationWithHttpInfo(
            string userId,
            string locationId,
            int operationIndex = 0
        );

        /// <summary>
        /// Get User Location By Location Id
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLocationResponse</returns>
        GetLocationResponse GetLocationByLocationId(
            string userId,
            string locationId,
            int operationIndex = 0
        );

        /// <summary>
        /// Get User Location By Location Id
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLocationResponse</returns>
        ApiResponse<GetLocationResponse> GetLocationByLocationIdWithHttpInfo(
            string userId,
            string locationId,
            int operationIndex = 0
        );

        /// <summary>
        /// Get A User&#39;s Locations
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetLocationResponse&gt;</returns>
        List<GetLocationResponse> GetLocationsByUserId(string userId, int operationIndex = 0);

        /// <summary>
        /// Get A User&#39;s Locations
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetLocationResponse&gt;</returns>
        ApiResponse<List<GetLocationResponse>> GetLocationsByUserIdWithHttpInfo(
            string userId,
            int operationIndex = 0
        );

        /// <summary>
        /// Patch User Location
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="patchLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLocationResponse</returns>
        GetLocationResponse PatchLocation(
            string userId,
            string locationId,
            PatchLocationRequest patchLocationRequest,
            int operationIndex = 0
        );

        /// <summary>
        /// Patch User Location
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="patchLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLocationResponse</returns>
        ApiResponse<GetLocationResponse> PatchLocationWithHttpInfo(
            string userId,
            string locationId,
            PatchLocationRequest patchLocationRequest,
            int operationIndex = 0
        );

        /// <summary>
        /// Create User Location
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="postLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PostLocation(
            string userId,
            PostLocationRequest postLocationRequest,
            int operationIndex = 0
        );

        /// <summary>
        /// Create User Location
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="postLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostLocationWithHttpInfo(
            string userId,
            PostLocationRequest postLocationRequest,
            int operationIndex = 0
        );

        /// <summary>
        /// Create Multiple User Locations
        /// </summary>
        /// <remarks>
        /// Create multiple locations for several users at once. \&quot;The request body should be an array of objects, each containing a user id and a create location request.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postLocationsBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void PostLocations(
            PostLocationsBatchRequest postLocationsBatchRequest,
            int operationIndex = 0
        );

        /// <summary>
        /// Create Multiple User Locations
        /// </summary>
        /// <remarks>
        /// Create multiple locations for several users at once. \&quot;The request body should be an array of objects, each containing a user id and a create location request.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postLocationsBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> PostLocationsWithHttpInfo(
            PostLocationsBatchRequest postLocationsBatchRequest,
            int operationIndex = 0
        );

        /// <summary>
        /// Update User Location
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="putLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLocationResponse</returns>
        GetLocationResponse UpdateLocation(
            string userId,
            string locationId,
            PutLocationRequest putLocationRequest,
            int operationIndex = 0
        );

        /// <summary>
        /// Update User Location
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="putLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLocationResponse</returns>
        ApiResponse<GetLocationResponse> UpdateLocationWithHttpInfo(
            string userId,
            string locationId,
            PutLocationRequest putLocationRequest,
            int operationIndex = 0
        );
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserLocationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Delete User Location
        /// </summary>
        /// <remarks>
        /// Returns 204 No Content if the location was deleted successfully. Returns 404 Not Found if the location to delete does not exist.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task DeleteLocationAsync(
            string userId,
            string locationId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Delete User Location
        /// </summary>
        /// <remarks>
        /// Returns 204 No Content if the location was deleted successfully. Returns 404 Not Found if the location to delete does not exist.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> DeleteLocationWithHttpInfoAsync(
            string userId,
            string locationId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Get User Location By Location Id
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLocationResponse</returns>
        System.Threading.Tasks.Task<GetLocationResponse> GetLocationByLocationIdAsync(
            string userId,
            string locationId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Get User Location By Location Id
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLocationResponse)</returns>
        System.Threading.Tasks.Task<
            ApiResponse<GetLocationResponse>
        > GetLocationByLocationIdWithHttpInfoAsync(
            string userId,
            string locationId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Get A User&#39;s Locations
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetLocationResponse&gt;</returns>
        System.Threading.Tasks.Task<List<GetLocationResponse>> GetLocationsByUserIdAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Get A User&#39;s Locations
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetLocationResponse&gt;)</returns>
        System.Threading.Tasks.Task<
            ApiResponse<List<GetLocationResponse>>
        > GetLocationsByUserIdWithHttpInfoAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Patch User Location
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="patchLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLocationResponse</returns>
        System.Threading.Tasks.Task<GetLocationResponse> PatchLocationAsync(
            string userId,
            string locationId,
            PatchLocationRequest patchLocationRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Patch User Location
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="patchLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLocationResponse)</returns>
        System.Threading.Tasks.Task<
            ApiResponse<GetLocationResponse>
        > PatchLocationWithHttpInfoAsync(
            string userId,
            string locationId,
            PatchLocationRequest patchLocationRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Create User Location
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="postLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostLocationAsync(
            string userId,
            PostLocationRequest postLocationRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Create User Location
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="postLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostLocationWithHttpInfoAsync(
            string userId,
            PostLocationRequest postLocationRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Create Multiple User Locations
        /// </summary>
        /// <remarks>
        /// Create multiple locations for several users at once. \&quot;The request body should be an array of objects, each containing a user id and a create location request.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postLocationsBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task PostLocationsAsync(
            PostLocationsBatchRequest postLocationsBatchRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Create Multiple User Locations
        /// </summary>
        /// <remarks>
        /// Create multiple locations for several users at once. \&quot;The request body should be an array of objects, each containing a user id and a create location request.
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postLocationsBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> PostLocationsWithHttpInfoAsync(
            PostLocationsBatchRequest postLocationsBatchRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Update User Location
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="putLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLocationResponse</returns>
        System.Threading.Tasks.Task<GetLocationResponse> UpdateLocationAsync(
            string userId,
            string locationId,
            PutLocationRequest putLocationRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );

        /// <summary>
        /// Update User Location
        /// </summary>
        /// <remarks>
        ///
        /// </remarks>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="putLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLocationResponse)</returns>
        System.Threading.Tasks.Task<
            ApiResponse<GetLocationResponse>
        > UpdateLocationWithHttpInfoAsync(
            string userId,
            string locationId,
            PutLocationRequest putLocationRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        );
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserLocationsApi : IUserLocationsApiSync, IUserLocationsApiAsync { }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserLocationsApi : IUserLocationsApi
    {
        private EnergyCoordinationClient.Client.ExceptionFactory _exceptionFactory = (
            name,
            response
        ) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserLocationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserLocationsApi()
            : this((string)null) { }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserLocationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public UserLocationsApi(string basePath)
        {
            this.Configuration = EnergyCoordinationClient.Client.Configuration.MergeConfigurations(
                EnergyCoordinationClient.Client.GlobalConfiguration.Instance,
                new EnergyCoordinationClient.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EnergyCoordinationClient.Client.ApiClient(
                this.Configuration.BasePath
            );
            this.AsynchronousClient = new EnergyCoordinationClient.Client.ApiClient(
                this.Configuration.BasePath
            );
            this.ExceptionFactory = EnergyCoordinationClient
                .Client
                .Configuration
                .DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserLocationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public UserLocationsApi(EnergyCoordinationClient.Client.Configuration configuration)
        {
            if (configuration == null)
                throw new ArgumentNullException("configuration");

            this.Configuration = EnergyCoordinationClient.Client.Configuration.MergeConfigurations(
                EnergyCoordinationClient.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EnergyCoordinationClient.Client.ApiClient(
                this.Configuration.BasePath
            );
            this.AsynchronousClient = new EnergyCoordinationClient.Client.ApiClient(
                this.Configuration.BasePath
            );
            ExceptionFactory = EnergyCoordinationClient
                .Client
                .Configuration
                .DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserLocationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public UserLocationsApi(
            EnergyCoordinationClient.Client.ISynchronousClient client,
            EnergyCoordinationClient.Client.IAsynchronousClient asyncClient,
            EnergyCoordinationClient.Client.IReadableConfiguration configuration
        )
        {
            if (client == null)
                throw new ArgumentNullException("client");
            if (asyncClient == null)
                throw new ArgumentNullException("asyncClient");
            if (configuration == null)
                throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EnergyCoordinationClient
                .Client
                .Configuration
                .DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EnergyCoordinationClient.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EnergyCoordinationClient.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EnergyCoordinationClient.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EnergyCoordinationClient.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException(
                        "Multicast delegate for ExceptionFactory is unsupported."
                    );
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Delete User Location Returns 204 No Content if the location was deleted successfully. Returns 404 Not Found if the location to delete does not exist.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void DeleteLocation(string userId, string locationId, int operationIndex = 0)
        {
            DeleteLocationWithHttpInfo(userId, locationId);
        }

        /// <summary>
        /// Delete User Location Returns 204 No Content if the location was deleted successfully. Returns 404 Not Found if the location to delete does not exist.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EnergyCoordinationClient.Client.ApiResponse<Object> DeleteLocationWithHttpInfo(
            string userId,
            string locationId,
            int operationIndex = 0
        )
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'userId' when calling UserLocationsApi->DeleteLocation"
                );
            }

            // verify the required parameter 'locationId' is set
            if (locationId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'locationId' when calling UserLocationsApi->DeleteLocation"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "userId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(userId)
            ); // path parameter
            localVarRequestOptions.PathParameters.Add(
                "locationId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(locationId)
            ); // path parameter

            localVarRequestOptions.Operation = "UserLocationsApi.DeleteLocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>(
                "/users/{userId}/locations/{locationId}",
                localVarRequestOptions,
                this.Configuration
            );
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Delete User Location Returns 204 No Content if the location was deleted successfully. Returns 404 Not Found if the location to delete does not exist.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task DeleteLocationAsync(
            string userId,
            string locationId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            await DeleteLocationWithHttpInfoAsync(
                    userId,
                    locationId,
                    operationIndex,
                    cancellationToken
                )
                .ConfigureAwait(false);
        }

        /// <summary>
        /// Delete User Location Returns 204 No Content if the location was deleted successfully. Returns 404 Not Found if the location to delete does not exist.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EnergyCoordinationClient.Client.ApiResponse<Object>> DeleteLocationWithHttpInfoAsync(
            string userId,
            string locationId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'userId' when calling UserLocationsApi->DeleteLocation"
                );
            }

            // verify the required parameter 'locationId' is set
            if (locationId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'locationId' when calling UserLocationsApi->DeleteLocation"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "userId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(userId)
            ); // path parameter
            localVarRequestOptions.PathParameters.Add(
                "locationId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(locationId)
            ); // path parameter

            localVarRequestOptions.Operation = "UserLocationsApi.DeleteLocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = await this
                .AsynchronousClient.DeleteAsync<Object>(
                    "/users/{userId}/locations/{locationId}",
                    localVarRequestOptions,
                    this.Configuration,
                    cancellationToken
                )
                .ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("DeleteLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Location By Location Id
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLocationResponse</returns>
        public GetLocationResponse GetLocationByLocationId(
            string userId,
            string locationId,
            int operationIndex = 0
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<GetLocationResponse> localVarResponse =
                GetLocationByLocationIdWithHttpInfo(userId, locationId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Location By Location Id
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLocationResponse</returns>
        public EnergyCoordinationClient.Client.ApiResponse<GetLocationResponse> GetLocationByLocationIdWithHttpInfo(
            string userId,
            string locationId,
            int operationIndex = 0
        )
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'userId' when calling UserLocationsApi->GetLocationByLocationId"
                );
            }

            // verify the required parameter 'locationId' is set
            if (locationId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'locationId' when calling UserLocationsApi->GetLocationByLocationId"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "userId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(userId)
            ); // path parameter
            localVarRequestOptions.PathParameters.Add(
                "locationId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(locationId)
            ); // path parameter

            localVarRequestOptions.Operation = "UserLocationsApi.GetLocationByLocationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<GetLocationResponse>(
                "/users/{userId}/locations/{locationId}",
                localVarRequestOptions,
                this.Configuration
            );
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "GetLocationByLocationId",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get User Location By Location Id
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLocationResponse</returns>
        public async System.Threading.Tasks.Task<GetLocationResponse> GetLocationByLocationIdAsync(
            string userId,
            string locationId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<GetLocationResponse> localVarResponse =
                await GetLocationByLocationIdWithHttpInfoAsync(
                        userId,
                        locationId,
                        operationIndex,
                        cancellationToken
                    )
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get User Location By Location Id
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLocationResponse)</returns>
        public async System.Threading.Tasks.Task<EnergyCoordinationClient.Client.ApiResponse<GetLocationResponse>> GetLocationByLocationIdWithHttpInfoAsync(
            string userId,
            string locationId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'userId' when calling UserLocationsApi->GetLocationByLocationId"
                );
            }

            // verify the required parameter 'locationId' is set
            if (locationId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'locationId' when calling UserLocationsApi->GetLocationByLocationId"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "userId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(userId)
            ); // path parameter
            localVarRequestOptions.PathParameters.Add(
                "locationId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(locationId)
            ); // path parameter

            localVarRequestOptions.Operation = "UserLocationsApi.GetLocationByLocationId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = await this
                .AsynchronousClient.GetAsync<GetLocationResponse>(
                    "/users/{userId}/locations/{locationId}",
                    localVarRequestOptions,
                    this.Configuration,
                    cancellationToken
                )
                .ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "GetLocationByLocationId",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get A User&#39;s Locations
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;GetLocationResponse&gt;</returns>
        public List<GetLocationResponse> GetLocationsByUserId(string userId, int operationIndex = 0)
        {
            EnergyCoordinationClient.Client.ApiResponse<
                List<GetLocationResponse>
            > localVarResponse = GetLocationsByUserIdWithHttpInfo(userId);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get A User&#39;s Locations
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;GetLocationResponse&gt;</returns>
        public EnergyCoordinationClient.Client.ApiResponse<
            List<GetLocationResponse>
        > GetLocationsByUserIdWithHttpInfo(string userId, int operationIndex = 0)
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'userId' when calling UserLocationsApi->GetLocationsByUserId"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "userId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(userId)
            ); // path parameter

            localVarRequestOptions.Operation = "UserLocationsApi.GetLocationsByUserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<GetLocationResponse>>(
                "/users/{userId}/locations",
                localVarRequestOptions,
                this.Configuration
            );
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "GetLocationsByUserId",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get A User&#39;s Locations
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;GetLocationResponse&gt;</returns>
        public async System.Threading.Tasks.Task<
            List<GetLocationResponse>
        > GetLocationsByUserIdAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<
                List<GetLocationResponse>
            > localVarResponse = await GetLocationsByUserIdWithHttpInfoAsync(
                    userId,
                    operationIndex,
                    cancellationToken
                )
                .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Get A User&#39;s Locations
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;GetLocationResponse&gt;)</returns>
        public async System.Threading.Tasks.Task<EnergyCoordinationClient.Client.ApiResponse<
            List<GetLocationResponse>
        >> GetLocationsByUserIdWithHttpInfoAsync(
            string userId,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'userId' when calling UserLocationsApi->GetLocationsByUserId"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "userId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(userId)
            ); // path parameter

            localVarRequestOptions.Operation = "UserLocationsApi.GetLocationsByUserId";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = await this
                .AsynchronousClient.GetAsync<List<GetLocationResponse>>(
                    "/users/{userId}/locations",
                    localVarRequestOptions,
                    this.Configuration,
                    cancellationToken
                )
                .ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory(
                    "GetLocationsByUserId",
                    localVarResponse
                );
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch User Location
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="patchLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLocationResponse</returns>
        public GetLocationResponse PatchLocation(
            string userId,
            string locationId,
            PatchLocationRequest patchLocationRequest,
            int operationIndex = 0
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<GetLocationResponse> localVarResponse =
                PatchLocationWithHttpInfo(userId, locationId, patchLocationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch User Location
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="patchLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLocationResponse</returns>
        public EnergyCoordinationClient.Client.ApiResponse<GetLocationResponse> PatchLocationWithHttpInfo(
            string userId,
            string locationId,
            PatchLocationRequest patchLocationRequest,
            int operationIndex = 0
        )
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'userId' when calling UserLocationsApi->PatchLocation"
                );
            }

            // verify the required parameter 'locationId' is set
            if (locationId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'locationId' when calling UserLocationsApi->PatchLocation"
                );
            }

            // verify the required parameter 'patchLocationRequest' is set
            if (patchLocationRequest == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'patchLocationRequest' when calling UserLocationsApi->PatchLocation"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { "application/json" };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "userId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(userId)
            ); // path parameter
            localVarRequestOptions.PathParameters.Add(
                "locationId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(locationId)
            ); // path parameter
            localVarRequestOptions.Data = patchLocationRequest;

            localVarRequestOptions.Operation = "UserLocationsApi.PatchLocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<GetLocationResponse>(
                "/users/{userId}/locations/{locationId}",
                localVarRequestOptions,
                this.Configuration
            );
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Patch User Location
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="patchLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLocationResponse</returns>
        public async System.Threading.Tasks.Task<GetLocationResponse> PatchLocationAsync(
            string userId,
            string locationId,
            PatchLocationRequest patchLocationRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<GetLocationResponse> localVarResponse =
                await PatchLocationWithHttpInfoAsync(
                        userId,
                        locationId,
                        patchLocationRequest,
                        operationIndex,
                        cancellationToken
                    )
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Patch User Location
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="patchLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLocationResponse)</returns>
        public async System.Threading.Tasks.Task<EnergyCoordinationClient.Client.ApiResponse<GetLocationResponse>> PatchLocationWithHttpInfoAsync(
            string userId,
            string locationId,
            PatchLocationRequest patchLocationRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'userId' when calling UserLocationsApi->PatchLocation"
                );
            }

            // verify the required parameter 'locationId' is set
            if (locationId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'locationId' when calling UserLocationsApi->PatchLocation"
                );
            }

            // verify the required parameter 'patchLocationRequest' is set
            if (patchLocationRequest == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'patchLocationRequest' when calling UserLocationsApi->PatchLocation"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { "application/json" };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "userId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(userId)
            ); // path parameter
            localVarRequestOptions.PathParameters.Add(
                "locationId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(locationId)
            ); // path parameter
            localVarRequestOptions.Data = patchLocationRequest;

            localVarRequestOptions.Operation = "UserLocationsApi.PatchLocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = await this
                .AsynchronousClient.PatchAsync<GetLocationResponse>(
                    "/users/{userId}/locations/{locationId}",
                    localVarRequestOptions,
                    this.Configuration,
                    cancellationToken
                )
                .ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PatchLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create User Location
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="postLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PostLocation(
            string userId,
            PostLocationRequest postLocationRequest,
            int operationIndex = 0
        )
        {
            PostLocationWithHttpInfo(userId, postLocationRequest);
        }

        /// <summary>
        /// Create User Location
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="postLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EnergyCoordinationClient.Client.ApiResponse<Object> PostLocationWithHttpInfo(
            string userId,
            PostLocationRequest postLocationRequest,
            int operationIndex = 0
        )
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'userId' when calling UserLocationsApi->PostLocation"
                );
            }

            // verify the required parameter 'postLocationRequest' is set
            if (postLocationRequest == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'postLocationRequest' when calling UserLocationsApi->PostLocation"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { "application/json" };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "userId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(userId)
            ); // path parameter
            localVarRequestOptions.Data = postLocationRequest;

            localVarRequestOptions.Operation = "UserLocationsApi.PostLocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>(
                "/users/{userId}/locations",
                localVarRequestOptions,
                this.Configuration
            );
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create User Location
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="postLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostLocationAsync(
            string userId,
            PostLocationRequest postLocationRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            await PostLocationWithHttpInfoAsync(
                    userId,
                    postLocationRequest,
                    operationIndex,
                    cancellationToken
                )
                .ConfigureAwait(false);
        }

        /// <summary>
        /// Create User Location
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="postLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EnergyCoordinationClient.Client.ApiResponse<Object>> PostLocationWithHttpInfoAsync(
            string userId,
            PostLocationRequest postLocationRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'userId' when calling UserLocationsApi->PostLocation"
                );
            }

            // verify the required parameter 'postLocationRequest' is set
            if (postLocationRequest == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'postLocationRequest' when calling UserLocationsApi->PostLocation"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { "application/json" };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "userId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(userId)
            ); // path parameter
            localVarRequestOptions.Data = postLocationRequest;

            localVarRequestOptions.Operation = "UserLocationsApi.PostLocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = await this
                .AsynchronousClient.PostAsync<Object>(
                    "/users/{userId}/locations",
                    localVarRequestOptions,
                    this.Configuration,
                    cancellationToken
                )
                .ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Multiple User Locations Create multiple locations for several users at once. \&quot;The request body should be an array of objects, each containing a user id and a create location request.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postLocationsBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void PostLocations(
            PostLocationsBatchRequest postLocationsBatchRequest,
            int operationIndex = 0
        )
        {
            PostLocationsWithHttpInfo(postLocationsBatchRequest);
        }

        /// <summary>
        /// Create Multiple User Locations Create multiple locations for several users at once. \&quot;The request body should be an array of objects, each containing a user id and a create location request.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postLocationsBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EnergyCoordinationClient.Client.ApiResponse<Object> PostLocationsWithHttpInfo(
            PostLocationsBatchRequest postLocationsBatchRequest,
            int operationIndex = 0
        )
        {
            // verify the required parameter 'postLocationsBatchRequest' is set
            if (postLocationsBatchRequest == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'postLocationsBatchRequest' when calling UserLocationsApi->PostLocations"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { "application/json" };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postLocationsBatchRequest;

            localVarRequestOptions.Operation = "UserLocationsApi.PostLocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>(
                "/users/locations/batch",
                localVarRequestOptions,
                this.Configuration
            );
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostLocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Create Multiple User Locations Create multiple locations for several users at once. \&quot;The request body should be an array of objects, each containing a user id and a create location request.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postLocationsBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task PostLocationsAsync(
            PostLocationsBatchRequest postLocationsBatchRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            await PostLocationsWithHttpInfoAsync(
                    postLocationsBatchRequest,
                    operationIndex,
                    cancellationToken
                )
                .ConfigureAwait(false);
        }

        /// <summary>
        /// Create Multiple User Locations Create multiple locations for several users at once. \&quot;The request body should be an array of objects, each containing a user id and a create location request.
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="postLocationsBatchRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EnergyCoordinationClient.Client.ApiResponse<Object>> PostLocationsWithHttpInfoAsync(
            PostLocationsBatchRequest postLocationsBatchRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            // verify the required parameter 'postLocationsBatchRequest' is set
            if (postLocationsBatchRequest == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'postLocationsBatchRequest' when calling UserLocationsApi->PostLocations"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { "application/json" };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = postLocationsBatchRequest;

            localVarRequestOptions.Operation = "UserLocationsApi.PostLocations";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = await this
                .AsynchronousClient.PostAsync<Object>(
                    "/users/locations/batch",
                    localVarRequestOptions,
                    this.Configuration,
                    cancellationToken
                )
                .ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("PostLocations", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update User Location
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="putLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>GetLocationResponse</returns>
        public GetLocationResponse UpdateLocation(
            string userId,
            string locationId,
            PutLocationRequest putLocationRequest,
            int operationIndex = 0
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<GetLocationResponse> localVarResponse =
                UpdateLocationWithHttpInfo(userId, locationId, putLocationRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update User Location
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="putLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of GetLocationResponse</returns>
        public EnergyCoordinationClient.Client.ApiResponse<GetLocationResponse> UpdateLocationWithHttpInfo(
            string userId,
            string locationId,
            PutLocationRequest putLocationRequest,
            int operationIndex = 0
        )
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'userId' when calling UserLocationsApi->UpdateLocation"
                );
            }

            // verify the required parameter 'locationId' is set
            if (locationId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'locationId' when calling UserLocationsApi->UpdateLocation"
                );
            }

            // verify the required parameter 'putLocationRequest' is set
            if (putLocationRequest == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'putLocationRequest' when calling UserLocationsApi->UpdateLocation"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { "application/json" };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            var localVarMultipartFormData = localVarContentType == "multipart/form-data";
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "userId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(userId)
            ); // path parameter
            localVarRequestOptions.PathParameters.Add(
                "locationId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(locationId)
            ); // path parameter
            localVarRequestOptions.Data = putLocationRequest;

            localVarRequestOptions.Operation = "UserLocationsApi.UpdateLocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<GetLocationResponse>(
                "/users/{userId}/locations/{locationId}",
                localVarRequestOptions,
                this.Configuration
            );
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Update User Location
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="putLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of GetLocationResponse</returns>
        public async System.Threading.Tasks.Task<GetLocationResponse> UpdateLocationAsync(
            string userId,
            string locationId,
            PutLocationRequest putLocationRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            EnergyCoordinationClient.Client.ApiResponse<GetLocationResponse> localVarResponse =
                await UpdateLocationWithHttpInfoAsync(
                        userId,
                        locationId,
                        putLocationRequest,
                        operationIndex,
                        cancellationToken
                    )
                    .ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Update User Location
        /// </summary>
        /// <exception cref="EnergyCoordinationClient.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userId"></param>
        /// <param name="locationId"></param>
        /// <param name="putLocationRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (GetLocationResponse)</returns>
        public async System.Threading.Tasks.Task<EnergyCoordinationClient.Client.ApiResponse<GetLocationResponse>> UpdateLocationWithHttpInfoAsync(
            string userId,
            string locationId,
            PutLocationRequest putLocationRequest,
            int operationIndex = 0,
            System.Threading.CancellationToken cancellationToken =
                default(global::System.Threading.CancellationToken)
        )
        {
            // verify the required parameter 'userId' is set
            if (userId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'userId' when calling UserLocationsApi->UpdateLocation"
                );
            }

            // verify the required parameter 'locationId' is set
            if (locationId == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'locationId' when calling UserLocationsApi->UpdateLocation"
                );
            }

            // verify the required parameter 'putLocationRequest' is set
            if (putLocationRequest == null)
            {
                throw new EnergyCoordinationClient.Client.ApiException(
                    400,
                    "Missing required parameter 'putLocationRequest' when calling UserLocationsApi->UpdateLocation"
                );
            }

            EnergyCoordinationClient.Client.RequestOptions localVarRequestOptions =
                new EnergyCoordinationClient.Client.RequestOptions();

            string[] _contentTypes = new string[] { "application/json" };

            // to determine the Accept header
            string[] _accepts = new string[] { "application/json" };

            var localVarContentType =
                EnergyCoordinationClient.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EnergyCoordinationClient.Client.ClientUtils.SelectHeaderAccept(
                _accepts
            );
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add(
                "userId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(userId)
            ); // path parameter
            localVarRequestOptions.PathParameters.Add(
                "locationId",
                EnergyCoordinationClient.Client.ClientUtils.ParameterToString(locationId)
            ); // path parameter
            localVarRequestOptions.Data = putLocationRequest;

            localVarRequestOptions.Operation = "UserLocationsApi.UpdateLocation";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (Bearer) required
            // bearer authentication required
            if (
                !string.IsNullOrEmpty(this.Configuration.AccessToken)
                && !localVarRequestOptions.HeaderParameters.ContainsKey("Authorization")
            )
            {
                localVarRequestOptions.HeaderParameters.Add(
                    "Authorization",
                    "Bearer " + this.Configuration.AccessToken
                );
            }

            // make the HTTP request
            var localVarResponse = await this
                .AsynchronousClient.PutAsync<GetLocationResponse>(
                    "/users/{userId}/locations/{locationId}",
                    localVarRequestOptions,
                    this.Configuration,
                    cancellationToken
                )
                .ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UpdateLocation", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }
    }
}
