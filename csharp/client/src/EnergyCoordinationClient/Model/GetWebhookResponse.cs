/*
 * Energy Coordination API - Partner Endpoints
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EnergyCoordinationClient.Client.OpenAPIDateConverter;

namespace EnergyCoordinationClient.Model
{
    /// <summary>
    /// GetWebhookResponse
    /// </summary>
    [DataContract(Name = "GetWebhookResponse")]
    public partial class GetWebhookResponse : IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name = "status", EmitDefaultValue = false)]
        public WebhookStatus? Status { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetWebhookResponse" /> class.
        /// </summary>
        /// <param name="webhookId">webhookId.</param>
        /// <param name="webhookUrl">webhookUrl.</param>
        /// <param name="name">name.</param>
        /// <param name="notificationTypes">notificationTypes.</param>
        /// <param name="enabled">enabled.</param>
        /// <param name="status">status.</param>
        /// <param name="modifiedDate">modifiedDate.</param>
        /// <param name="createdDate">createdDate.</param>
        /// <param name="lastAnalyzedTimestamp">lastAnalyzedTimestamp.</param>
        public GetWebhookResponse(
            string webhookId = default(string),
            string webhookUrl = default(string),
            string name = default(string),
            List<NotificationType> notificationTypes = default(List<NotificationType>),
            bool enabled = default(bool),
            WebhookStatus? status = default(WebhookStatus?),
            DateTimeOffset modifiedDate = default(DateTimeOffset),
            DateTimeOffset createdDate = default(DateTimeOffset),
            DateTimeOffset lastAnalyzedTimestamp = default(DateTimeOffset)
        )
        {
            this.WebhookId = webhookId;
            this.WebhookUrl = webhookUrl;
            this.Name = name;
            this.NotificationTypes = notificationTypes;
            this.Enabled = enabled;
            this.Status = status;
            this.ModifiedDate = modifiedDate;
            this.CreatedDate = createdDate;
            this.LastAnalyzedTimestamp = lastAnalyzedTimestamp;
        }

        /// <summary>
        /// Gets or Sets WebhookId
        /// </summary>
        [DataMember(Name = "webhookId", EmitDefaultValue = false)]
        public string WebhookId { get; set; }

        /// <summary>
        /// Gets or Sets WebhookUrl
        /// </summary>
        [DataMember(Name = "webhookUrl", EmitDefaultValue = false)]
        public string WebhookUrl { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets NotificationTypes
        /// </summary>
        [DataMember(Name = "notificationTypes", EmitDefaultValue = false)]
        public List<NotificationType> NotificationTypes { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets ModifiedDate
        /// </summary>
        [DataMember(Name = "modifiedDate", EmitDefaultValue = false)]
        public DateTimeOffset ModifiedDate { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name = "createdDate", EmitDefaultValue = false)]
        public DateTimeOffset CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets LastAnalyzedTimestamp
        /// </summary>
        [DataMember(Name = "lastAnalyzedTimestamp", EmitDefaultValue = false)]
        public DateTimeOffset LastAnalyzedTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetWebhookResponse {\n");
            sb.Append("  WebhookId: ").Append(WebhookId).Append("\n");
            sb.Append("  WebhookUrl: ").Append(WebhookUrl).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NotificationTypes: ").Append(NotificationTypes).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ModifiedDate: ").Append(ModifiedDate).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  LastAnalyzedTimestamp: ").Append(LastAnalyzedTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented
            );
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            yield break;
        }
    }
}
