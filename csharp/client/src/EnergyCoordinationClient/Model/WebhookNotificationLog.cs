/*
 * Energy Coordination API - Partner Endpoints
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EnergyCoordinationClient.Client.OpenAPIDateConverter;

namespace EnergyCoordinationClient.Model
{
    /// <summary>
    /// WebhookNotificationLog
    /// </summary>
    [DataContract(Name = "WebhookNotificationLog")]
    public partial class WebhookNotificationLog : IValidatableObject
    {
        /// <summary>
        /// Gets or Sets NotificationType
        /// </summary>
        [DataMember(Name = "notificationType", EmitDefaultValue = false)]
        public NotificationType? NotificationType { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="WebhookNotificationLog" /> class.
        /// </summary>
        /// <param name="webhookId">webhookId.</param>
        /// <param name="tenantId">tenantId.</param>
        /// <param name="partnerEventId">partnerEventId.</param>
        /// <param name="notificationId">notificationId.</param>
        /// <param name="notificationType">notificationType.</param>
        /// <param name="notificationSent">notificationSent.</param>
        /// <param name="sparkSignature">sparkSignature.</param>
        /// <param name="webhookUrl">webhookUrl.</param>
        /// <param name="requestTimeout">requestTimeout.</param>
        /// <param name="responseStatusCode">responseStatusCode.</param>
        /// <param name="requestDurationMs">requestDurationMs.</param>
        public WebhookNotificationLog(
            string webhookId = default(string),
            string tenantId = default(string),
            string partnerEventId = default(string),
            string notificationId = default(string),
            NotificationType? notificationType = default(NotificationType?),
            DateTimeOffset notificationSent = default(DateTimeOffset),
            string sparkSignature = default(string),
            string webhookUrl = default(string),
            bool requestTimeout = default(bool),
            int? responseStatusCode = default(int?),
            long? requestDurationMs = default(long?)
        )
        {
            this.WebhookId = webhookId;
            this.TenantId = tenantId;
            this.PartnerEventId = partnerEventId;
            this.NotificationId = notificationId;
            this.NotificationType = notificationType;
            this.NotificationSent = notificationSent;
            this.SparkSignature = sparkSignature;
            this.WebhookUrl = webhookUrl;
            this.RequestTimeout = requestTimeout;
            this.ResponseStatusCode = responseStatusCode;
            this.RequestDurationMs = requestDurationMs;
        }

        /// <summary>
        /// Gets or Sets WebhookId
        /// </summary>
        [DataMember(Name = "webhookId", EmitDefaultValue = false)]
        public string WebhookId { get; set; }

        /// <summary>
        /// Gets or Sets TenantId
        /// </summary>
        [DataMember(Name = "tenantId", EmitDefaultValue = false)]
        public string TenantId { get; set; }

        /// <summary>
        /// Gets or Sets PartnerEventId
        /// </summary>
        [DataMember(Name = "partnerEventId", EmitDefaultValue = false)]
        public string PartnerEventId { get; set; }

        /// <summary>
        /// Gets or Sets NotificationId
        /// </summary>
        [DataMember(Name = "notificationId", EmitDefaultValue = false)]
        public string NotificationId { get; set; }

        /// <summary>
        /// Gets or Sets NotificationSent
        /// </summary>
        [DataMember(Name = "notificationSent", EmitDefaultValue = false)]
        public DateTimeOffset NotificationSent { get; set; }

        /// <summary>
        /// Gets or Sets SparkSignature
        /// </summary>
        [DataMember(Name = "sparkSignature", EmitDefaultValue = true)]
        public string SparkSignature { get; set; }

        /// <summary>
        /// Gets or Sets WebhookUrl
        /// </summary>
        [DataMember(Name = "webhookUrl", EmitDefaultValue = false)]
        public string WebhookUrl { get; set; }

        /// <summary>
        /// Gets or Sets RequestTimeout
        /// </summary>
        [DataMember(Name = "requestTimeout", EmitDefaultValue = true)]
        public bool RequestTimeout { get; set; }

        /// <summary>
        /// Gets or Sets ResponseStatusCode
        /// </summary>
        [DataMember(Name = "responseStatusCode", EmitDefaultValue = true)]
        public int? ResponseStatusCode { get; set; }

        /// <summary>
        /// Gets or Sets RequestDurationMs
        /// </summary>
        [DataMember(Name = "requestDurationMs", EmitDefaultValue = true)]
        public long? RequestDurationMs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WebhookNotificationLog {\n");
            sb.Append("  WebhookId: ").Append(WebhookId).Append("\n");
            sb.Append("  TenantId: ").Append(TenantId).Append("\n");
            sb.Append("  PartnerEventId: ").Append(PartnerEventId).Append("\n");
            sb.Append("  NotificationId: ").Append(NotificationId).Append("\n");
            sb.Append("  NotificationType: ").Append(NotificationType).Append("\n");
            sb.Append("  NotificationSent: ").Append(NotificationSent).Append("\n");
            sb.Append("  SparkSignature: ").Append(SparkSignature).Append("\n");
            sb.Append("  WebhookUrl: ").Append(WebhookUrl).Append("\n");
            sb.Append("  RequestTimeout: ").Append(RequestTimeout).Append("\n");
            sb.Append("  ResponseStatusCode: ").Append(ResponseStatusCode).Append("\n");
            sb.Append("  RequestDurationMs: ").Append(RequestDurationMs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented
            );
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            yield break;
        }
    }
}
