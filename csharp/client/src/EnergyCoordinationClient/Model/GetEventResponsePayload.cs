/*
 * Energy Coordination API - Partner Endpoints
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using JsonSubTypes;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EnergyCoordinationClient.Client.OpenAPIDateConverter;

namespace EnergyCoordinationClient.Model
{
    /// <summary>
    /// GetEventResponsePayload
    /// </summary>
    [JsonConverter(typeof(GetEventResponsePayloadJsonConverter))]
    [DataContract(Name = "GetEventResponse_payload")]
    public partial class GetEventResponsePayload : AbstractOpenAPISchema, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetEventResponsePayload" /> class
        /// with the <see cref="PriceCurvePayload" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of PriceCurvePayload.</param>
        public GetEventResponsePayload(PriceCurvePayload actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType = "oneOf";
            this.ActualInstance =
                actualInstance
                ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetEventResponsePayload" /> class
        /// with the <see cref="UserEligibilityPayload" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of UserEligibilityPayload.</param>
        public GetEventResponsePayload(UserEligibilityPayload actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType = "oneOf";
            this.ActualInstance =
                actualInstance
                ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetEventResponsePayload" /> class
        /// with the <see cref="LocationLPCPayload" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LocationLPCPayload.</param>
        public GetEventResponsePayload(LocationLPCPayload actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType = "oneOf";
            this.ActualInstance =
                actualInstance
                ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetEventResponsePayload" /> class
        /// with the <see cref="ResourceLPCPayload" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ResourceLPCPayload.</param>
        public GetEventResponsePayload(ResourceLPCPayload actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType = "oneOf";
            this.ActualInstance =
                actualInstance
                ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetEventResponsePayload" /> class
        /// with the <see cref="LPCReservationPayload" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LPCReservationPayload.</param>
        public GetEventResponsePayload(LPCReservationPayload actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType = "oneOf";
            this.ActualInstance =
                actualInstance
                ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get { return _actualInstance; }
            set
            {
                if (
                    value.GetType() == typeof(LPCReservationPayload)
                    || value is LPCReservationPayload
                )
                {
                    this._actualInstance = value;
                }
                else if (
                    value.GetType() == typeof(LocationLPCPayload)
                    || value is LocationLPCPayload
                )
                {
                    this._actualInstance = value;
                }
                else if (value.GetType() == typeof(PriceCurvePayload) || value is PriceCurvePayload)
                {
                    this._actualInstance = value;
                }
                else if (
                    value.GetType() == typeof(ResourceLPCPayload)
                    || value is ResourceLPCPayload
                )
                {
                    this._actualInstance = value;
                }
                else if (
                    value.GetType() == typeof(UserEligibilityPayload)
                    || value is UserEligibilityPayload
                )
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException(
                        "Invalid instance found. Must be the following types: LPCReservationPayload, LocationLPCPayload, PriceCurvePayload, ResourceLPCPayload, UserEligibilityPayload"
                    );
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `PriceCurvePayload`. If the actual instance is not `PriceCurvePayload`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of PriceCurvePayload</returns>
        public PriceCurvePayload GetPriceCurvePayload()
        {
            return (PriceCurvePayload)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `UserEligibilityPayload`. If the actual instance is not `UserEligibilityPayload`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of UserEligibilityPayload</returns>
        public UserEligibilityPayload GetUserEligibilityPayload()
        {
            return (UserEligibilityPayload)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LocationLPCPayload`. If the actual instance is not `LocationLPCPayload`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LocationLPCPayload</returns>
        public LocationLPCPayload GetLocationLPCPayload()
        {
            return (LocationLPCPayload)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ResourceLPCPayload`. If the actual instance is not `ResourceLPCPayload`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ResourceLPCPayload</returns>
        public ResourceLPCPayload GetResourceLPCPayload()
        {
            return (ResourceLPCPayload)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LPCReservationPayload`. If the actual instance is not `LPCReservationPayload`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LPCReservationPayload</returns>
        public LPCReservationPayload GetLPCReservationPayload()
        {
            return (LPCReservationPayload)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetEventResponsePayload {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(
                this.ActualInstance,
                GetEventResponsePayload.SerializerSettings
            );
        }

        /// <summary>
        /// Converts the JSON string into an instance of GetEventResponsePayload
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of GetEventResponsePayload</returns>
        public static GetEventResponsePayload FromJson(string jsonString)
        {
            GetEventResponsePayload newGetEventResponsePayload = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newGetEventResponsePayload;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LPCReservationPayload).GetProperty("AdditionalProperties") == null)
                {
                    newGetEventResponsePayload = new GetEventResponsePayload(
                        JsonConvert.DeserializeObject<LPCReservationPayload>(
                            jsonString,
                            GetEventResponsePayload.SerializerSettings
                        )
                    );
                }
                else
                {
                    newGetEventResponsePayload = new GetEventResponsePayload(
                        JsonConvert.DeserializeObject<LPCReservationPayload>(
                            jsonString,
                            GetEventResponsePayload.AdditionalPropertiesSerializerSettings
                        )
                    );
                }
                matchedTypes.Add("LPCReservationPayload");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(
                    string.Format(
                        "Failed to deserialize `{0}` into LPCReservationPayload: {1}",
                        jsonString,
                        exception.ToString()
                    )
                );
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(LocationLPCPayload).GetProperty("AdditionalProperties") == null)
                {
                    newGetEventResponsePayload = new GetEventResponsePayload(
                        JsonConvert.DeserializeObject<LocationLPCPayload>(
                            jsonString,
                            GetEventResponsePayload.SerializerSettings
                        )
                    );
                }
                else
                {
                    newGetEventResponsePayload = new GetEventResponsePayload(
                        JsonConvert.DeserializeObject<LocationLPCPayload>(
                            jsonString,
                            GetEventResponsePayload.AdditionalPropertiesSerializerSettings
                        )
                    );
                }
                matchedTypes.Add("LocationLPCPayload");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(
                    string.Format(
                        "Failed to deserialize `{0}` into LocationLPCPayload: {1}",
                        jsonString,
                        exception.ToString()
                    )
                );
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(PriceCurvePayload).GetProperty("AdditionalProperties") == null)
                {
                    newGetEventResponsePayload = new GetEventResponsePayload(
                        JsonConvert.DeserializeObject<PriceCurvePayload>(
                            jsonString,
                            GetEventResponsePayload.SerializerSettings
                        )
                    );
                }
                else
                {
                    newGetEventResponsePayload = new GetEventResponsePayload(
                        JsonConvert.DeserializeObject<PriceCurvePayload>(
                            jsonString,
                            GetEventResponsePayload.AdditionalPropertiesSerializerSettings
                        )
                    );
                }
                matchedTypes.Add("PriceCurvePayload");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(
                    string.Format(
                        "Failed to deserialize `{0}` into PriceCurvePayload: {1}",
                        jsonString,
                        exception.ToString()
                    )
                );
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(ResourceLPCPayload).GetProperty("AdditionalProperties") == null)
                {
                    newGetEventResponsePayload = new GetEventResponsePayload(
                        JsonConvert.DeserializeObject<ResourceLPCPayload>(
                            jsonString,
                            GetEventResponsePayload.SerializerSettings
                        )
                    );
                }
                else
                {
                    newGetEventResponsePayload = new GetEventResponsePayload(
                        JsonConvert.DeserializeObject<ResourceLPCPayload>(
                            jsonString,
                            GetEventResponsePayload.AdditionalPropertiesSerializerSettings
                        )
                    );
                }
                matchedTypes.Add("ResourceLPCPayload");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(
                    string.Format(
                        "Failed to deserialize `{0}` into ResourceLPCPayload: {1}",
                        jsonString,
                        exception.ToString()
                    )
                );
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(UserEligibilityPayload).GetProperty("AdditionalProperties") == null)
                {
                    newGetEventResponsePayload = new GetEventResponsePayload(
                        JsonConvert.DeserializeObject<UserEligibilityPayload>(
                            jsonString,
                            GetEventResponsePayload.SerializerSettings
                        )
                    );
                }
                else
                {
                    newGetEventResponsePayload = new GetEventResponsePayload(
                        JsonConvert.DeserializeObject<UserEligibilityPayload>(
                            jsonString,
                            GetEventResponsePayload.AdditionalPropertiesSerializerSettings
                        )
                    );
                }
                matchedTypes.Add("UserEligibilityPayload");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(
                    string.Format(
                        "Failed to deserialize `{0}` into UserEligibilityPayload: {1}",
                        jsonString,
                        exception.ToString()
                    )
                );
            }

            if (match == 0)
            {
                throw new InvalidDataException(
                    "The JSON string `"
                        + jsonString
                        + "` cannot be deserialized into any schema defined."
                );
            }
            else if (match > 1)
            {
                throw new InvalidDataException(
                    "The JSON string `"
                        + jsonString
                        + "` incorrectly matches more than one schema (should be exactly one match): "
                        + String.Join(",", matchedTypes)
                );
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newGetEventResponsePayload;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for GetEventResponsePayload
    /// </summary>
    public class GetEventResponsePayloadJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue(
                (string)(typeof(GetEventResponsePayload).GetMethod("ToJson").Invoke(value, null))
            );
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(
            JsonReader reader,
            Type objectType,
            object existingValue,
            JsonSerializer serializer
        )
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    return GetEventResponsePayload.FromJson(
                        JObject.Load(reader).ToString(Formatting.None)
                    );
                case JsonToken.StartArray:
                    return GetEventResponsePayload.FromJson(
                        JArray.Load(reader).ToString(Formatting.None)
                    );
                default:
                    return null;
            }
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }
}
