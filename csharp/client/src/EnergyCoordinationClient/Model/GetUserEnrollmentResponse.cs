/*
 * Energy Coordination API - Partner Endpoints
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EnergyCoordinationClient.Client.OpenAPIDateConverter;

namespace EnergyCoordinationClient.Model
{
    /// <summary>
    /// GetUserEnrollmentResponse
    /// </summary>
    [DataContract(Name = "GetUserEnrollmentResponse")]
    public partial class GetUserEnrollmentResponse : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="GetUserEnrollmentResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected GetUserEnrollmentResponse() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetUserEnrollmentResponse" /> class.
        /// </summary>
        /// <param name="userId">userId (required).</param>
        /// <param name="enrollmentId">enrollmentId.</param>
        /// <param name="enrollmentDate">enrollmentDate.</param>
        public GetUserEnrollmentResponse(
            string userId = default(string),
            Guid? enrollmentId = default(Guid?),
            DateTimeOffset? enrollmentDate = default(DateTimeOffset?)
        )
        {
            // to ensure "userId" is required (not null)
            if (userId == null)
            {
                throw new ArgumentNullException(
                    "userId is a required property for GetUserEnrollmentResponse and cannot be null"
                );
            }
            this.UserId = userId;
            this.EnrollmentId = enrollmentId;
            this.EnrollmentDate = enrollmentDate;
        }

        /// <summary>
        /// Gets or Sets IsEnrolled
        /// </summary>
        [DataMember(Name = "isEnrolled", EmitDefaultValue = true)]
        public bool IsEnrolled { get; private set; }

        /// <summary>
        /// Returns false as IsEnrolled should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsEnrolled()
        {
            return false;
        }

        /// <summary>
        /// Gets or Sets UserId
        /// </summary>
        [DataMember(Name = "userId", IsRequired = true, EmitDefaultValue = true)]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets EnrollmentId
        /// </summary>
        [DataMember(Name = "enrollmentId", EmitDefaultValue = true)]
        public Guid? EnrollmentId { get; set; }

        /// <summary>
        /// Gets or Sets EnrollmentDate
        /// </summary>
        [DataMember(Name = "enrollmentDate", EmitDefaultValue = true)]
        public DateTimeOffset? EnrollmentDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class GetUserEnrollmentResponse {\n");
            sb.Append("  IsEnrolled: ").Append(IsEnrolled).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  EnrollmentId: ").Append(EnrollmentId).Append("\n");
            sb.Append("  EnrollmentDate: ").Append(EnrollmentDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented
            );
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            yield break;
        }
    }
}
