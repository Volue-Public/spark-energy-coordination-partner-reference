/*
 * Energy Coordination API - Partner Endpoints
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EnergyCoordinationClient.Client.OpenAPIDateConverter;

namespace EnergyCoordinationClient.Model
{
    /// <summary>
    /// EventNotification
    /// </summary>
    [DataContract(Name = "EventNotification")]
    public partial class EventNotification : IValidatableObject
    {
        /// <summary>
        /// Gets or Sets NotificationType
        /// </summary>
        [DataMember(Name = "notificationType", EmitDefaultValue = false)]
        public NotificationType? NotificationType { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="EventNotification" /> class.
        /// </summary>
        /// <param name="notificationId">notificationId.</param>
        /// <param name="eventId">eventId.</param>
        /// <param name="eventCreatedAtUtc">eventCreatedAtUtc.</param>
        /// <param name="notificationSentUtc">notificationSentUtc.</param>
        /// <param name="notificationType">notificationType.</param>
        /// <param name="payload">payload.</param>
        public EventNotification(
            string notificationId = default(string),
            string eventId = default(string),
            DateTimeOffset eventCreatedAtUtc = default(DateTimeOffset),
            DateTimeOffset notificationSentUtc = default(DateTimeOffset),
            NotificationType? notificationType = default(NotificationType?),
            SparkEventPayload payload = default(SparkEventPayload)
        )
        {
            this.NotificationId = notificationId;
            this.EventId = eventId;
            this.EventCreatedAtUtc = eventCreatedAtUtc;
            this.NotificationSentUtc = notificationSentUtc;
            this.NotificationType = notificationType;
            this.Payload = payload;
        }

        /// <summary>
        /// Gets or Sets NotificationId
        /// </summary>
        [DataMember(Name = "notificationId", EmitDefaultValue = false)]
        public string NotificationId { get; set; }

        /// <summary>
        /// Gets or Sets EventId
        /// </summary>
        [DataMember(Name = "eventId", EmitDefaultValue = false)]
        public string EventId { get; set; }

        /// <summary>
        /// Gets or Sets EventCreatedAtUtc
        /// </summary>
        [DataMember(Name = "eventCreatedAtUtc", EmitDefaultValue = false)]
        public DateTimeOffset EventCreatedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets NotificationSentUtc
        /// </summary>
        [DataMember(Name = "notificationSentUtc", EmitDefaultValue = false)]
        public DateTimeOffset NotificationSentUtc { get; set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [DataMember(Name = "payload", EmitDefaultValue = false)]
        public SparkEventPayload Payload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventNotification {\n");
            sb.Append("  NotificationId: ").Append(NotificationId).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  EventCreatedAtUtc: ").Append(EventCreatedAtUtc).Append("\n");
            sb.Append("  NotificationSentUtc: ").Append(NotificationSentUtc).Append("\n");
            sb.Append("  NotificationType: ").Append(NotificationType).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented
            );
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            yield break;
        }
    }
}
