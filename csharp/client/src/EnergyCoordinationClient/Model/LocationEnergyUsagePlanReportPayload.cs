/*
 * Energy Coordination API - Partner Endpoints
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using JsonSubTypes;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EnergyCoordinationClient.Client.OpenAPIDateConverter;

namespace EnergyCoordinationClient.Model
{
    /// <summary>
    /// LocationEnergyUsagePlanReportPayload
    /// </summary>
    [DataContract(Name = "LocationEnergyUsagePlanReportPayload")]
    public partial class LocationEnergyUsagePlanReportPayload
        : SparkReportPayload,
            IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="LocationEnergyUsagePlanReportPayload" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected LocationEnergyUsagePlanReportPayload() { }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationEnergyUsagePlanReportPayload" /> class.
        /// </summary>
        /// <param name="locationId">locationId (required).</param>
        /// <param name="meterPointId">meterPointId (required).</param>
        /// <param name="resolution">resolution (required).</param>
        /// <param name="baseline">baseline (required).</param>
        /// <param name="flexibility">flexibility (required).</param>
        /// <param name="payloadType">payloadType (default to SparkReportPayloadType.LocationEnergyUsagePlan).</param>
        public LocationEnergyUsagePlanReportPayload(
            string locationId = default(string),
            string meterPointId = default(string),
            string resolution = default(string),
            List<EnergyCurvePoint> baseline = default(List<EnergyCurvePoint>),
            List<EnergyCurvePoint> flexibility = default(List<EnergyCurvePoint>),
            SparkReportPayloadType? payloadType = SparkReportPayloadType.LocationEnergyUsagePlan
        )
            : base(payloadType)
        {
            // to ensure "locationId" is required (not null)
            if (locationId == null)
            {
                throw new ArgumentNullException(
                    "locationId is a required property for LocationEnergyUsagePlanReportPayload and cannot be null"
                );
            }
            this.LocationId = locationId;
            // to ensure "meterPointId" is required (not null)
            if (meterPointId == null)
            {
                throw new ArgumentNullException(
                    "meterPointId is a required property for LocationEnergyUsagePlanReportPayload and cannot be null"
                );
            }
            this.MeterPointId = meterPointId;
            // to ensure "resolution" is required (not null)
            if (resolution == null)
            {
                throw new ArgumentNullException(
                    "resolution is a required property for LocationEnergyUsagePlanReportPayload and cannot be null"
                );
            }
            this.Resolution = resolution;
            // to ensure "baseline" is required (not null)
            if (baseline == null)
            {
                throw new ArgumentNullException(
                    "baseline is a required property for LocationEnergyUsagePlanReportPayload and cannot be null"
                );
            }
            this.Baseline = baseline;
            // to ensure "flexibility" is required (not null)
            if (flexibility == null)
            {
                throw new ArgumentNullException(
                    "flexibility is a required property for LocationEnergyUsagePlanReportPayload and cannot be null"
                );
            }
            this.Flexibility = flexibility;
        }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name = "locationId", IsRequired = true, EmitDefaultValue = true)]
        public string LocationId { get; set; }

        /// <summary>
        /// Gets or Sets MeterPointId
        /// </summary>
        [DataMember(Name = "meterPointId", IsRequired = true, EmitDefaultValue = true)]
        public string MeterPointId { get; set; }

        /// <summary>
        /// Gets or Sets Resolution
        /// </summary>
        /*
        <example>02:00:00</example>
        */
        [DataMember(Name = "resolution", IsRequired = true, EmitDefaultValue = true)]
        public string Resolution { get; set; }

        /// <summary>
        /// Gets or Sets Baseline
        /// </summary>
        [DataMember(Name = "baseline", IsRequired = true, EmitDefaultValue = true)]
        public List<EnergyCurvePoint> Baseline { get; set; }

        /// <summary>
        /// Gets or Sets Flexibility
        /// </summary>
        [DataMember(Name = "flexibility", IsRequired = true, EmitDefaultValue = true)]
        public List<EnergyCurvePoint> Flexibility { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LocationEnergyUsagePlanReportPayload {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  MeterPointId: ").Append(MeterPointId).Append("\n");
            sb.Append("  Resolution: ").Append(Resolution).Append("\n");
            sb.Append("  Baseline: ").Append(Baseline).Append("\n");
            sb.Append("  Flexibility: ").Append(Flexibility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented
            );
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            return this.BaseValidate(validationContext);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        protected IEnumerable<ValidationResult> BaseValidate(ValidationContext validationContext)
        {
            foreach (var x in base.BaseValidate(validationContext))
            {
                yield return x;
            }
            yield break;
        }
    }
}
