/*
 * Energy Coordination API - Partner Endpoints
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using JsonSubTypes;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EnergyCoordinationClient.Client.OpenAPIDateConverter;

namespace EnergyCoordinationClient.Model
{
    /// <summary>
    /// PostReportRequestPayloadsInner
    /// </summary>
    [JsonConverter(typeof(PostReportRequestPayloadsInnerJsonConverter))]
    [DataContract(Name = "PostReportRequest_payloads_inner")]
    public partial class PostReportRequestPayloadsInner : AbstractOpenAPISchema, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PostReportRequestPayloadsInner" /> class
        /// with the <see cref="EnergyUsageReportPayload" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of EnergyUsageReportPayload.</param>
        public PostReportRequestPayloadsInner(EnergyUsageReportPayload actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType = "oneOf";
            this.ActualInstance =
                actualInstance
                ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PostReportRequestPayloadsInner" /> class
        /// with the <see cref="LocationEnergyUsageReportPayload" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LocationEnergyUsageReportPayload.</param>
        public PostReportRequestPayloadsInner(LocationEnergyUsageReportPayload actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType = "oneOf";
            this.ActualInstance =
                actualInstance
                ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PostReportRequestPayloadsInner" /> class
        /// with the <see cref="ResourceLPCAcknowledgmentReportPayload" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of ResourceLPCAcknowledgmentReportPayload.</param>
        public PostReportRequestPayloadsInner(ResourceLPCAcknowledgmentReportPayload actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType = "oneOf";
            this.ActualInstance =
                actualInstance
                ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PostReportRequestPayloadsInner" /> class
        /// with the <see cref="LocationLPCAcknowledgmentReportPayload" /> class
        /// </summary>
        /// <param name="actualInstance">An instance of LocationLPCAcknowledgmentReportPayload.</param>
        public PostReportRequestPayloadsInner(LocationLPCAcknowledgmentReportPayload actualInstance)
        {
            this.IsNullable = false;
            this.SchemaType = "oneOf";
            this.ActualInstance =
                actualInstance
                ?? throw new ArgumentException("Invalid instance found. Must not be null.");
        }

        private Object _actualInstance;

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public override Object ActualInstance
        {
            get { return _actualInstance; }
            set
            {
                if (
                    value.GetType() == typeof(EnergyUsageReportPayload)
                    || value is EnergyUsageReportPayload
                )
                {
                    this._actualInstance = value;
                }
                else if (
                    value.GetType() == typeof(LocationEnergyUsageReportPayload)
                    || value is LocationEnergyUsageReportPayload
                )
                {
                    this._actualInstance = value;
                }
                else if (
                    value.GetType() == typeof(LocationLPCAcknowledgmentReportPayload)
                    || value is LocationLPCAcknowledgmentReportPayload
                )
                {
                    this._actualInstance = value;
                }
                else if (
                    value.GetType() == typeof(ResourceLPCAcknowledgmentReportPayload)
                    || value is ResourceLPCAcknowledgmentReportPayload
                )
                {
                    this._actualInstance = value;
                }
                else
                {
                    throw new ArgumentException(
                        "Invalid instance found. Must be the following types: EnergyUsageReportPayload, LocationEnergyUsageReportPayload, LocationLPCAcknowledgmentReportPayload, ResourceLPCAcknowledgmentReportPayload"
                    );
                }
            }
        }

        /// <summary>
        /// Get the actual instance of `EnergyUsageReportPayload`. If the actual instance is not `EnergyUsageReportPayload`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of EnergyUsageReportPayload</returns>
        public EnergyUsageReportPayload GetEnergyUsageReportPayload()
        {
            return (EnergyUsageReportPayload)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LocationEnergyUsageReportPayload`. If the actual instance is not `LocationEnergyUsageReportPayload`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LocationEnergyUsageReportPayload</returns>
        public LocationEnergyUsageReportPayload GetLocationEnergyUsageReportPayload()
        {
            return (LocationEnergyUsageReportPayload)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `ResourceLPCAcknowledgmentReportPayload`. If the actual instance is not `ResourceLPCAcknowledgmentReportPayload`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of ResourceLPCAcknowledgmentReportPayload</returns>
        public ResourceLPCAcknowledgmentReportPayload GetResourceLPCAcknowledgmentReportPayload()
        {
            return (ResourceLPCAcknowledgmentReportPayload)this.ActualInstance;
        }

        /// <summary>
        /// Get the actual instance of `LocationLPCAcknowledgmentReportPayload`. If the actual instance is not `LocationLPCAcknowledgmentReportPayload`,
        /// the InvalidClassException will be thrown
        /// </summary>
        /// <returns>An instance of LocationLPCAcknowledgmentReportPayload</returns>
        public LocationLPCAcknowledgmentReportPayload GetLocationLPCAcknowledgmentReportPayload()
        {
            return (LocationLPCAcknowledgmentReportPayload)this.ActualInstance;
        }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostReportRequestPayloadsInner {\n");
            sb.Append("  ActualInstance: ").Append(this.ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
            return JsonConvert.SerializeObject(
                this.ActualInstance,
                PostReportRequestPayloadsInner.SerializerSettings
            );
        }

        /// <summary>
        /// Converts the JSON string into an instance of PostReportRequestPayloadsInner
        /// </summary>
        /// <param name="jsonString">JSON string</param>
        /// <returns>An instance of PostReportRequestPayloadsInner</returns>
        public static PostReportRequestPayloadsInner FromJson(string jsonString)
        {
            PostReportRequestPayloadsInner newPostReportRequestPayloadsInner = null;

            if (string.IsNullOrEmpty(jsonString))
            {
                return newPostReportRequestPayloadsInner;
            }
            int match = 0;
            List<string> matchedTypes = new List<string>();

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (typeof(EnergyUsageReportPayload).GetProperty("AdditionalProperties") == null)
                {
                    newPostReportRequestPayloadsInner = new PostReportRequestPayloadsInner(
                        JsonConvert.DeserializeObject<EnergyUsageReportPayload>(
                            jsonString,
                            PostReportRequestPayloadsInner.SerializerSettings
                        )
                    );
                }
                else
                {
                    newPostReportRequestPayloadsInner = new PostReportRequestPayloadsInner(
                        JsonConvert.DeserializeObject<EnergyUsageReportPayload>(
                            jsonString,
                            PostReportRequestPayloadsInner.AdditionalPropertiesSerializerSettings
                        )
                    );
                }
                matchedTypes.Add("EnergyUsageReportPayload");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(
                    string.Format(
                        "Failed to deserialize `{0}` into EnergyUsageReportPayload: {1}",
                        jsonString,
                        exception.ToString()
                    )
                );
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (
                    typeof(LocationEnergyUsageReportPayload).GetProperty("AdditionalProperties")
                    == null
                )
                {
                    newPostReportRequestPayloadsInner = new PostReportRequestPayloadsInner(
                        JsonConvert.DeserializeObject<LocationEnergyUsageReportPayload>(
                            jsonString,
                            PostReportRequestPayloadsInner.SerializerSettings
                        )
                    );
                }
                else
                {
                    newPostReportRequestPayloadsInner = new PostReportRequestPayloadsInner(
                        JsonConvert.DeserializeObject<LocationEnergyUsageReportPayload>(
                            jsonString,
                            PostReportRequestPayloadsInner.AdditionalPropertiesSerializerSettings
                        )
                    );
                }
                matchedTypes.Add("LocationEnergyUsageReportPayload");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(
                    string.Format(
                        "Failed to deserialize `{0}` into LocationEnergyUsageReportPayload: {1}",
                        jsonString,
                        exception.ToString()
                    )
                );
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (
                    typeof(LocationLPCAcknowledgmentReportPayload).GetProperty(
                        "AdditionalProperties"
                    ) == null
                )
                {
                    newPostReportRequestPayloadsInner = new PostReportRequestPayloadsInner(
                        JsonConvert.DeserializeObject<LocationLPCAcknowledgmentReportPayload>(
                            jsonString,
                            PostReportRequestPayloadsInner.SerializerSettings
                        )
                    );
                }
                else
                {
                    newPostReportRequestPayloadsInner = new PostReportRequestPayloadsInner(
                        JsonConvert.DeserializeObject<LocationLPCAcknowledgmentReportPayload>(
                            jsonString,
                            PostReportRequestPayloadsInner.AdditionalPropertiesSerializerSettings
                        )
                    );
                }
                matchedTypes.Add("LocationLPCAcknowledgmentReportPayload");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(
                    string.Format(
                        "Failed to deserialize `{0}` into LocationLPCAcknowledgmentReportPayload: {1}",
                        jsonString,
                        exception.ToString()
                    )
                );
            }

            try
            {
                // if it does not contains "AdditionalProperties", use SerializerSettings to deserialize
                if (
                    typeof(ResourceLPCAcknowledgmentReportPayload).GetProperty(
                        "AdditionalProperties"
                    ) == null
                )
                {
                    newPostReportRequestPayloadsInner = new PostReportRequestPayloadsInner(
                        JsonConvert.DeserializeObject<ResourceLPCAcknowledgmentReportPayload>(
                            jsonString,
                            PostReportRequestPayloadsInner.SerializerSettings
                        )
                    );
                }
                else
                {
                    newPostReportRequestPayloadsInner = new PostReportRequestPayloadsInner(
                        JsonConvert.DeserializeObject<ResourceLPCAcknowledgmentReportPayload>(
                            jsonString,
                            PostReportRequestPayloadsInner.AdditionalPropertiesSerializerSettings
                        )
                    );
                }
                matchedTypes.Add("ResourceLPCAcknowledgmentReportPayload");
                match++;
            }
            catch (Exception exception)
            {
                // deserialization failed, try the next one
                System.Diagnostics.Debug.WriteLine(
                    string.Format(
                        "Failed to deserialize `{0}` into ResourceLPCAcknowledgmentReportPayload: {1}",
                        jsonString,
                        exception.ToString()
                    )
                );
            }

            if (match == 0)
            {
                throw new InvalidDataException(
                    "The JSON string `"
                        + jsonString
                        + "` cannot be deserialized into any schema defined."
                );
            }
            else if (match > 1)
            {
                throw new InvalidDataException(
                    "The JSON string `"
                        + jsonString
                        + "` incorrectly matches more than one schema (should be exactly one match): "
                        + String.Join(",", matchedTypes)
                );
            }

            // deserialization is considered successful at this point if no exception has been thrown.
            return newPostReportRequestPayloadsInner;
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            yield break;
        }
    }

    /// <summary>
    /// Custom JSON converter for PostReportRequestPayloadsInner
    /// </summary>
    public class PostReportRequestPayloadsInnerJsonConverter : JsonConverter
    {
        /// <summary>
        /// To write the JSON string
        /// </summary>
        /// <param name="writer">JSON writer</param>
        /// <param name="value">Object to be converted into a JSON string</param>
        /// <param name="serializer">JSON Serializer</param>
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            writer.WriteRawValue(
                (string)(
                    typeof(PostReportRequestPayloadsInner).GetMethod("ToJson").Invoke(value, null)
                )
            );
        }

        /// <summary>
        /// To convert a JSON string into an object
        /// </summary>
        /// <param name="reader">JSON reader</param>
        /// <param name="objectType">Object type</param>
        /// <param name="existingValue">Existing value</param>
        /// <param name="serializer">JSON Serializer</param>
        /// <returns>The object converted from the JSON string</returns>
        public override object ReadJson(
            JsonReader reader,
            Type objectType,
            object existingValue,
            JsonSerializer serializer
        )
        {
            switch (reader.TokenType)
            {
                case JsonToken.StartObject:
                    return PostReportRequestPayloadsInner.FromJson(
                        JObject.Load(reader).ToString(Formatting.None)
                    );
                case JsonToken.StartArray:
                    return PostReportRequestPayloadsInner.FromJson(
                        JArray.Load(reader).ToString(Formatting.None)
                    );
                default:
                    return null;
            }
        }

        /// <summary>
        /// Check if the object can be converted
        /// </summary>
        /// <param name="objectType">Object type</param>
        /// <returns>True if the object can be converted</returns>
        public override bool CanConvert(Type objectType)
        {
            return false;
        }
    }
}
