/*
 * Energy Coordination API - Partner Endpoints
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using OpenAPIDateConverter = EnergyCoordinationClient.Client.OpenAPIDateConverter;

namespace EnergyCoordinationClient.Model
{
    /// <summary>
    /// LocationCompensation
    /// </summary>
    [DataContract(Name = "LocationCompensation")]
    public partial class LocationCompensation : IValidatableObject
    {
        /// <summary>
        /// Gets or Sets Currency
        /// </summary>
        [DataMember(Name = "currency", EmitDefaultValue = false)]
        public Currency? Currency { get; set; }

        /// <summary>
        /// Initializes a new instance of the <see cref="LocationCompensation" /> class.
        /// </summary>
        /// <param name="locationId">locationId.</param>
        /// <param name="meterPointIds">meterPointIds.</param>
        /// <param name="activeAmount">activeAmount.</param>
        /// <param name="blockedAmount">blockedAmount.</param>
        /// <param name="currency">currency.</param>
        /// <param name="problems">problems.</param>
        public LocationCompensation(
            string locationId = default(string),
            List<string> meterPointIds = default(List<string>),
            double activeAmount = default(double),
            double blockedAmount = default(double),
            Currency? currency = default(Currency?),
            List<Problem> problems = default(List<Problem>)
        )
        {
            this.LocationId = locationId;
            this.MeterPointIds = meterPointIds;
            this.ActiveAmount = activeAmount;
            this.BlockedAmount = blockedAmount;
            this.Currency = currency;
            this.Problems = problems;
        }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [DataMember(Name = "locationId", EmitDefaultValue = false)]
        public string LocationId { get; set; }

        /// <summary>
        /// Gets or Sets MeterPointIds
        /// </summary>
        [DataMember(Name = "meterPointIds", EmitDefaultValue = false)]
        public List<string> MeterPointIds { get; set; }

        /// <summary>
        /// Gets or Sets ActiveAmount
        /// </summary>
        [DataMember(Name = "activeAmount", EmitDefaultValue = false)]
        public double ActiveAmount { get; set; }

        /// <summary>
        /// Gets or Sets BlockedAmount
        /// </summary>
        [DataMember(Name = "blockedAmount", EmitDefaultValue = false)]
        public double BlockedAmount { get; set; }

        /// <summary>
        /// Gets or Sets Problems
        /// </summary>
        [DataMember(Name = "problems", EmitDefaultValue = false)]
        public List<Problem> Problems { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class LocationCompensation {\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  MeterPointIds: ").Append(MeterPointIds).Append("\n");
            sb.Append("  ActiveAmount: ").Append(ActiveAmount).Append("\n");
            sb.Append("  BlockedAmount: ").Append(BlockedAmount).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  Problems: ").Append(Problems).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(
                this,
                Newtonsoft.Json.Formatting.Indented
            );
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(
            ValidationContext validationContext
        )
        {
            yield break;
        }
    }
}
