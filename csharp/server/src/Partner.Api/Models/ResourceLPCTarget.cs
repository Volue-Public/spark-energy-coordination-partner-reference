/*
 * Partner webhook API
 *
 * A minimal OpenAPI spec with one POST endpoint to receive notifications from Spark energy-coordination.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using Partner.Api.Converters;

namespace Partner.Api.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class ResourceLPCTarget : IEquatable<ResourceLPCTarget>
    {
        /// <summary>
        /// Gets or Sets MeterPointId
        /// </summary>
        [Required]
        [DataMember(Name = "meterPointId", EmitDefaultValue = false)]
        public string MeterPointId { get; set; }

        /// <summary>
        /// Gets or Sets LocationId
        /// </summary>
        [Required]
        [DataMember(Name = "locationId", EmitDefaultValue = false)]
        public string LocationId { get; set; }

        /// <summary>
        /// Gets or Sets ResourceId
        /// </summary>
        [Required]
        [DataMember(Name = "resourceId", EmitDefaultValue = false)]
        public string ResourceId { get; set; }

        /// <summary>
        /// Gets or Sets Resolution
        /// </summary>
        /// <example>02:00:00</example>
        [Required]
        [DataMember(Name = "resolution", EmitDefaultValue = false)]
        public string Resolution { get; set; }

        /// <summary>
        /// Gets or Sets Points
        /// </summary>
        [Required]
        [DataMember(Name = "points", EmitDefaultValue = false)]
        public List<LPCDataPoint> Points { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ResourceLPCTarget {\n");
            sb.Append("  MeterPointId: ").Append(MeterPointId).Append("\n");
            sb.Append("  LocationId: ").Append(LocationId).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  Resolution: ").Append(Resolution).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((ResourceLPCTarget)obj);
        }

        /// <summary>
        /// Returns true if ResourceLPCTarget instances are equal
        /// </summary>
        /// <param name="other">Instance of ResourceLPCTarget to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResourceLPCTarget other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (
                    MeterPointId == other.MeterPointId
                    || MeterPointId != null && MeterPointId.Equals(other.MeterPointId)
                )
                && (
                    LocationId == other.LocationId
                    || LocationId != null && LocationId.Equals(other.LocationId)
                )
                && (
                    ResourceId == other.ResourceId
                    || ResourceId != null && ResourceId.Equals(other.ResourceId)
                )
                && (
                    Resolution == other.Resolution
                    || Resolution != null && Resolution.Equals(other.Resolution)
                )
                && (
                    Points == other.Points
                    || Points != null && other.Points != null && Points.SequenceEqual(other.Points)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (MeterPointId != null)
                    hashCode = hashCode * 59 + MeterPointId.GetHashCode();
                if (LocationId != null)
                    hashCode = hashCode * 59 + LocationId.GetHashCode();
                if (ResourceId != null)
                    hashCode = hashCode * 59 + ResourceId.GetHashCode();
                if (Resolution != null)
                    hashCode = hashCode * 59 + Resolution.GetHashCode();
                if (Points != null)
                    hashCode = hashCode * 59 + Points.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(ResourceLPCTarget left, ResourceLPCTarget right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ResourceLPCTarget left, ResourceLPCTarget right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
