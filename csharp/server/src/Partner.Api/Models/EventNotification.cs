/*
 * Partner webhook API
 *
 * A minimal OpenAPI spec with one POST endpoint to receive notifications from Spark energy-coordination.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using System.Text.Json;
using Partner.Api.Converters;

namespace Partner.Api.Models
{
    /// <summary>
    ///
    /// </summary>
    [DataContract]
    public partial class EventNotification : IEquatable<EventNotification>
    {
        /// <summary>
        /// Gets or Sets NotificationId
        /// </summary>
        [DataMember(Name = "notificationId", EmitDefaultValue = false)]
        public string NotificationId { get; set; }

        /// <summary>
        /// Gets or Sets EventId
        /// </summary>
        [DataMember(Name = "eventId", EmitDefaultValue = false)]
        public string EventId { get; set; }

        /// <summary>
        /// Gets or Sets EventCreatedAtUtc
        /// </summary>
        [DataMember(Name = "eventCreatedAtUtc", EmitDefaultValue = true)]
        public DateTimeOffset EventCreatedAtUtc { get; set; }

        /// <summary>
        /// Gets or Sets NotificationSentUtc
        /// </summary>
        [DataMember(Name = "notificationSentUtc", EmitDefaultValue = true)]
        public DateTimeOffset NotificationSentUtc { get; set; }

        /// <summary>
        /// Gets or Sets NotificationType
        /// </summary>
        [DataMember(Name = "notificationType", EmitDefaultValue = true)]
        public NotificationType NotificationType { get; set; }

        /// <summary>
        /// Gets or Sets Payload
        /// </summary>
        [DataMember(Name = "payload", EmitDefaultValue = false)]
        public SparkEventPayload Payload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventNotification {\n");
            sb.Append("  NotificationId: ").Append(NotificationId).Append("\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  EventCreatedAtUtc: ").Append(EventCreatedAtUtc).Append("\n");
            sb.Append("  NotificationSentUtc: ").Append(NotificationSentUtc).Append("\n");
            sb.Append("  NotificationType: ").Append(NotificationType).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions { WriteIndented = true };

            return JsonSerializer.Serialize(this, options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null)
                return false;
            if (ReferenceEquals(this, obj))
                return true;
            return obj.GetType() == GetType() && Equals((EventNotification)obj);
        }

        /// <summary>
        /// Returns true if EventNotification instances are equal
        /// </summary>
        /// <param name="other">Instance of EventNotification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventNotification other)
        {
            if (other is null)
                return false;
            if (ReferenceEquals(this, other))
                return true;

            return (
                    NotificationId == other.NotificationId
                    || NotificationId != null && NotificationId.Equals(other.NotificationId)
                )
                && (EventId == other.EventId || EventId != null && EventId.Equals(other.EventId))
                && (
                    EventCreatedAtUtc == other.EventCreatedAtUtc
                    || EventCreatedAtUtc.Equals(other.EventCreatedAtUtc)
                )
                && (
                    NotificationSentUtc == other.NotificationSentUtc
                    || NotificationSentUtc.Equals(other.NotificationSentUtc)
                )
                && (
                    NotificationType == other.NotificationType
                    || NotificationType.Equals(other.NotificationType)
                )
                && (Payload == other.Payload || Payload != null && Payload.Equals(other.Payload));
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (NotificationId != null)
                    hashCode = hashCode * 59 + NotificationId.GetHashCode();
                if (EventId != null)
                    hashCode = hashCode * 59 + EventId.GetHashCode();

                hashCode = hashCode * 59 + EventCreatedAtUtc.GetHashCode();

                hashCode = hashCode * 59 + NotificationSentUtc.GetHashCode();

                hashCode = hashCode * 59 + NotificationType.GetHashCode();
                if (Payload != null)
                    hashCode = hashCode * 59 + Payload.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
#pragma warning disable 1591

        public static bool operator ==(EventNotification left, EventNotification right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EventNotification left, EventNotification right)
        {
            return !Equals(left, right);
        }

#pragma warning restore 1591
        #endregion Operators
    }
}
