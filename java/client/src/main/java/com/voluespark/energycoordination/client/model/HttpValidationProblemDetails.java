/*
 * Energy Coordination API - Partner Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.voluespark.energycoordination.client.model;

import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

/** HttpValidationProblemDetails */
@JsonPropertyOrder({
  HttpValidationProblemDetails.JSON_PROPERTY_TYPE,
  HttpValidationProblemDetails.JSON_PROPERTY_TITLE,
  HttpValidationProblemDetails.JSON_PROPERTY_STATUS,
  HttpValidationProblemDetails.JSON_PROPERTY_DETAIL,
  HttpValidationProblemDetails.JSON_PROPERTY_INSTANCE,
  HttpValidationProblemDetails.JSON_PROPERTY_ERRORS
})
@jakarta.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.12.0")
public class HttpValidationProblemDetails {
  public static final String JSON_PROPERTY_TYPE = "type";
  @jakarta.annotation.Nullable private JsonNullable<String> type = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_TITLE = "title";

  @jakarta.annotation.Nullable
  private JsonNullable<String> title = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_STATUS = "status";

  @jakarta.annotation.Nullable
  private JsonNullable<Integer> status = JsonNullable.<Integer>undefined();

  public static final String JSON_PROPERTY_DETAIL = "detail";

  @jakarta.annotation.Nullable
  private JsonNullable<String> detail = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_INSTANCE = "instance";

  @jakarta.annotation.Nullable
  private JsonNullable<String> instance = JsonNullable.<String>undefined();

  public static final String JSON_PROPERTY_ERRORS = "errors";
  @jakarta.annotation.Nullable private Map<String, List<String>> errors = new HashMap<>();

  public HttpValidationProblemDetails() {}

  public HttpValidationProblemDetails type(@jakarta.annotation.Nullable String type) {
    this.type = JsonNullable.<String>of(type);

    return this;
  }

  /**
   * Get type
   *
   * @return type
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getType() {
    return type.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public JsonNullable<String> getType_JsonNullable() {
    return type;
  }

  @JsonProperty(JSON_PROPERTY_TYPE)
  public void setType_JsonNullable(JsonNullable<String> type) {
    this.type = type;
  }

  public void setType(@jakarta.annotation.Nullable String type) {
    this.type = JsonNullable.<String>of(type);
  }

  public HttpValidationProblemDetails title(@jakarta.annotation.Nullable String title) {
    this.title = JsonNullable.<String>of(title);

    return this;
  }

  /**
   * Get title
   *
   * @return title
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getTitle() {
    return title.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_TITLE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public JsonNullable<String> getTitle_JsonNullable() {
    return title;
  }

  @JsonProperty(JSON_PROPERTY_TITLE)
  public void setTitle_JsonNullable(JsonNullable<String> title) {
    this.title = title;
  }

  public void setTitle(@jakarta.annotation.Nullable String title) {
    this.title = JsonNullable.<String>of(title);
  }

  public HttpValidationProblemDetails status(@jakarta.annotation.Nullable Integer status) {
    this.status = JsonNullable.<Integer>of(status);

    return this;
  }

  /**
   * Get status
   *
   * @return status
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public Integer getStatus() {
    return status.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_STATUS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public JsonNullable<Integer> getStatus_JsonNullable() {
    return status;
  }

  @JsonProperty(JSON_PROPERTY_STATUS)
  public void setStatus_JsonNullable(JsonNullable<Integer> status) {
    this.status = status;
  }

  public void setStatus(@jakarta.annotation.Nullable Integer status) {
    this.status = JsonNullable.<Integer>of(status);
  }

  public HttpValidationProblemDetails detail(@jakarta.annotation.Nullable String detail) {
    this.detail = JsonNullable.<String>of(detail);

    return this;
  }

  /**
   * Get detail
   *
   * @return detail
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getDetail() {
    return detail.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_DETAIL)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public JsonNullable<String> getDetail_JsonNullable() {
    return detail;
  }

  @JsonProperty(JSON_PROPERTY_DETAIL)
  public void setDetail_JsonNullable(JsonNullable<String> detail) {
    this.detail = detail;
  }

  public void setDetail(@jakarta.annotation.Nullable String detail) {
    this.detail = JsonNullable.<String>of(detail);
  }

  public HttpValidationProblemDetails instance(@jakarta.annotation.Nullable String instance) {
    this.instance = JsonNullable.<String>of(instance);

    return this;
  }

  /**
   * Get instance
   *
   * @return instance
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public String getInstance() {
    return instance.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_INSTANCE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public JsonNullable<String> getInstance_JsonNullable() {
    return instance;
  }

  @JsonProperty(JSON_PROPERTY_INSTANCE)
  public void setInstance_JsonNullable(JsonNullable<String> instance) {
    this.instance = instance;
  }

  public void setInstance(@jakarta.annotation.Nullable String instance) {
    this.instance = JsonNullable.<String>of(instance);
  }

  public HttpValidationProblemDetails errors(
      @jakarta.annotation.Nullable Map<String, List<String>> errors) {

    this.errors = errors;
    return this;
  }

  public HttpValidationProblemDetails putErrorsItem(String key, List<String> errorsItem) {
    if (this.errors == null) {
      this.errors = new HashMap<>();
    }
    this.errors.put(key, errorsItem);
    return this;
  }

  /**
   * Get errors
   *
   * @return errors
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_ERRORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Map<String, List<String>> getErrors() {
    return errors;
  }

  @JsonProperty(JSON_PROPERTY_ERRORS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setErrors(@jakarta.annotation.Nullable Map<String, List<String>> errors) {
    this.errors = errors;
  }

  /**
   * A container for additional, undeclared properties. This is a holder for any undeclared
   * properties as specified with the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value. If the property
   * does not already exist, create it otherwise replace it.
   *
   * @param key the name of the property
   * @param value the value of the property
   * @return self reference
   */
  @JsonAnySetter
  public HttpValidationProblemDetails putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
      this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) properties.
   *
   * @return the additional (undeclared) properties
   */
  @JsonAnyGetter
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key the name of the property
   * @return the additional (undeclared) property with the specified name
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
      return null;
    }
    return this.additionalProperties.get(key);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    HttpValidationProblemDetails httpValidationProblemDetails = (HttpValidationProblemDetails) o;
    return equalsNullable(this.type, httpValidationProblemDetails.type)
        && equalsNullable(this.title, httpValidationProblemDetails.title)
        && equalsNullable(this.status, httpValidationProblemDetails.status)
        && equalsNullable(this.detail, httpValidationProblemDetails.detail)
        && equalsNullable(this.instance, httpValidationProblemDetails.instance)
        && Objects.equals(this.errors, httpValidationProblemDetails.errors)
        && Objects.equals(
            this.additionalProperties, httpValidationProblemDetails.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b
        || (a != null
            && b != null
            && a.isPresent()
            && b.isPresent()
            && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(
        hashCodeNullable(type),
        hashCodeNullable(title),
        hashCodeNullable(status),
        hashCodeNullable(detail),
        hashCodeNullable(instance),
        errors,
        additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class HttpValidationProblemDetails {\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    detail: ").append(toIndentedString(detail)).append("\n");
    sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
    sb.append("    errors: ").append(toIndentedString(errors)).append("\n");
    sb.append("    additionalProperties: ")
        .append(toIndentedString(additionalProperties))
        .append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
