/*
 * Energy Coordination API - Partner Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.voluespark.energycoordination.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.time.OffsetDateTime;
import java.util.Objects;

/** LPCDataPoint */
@JsonPropertyOrder({
  LPCDataPoint.JSON_PROPERTY_MAX_POWER_IN_KILO_WATTS,
  LPCDataPoint.JSON_PROPERTY_TIMESTAMP
})
@jakarta.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.12.0")
public class LPCDataPoint {
  public static final String JSON_PROPERTY_MAX_POWER_IN_KILO_WATTS = "maxPowerInKiloWatts";
  @jakarta.annotation.Nullable private Double maxPowerInKiloWatts;

  public static final String JSON_PROPERTY_TIMESTAMP = "timestamp";
  @jakarta.annotation.Nullable private OffsetDateTime timestamp;

  public LPCDataPoint() {}

  public LPCDataPoint maxPowerInKiloWatts(@jakarta.annotation.Nullable Double maxPowerInKiloWatts) {

    this.maxPowerInKiloWatts = maxPowerInKiloWatts;
    return this;
  }

  /**
   * Get maxPowerInKiloWatts
   *
   * @return maxPowerInKiloWatts
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_MAX_POWER_IN_KILO_WATTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Double getMaxPowerInKiloWatts() {
    return maxPowerInKiloWatts;
  }

  @JsonProperty(JSON_PROPERTY_MAX_POWER_IN_KILO_WATTS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setMaxPowerInKiloWatts(@jakarta.annotation.Nullable Double maxPowerInKiloWatts) {
    this.maxPowerInKiloWatts = maxPowerInKiloWatts;
  }

  public LPCDataPoint timestamp(@jakarta.annotation.Nullable OffsetDateTime timestamp) {

    this.timestamp = timestamp;
    return this;
  }

  /**
   * Get timestamp
   *
   * @return timestamp
   */
  @jakarta.annotation.Nullable
  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public OffsetDateTime getTimestamp() {
    return timestamp;
  }

  @JsonProperty(JSON_PROPERTY_TIMESTAMP)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setTimestamp(@jakarta.annotation.Nullable OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LPCDataPoint lpCDataPoint = (LPCDataPoint) o;
    return Objects.equals(this.maxPowerInKiloWatts, lpCDataPoint.maxPowerInKiloWatts)
        && Objects.equals(this.timestamp, lpCDataPoint.timestamp);
  }

  @Override
  public int hashCode() {
    return Objects.hash(maxPowerInKiloWatts, timestamp);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LPCDataPoint {\n");
    sb.append("    maxPowerInKiloWatts: ")
        .append(toIndentedString(maxPowerInKiloWatts))
        .append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
