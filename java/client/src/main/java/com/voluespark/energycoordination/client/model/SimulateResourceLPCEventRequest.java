/*
 * Energy Coordination API - Partner Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.voluespark.energycoordination.client.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;

/** SimulateResourceLPCEventRequest */
@JsonPropertyOrder({SimulateResourceLPCEventRequest.JSON_PROPERTY_RESOURCES})
@jakarta.annotation.Generated(
    value = "org.openapitools.codegen.languages.JavaClientCodegen",
    comments = "Generator version: 7.9.0-SNAPSHOT")
public class SimulateResourceLPCEventRequest {
  public static final String JSON_PROPERTY_RESOURCES = "resources";
  private JsonNullable<List<LPCResourceTarget>> resources =
      JsonNullable.<List<LPCResourceTarget>>undefined();

  public SimulateResourceLPCEventRequest() {}

  public SimulateResourceLPCEventRequest resources(List<LPCResourceTarget> resources) {
    this.resources = JsonNullable.<List<LPCResourceTarget>>of(resources);

    return this;
  }

  public SimulateResourceLPCEventRequest addResourcesItem(LPCResourceTarget resourcesItem) {
    if (this.resources == null || !this.resources.isPresent()) {
      this.resources = JsonNullable.<List<LPCResourceTarget>>of(new ArrayList<>());
    }
    try {
      this.resources.get().add(resourcesItem);
    } catch (java.util.NoSuchElementException e) {
      // this can never happen, as we make sure above that the value is present
    }
    return this;
  }

  /**
   * Get resources
   *
   * @return resources
   */
  @jakarta.annotation.Nullable
  @JsonIgnore
  public List<LPCResourceTarget> getResources() {
    return resources.orElse(null);
  }

  @JsonProperty(JSON_PROPERTY_RESOURCES)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public JsonNullable<List<LPCResourceTarget>> getResources_JsonNullable() {
    return resources;
  }

  @JsonProperty(JSON_PROPERTY_RESOURCES)
  public void setResources_JsonNullable(JsonNullable<List<LPCResourceTarget>> resources) {
    this.resources = resources;
  }

  public void setResources(List<LPCResourceTarget> resources) {
    this.resources = JsonNullable.<List<LPCResourceTarget>>of(resources);
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SimulateResourceLPCEventRequest simulateResourceLPCEventRequest =
        (SimulateResourceLPCEventRequest) o;
    return equalsNullable(this.resources, simulateResourceLPCEventRequest.resources);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b
        || (a != null
            && b != null
            && a.isPresent()
            && b.isPresent()
            && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(hashCodeNullable(resources));
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[] {a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SimulateResourceLPCEventRequest {\n");
    sb.append("    resources: ").append(toIndentedString(resources)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
