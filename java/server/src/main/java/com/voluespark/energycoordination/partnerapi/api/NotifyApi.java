/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech)
 * (7.9.0-SNAPSHOT). https://openapi-generator.tech Do not edit the class manually.
 */
package com.voluespark.energycoordination.partnerapi.api;

import com.voluespark.energycoordination.partnerapi.model.EventNotification;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.Optional;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

@Generated(
    value = "org.openapitools.codegen.languages.SpringCodegen",
    comments = "Generator version: 7.9.0-SNAPSHOT")
@Validated
@Tag(name = "Notification", description = "the Notification API")
public interface NotifyApi {

  default Optional<NativeWebRequest> getRequest() {
    return Optional.empty();
  }

  /**
   * POST /notify : Receive an event notification This endpoint accepts an event notification with a
   * signed payload.
   *
   * @param xPayloadSignature (required)
   * @param eventNotification (required)
   * @return Event notification received successfully (status code 200) or Invalid request (status
   *     code 400) or Internal server error (status code 500)
   */
  @Operation(
      operationId = "notifyPost",
      summary = "Receive an event notification",
      description = "This endpoint accepts an event notification with a signed payload.",
      tags = {"Notification"},
      responses = {
        @ApiResponse(
            responseCode = "200",
            description = "Event notification received successfully"),
        @ApiResponse(responseCode = "400", description = "Invalid request"),
        @ApiResponse(responseCode = "500", description = "Internal server error")
      })
  @RequestMapping(
      method = RequestMethod.POST,
      value = "/notify",
      consumes = {"application/json"})
  default ResponseEntity<Void> notifyPost(
      @NotNull
          @Parameter(
              name = "x-payload-signature",
              description = "",
              required = true,
              in = ParameterIn.HEADER)
          @RequestHeader(value = "x-payload-signature", required = true)
          String xPayloadSignature,
      @Parameter(name = "EventNotification", description = "", required = true) @Valid @RequestBody
          EventNotification eventNotification) {
    return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
  }
}
