{
  "openapi": "3.0.1",
  "info": {
    "title": "Energy Coordination API - Partner Endpoints",
    "version": "v1"
  },
  "servers": [
    {
      "url": "/energy-coordination/v1"
    }
  ],
  "paths": {
    "/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get All Events",
        "description": "Get all events, ordered by the most recent events first. Maximum pageSize is 1000.",
        "operationId": "GetAllEvents",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventsResponse"
                },
                "example": {"events":[{"id":"142b1fcf-95c7-49eb-ae98-8d8e9a1c398d","createdAt":"2025-02-06T09:01:50.8270965+00:00","payload":{"targets":[{"locationId":"8b063a59-b10d-47d0-853d-591ae67a3312","meterPointId":"707057500049045546","resolution":"01:00:00","points":[{"maxPowerInKiloWatts":0,"timestamp":"2025-02-06T09:01:50.8270585+00:00"}]}],"payloadType":"LocationLPC"}},{"id":"947f8c31-80e9-4ee7-8580-96f1c6cc9c91","createdAt":"2025-02-06T09:01:50.8269869+00:00","payload":{"targets":[{"resolution":"01:00:00","points":[{"maxPowerInKiloWatts":0,"timestamp":"2025-02-06T09:01:50.8268602+00:00"}],"meterPointId":"707057500020256682","locationId":"6ace3690-90ed-484b-8cfd-343894a86910","resourceId":"37090396-8f9e-45d9-8f80-d1a63e691916"}],"payloadType":"ResourceLPC"}},{"id":"4b38d0a1-65ea-4602-8790-b9062a9bc366","createdAt":"2025-02-06T09:01:50.82647+00:00","payload":{"lastUpdated":"2025-02-05T09:01:50.8264971+00:00","addedUsers":["20192891-c278-4c12-bf16-c26cefd1dd5b"],"removedUsers":["a78c464f-e43d-42cf-8b34-e3cda3a4ae4d"],"payloadType":"UserEligibility"}},{"id":"115fe58e-85c8-4431-843d-524d936c537b","createdAt":"2025-02-06T09:01:50.8271125+00:00","payload":{"targets":[{"resourceId":"da37cb59-c8ed-4b79-b7de-11da0a7dd5ce","locationId":"107822f2-5b25-4bf2-9c35-418e51cc1ab1"},{"resourceId":"53b988a2-041b-4c3a-8e85-d079f99911a0","locationId":"006202c2-14fe-4feb-bff9-6d4e8b53d571"},{"resourceId":"6568ca33-3775-49a1-9f58-6d4ccc0dcdd2","locationId":"0cf5841c-957c-41d3-ba1c-c4084612f1c3"},{"resourceId":"c38e192f-bca1-411c-8f8e-d5b97b2c5752","locationId":"cd02ef73-252f-4ae6-adf6-1da92938c2cf"},{"resourceId":"25128cbf-2c20-46de-8fb3-0bd024aec1cd","locationId":"39640711-f226-49ed-844b-526829dd823a"}],"priceCurveDelta":{"points":[{"price":193.274412199284000,"timestamp":"2025-02-07T00:00:00+00:00"},{"price":690.464237658345000,"timestamp":"2025-02-07T01:00:00+00:00"},{"price":657.713938387424000,"timestamp":"2025-02-07T02:00:00+00:00"},{"price":73.4972391550719000,"timestamp":"2025-02-07T03:00:00+00:00"},{"price":834.601986700232000,"timestamp":"2025-02-07T04:00:00+00:00"},{"price":483.879305321478000,"timestamp":"2025-02-07T05:00:00+00:00"},{"price":168.214248241712000,"timestamp":"2025-02-07T06:00:00+00:00"},{"price":286.058013512905000,"timestamp":"2025-02-07T07:00:00+00:00"},{"price":53.6434942344001000,"timestamp":"2025-02-07T08:00:00+00:00"},{"price":311.465457591153000,"timestamp":"2025-02-07T09:00:00+00:00"},{"price":436.638886829075000,"timestamp":"2025-02-07T10:00:00+00:00"},{"price":711.432545417275000,"timestamp":"2025-02-07T11:00:00+00:00"},{"price":353.037575449863000,"timestamp":"2025-02-07T12:00:00+00:00"},{"price":108.018335531054000,"timestamp":"2025-02-07T13:00:00+00:00"},{"price":365.225844161438000,"timestamp":"2025-02-07T14:00:00+00:00"},{"price":329.335486855123000,"timestamp":"2025-02-07T15:00:00+00:00"},{"price":130.424432974274000,"timestamp":"2025-02-07T16:00:00+00:00"},{"price":615.615959578756000,"timestamp":"2025-02-07T17:00:00+00:00"},{"price":207.558115512174000,"timestamp":"2025-02-07T18:00:00+00:00"},{"price":804.097652412482000,"timestamp":"2025-02-07T19:00:00+00:00"},{"price":597.014048465588000,"timestamp":"2025-02-07T20:00:00+00:00"},{"price":577.685975792854000,"timestamp":"2025-02-07T21:00:00+00:00"},{"price":718.541033043033000,"timestamp":"2025-02-07T22:00:00+00:00"},{"price":768.20996664552000,"timestamp":"2025-02-07T23:00:00+00:00"}],"energyUnit":"kWh","currency":"NOK","resolution":"01:00:00"},"priceArea":"NO1","payloadType":"PriceCurve"}}],"pagination":{"totalRecords":4,"pageSize":4,"currentPage":1,"totalPages":1,"nextPage":null,"previousPage":null}}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get Event By Id",
        "operationId": "GetEventById",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventResponse"
                },
                "example": {"id":"a0ee1d4b-c606-4fa4-b170-8608621e8ec9","createdAt":"2025-02-06T09:01:50.8845293+00:00","payload":{"targets":[{"resourceId":"1291837c-199d-415c-96d0-0c791e959841","locationId":"a382e30d-e40c-4c1b-8973-e6bc25fabe0b"},{"resourceId":"1ef5d77f-b0f7-4939-8e6c-a69839a5ff99","locationId":"32794d1f-9e23-471c-81fb-2043b6c5b8b9"},{"resourceId":"b992a3d4-29a2-4f41-a4b4-f294168017b6","locationId":"563f256d-1f15-4fd0-924d-c0ec61c5a41a"},{"resourceId":"fa42cc53-f947-479c-a014-dfe5edb4fbce","locationId":"532632b1-6f25-4d15-92f2-d29298865e90"},{"resourceId":"797e83fe-df58-498f-8234-2388b5bd7931","locationId":"7109591b-5a0a-4b32-9652-8b12a5cd79e6"}],"priceCurveDelta":{"points":[{"price":313.024229218795000,"timestamp":"2025-02-07T00:00:00+00:00"},{"price":481.443399736474000,"timestamp":"2025-02-07T01:00:00+00:00"},{"price":158.568182478219000,"timestamp":"2025-02-07T02:00:00+00:00"},{"price":971.304724857549000,"timestamp":"2025-02-07T03:00:00+00:00"},{"price":949.217960836813000,"timestamp":"2025-02-07T04:00:00+00:00"},{"price":107.002051925574000,"timestamp":"2025-02-07T05:00:00+00:00"},{"price":389.027703218294000,"timestamp":"2025-02-07T06:00:00+00:00"},{"price":834.765324687135000,"timestamp":"2025-02-07T07:00:00+00:00"},{"price":840.602002988116000,"timestamp":"2025-02-07T08:00:00+00:00"},{"price":872.283773919824000,"timestamp":"2025-02-07T09:00:00+00:00"},{"price":68.6847507695626000,"timestamp":"2025-02-07T10:00:00+00:00"},{"price":120.473703555828000,"timestamp":"2025-02-07T11:00:00+00:00"},{"price":167.176627299102000,"timestamp":"2025-02-07T12:00:00+00:00"},{"price":192.049270100112000,"timestamp":"2025-02-07T13:00:00+00:00"},{"price":754.263736449514000,"timestamp":"2025-02-07T14:00:00+00:00"},{"price":113.045670527493000,"timestamp":"2025-02-07T15:00:00+00:00"},{"price":724.184126894336000,"timestamp":"2025-02-07T16:00:00+00:00"},{"price":622.357671548814000,"timestamp":"2025-02-07T17:00:00+00:00"},{"price":66.5108631190523000,"timestamp":"2025-02-07T18:00:00+00:00"},{"price":310.037089094023000,"timestamp":"2025-02-07T19:00:00+00:00"},{"price":64.6815823410824000,"timestamp":"2025-02-07T20:00:00+00:00"},{"price":146.991954390579000,"timestamp":"2025-02-07T21:00:00+00:00"},{"price":409.072116404881000,"timestamp":"2025-02-07T22:00:00+00:00"},{"price":696.743250619412000,"timestamp":"2025-02-07T23:00:00+00:00"}],"energyUnit":"kWh","currency":"NOK","resolution":"01:00:00"},"priceArea":"NO1","payloadType":"PriceCurve"}}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/reports": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Create a report",
        "operationId": "PostReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostReportRequest"
              },
              "example": {"eventId":"1dcc829d-93ed-4afd-be8f-ef6e30127bee","payloads":[{"resourceId":"18fe0e2b-d3a6-4c47-91ab-14326feb14ec","locationId":null,"meterPointId":null,"points":[{"timestamp":"2025-02-06T09:01:50.8957507+00:00","kiloWattHours":3.14}],"resolution":"01:00:00","curvePoints":null,"payloadType":"EnergyUsage"}]}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetReportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/resources/{resourceId}": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Get Resource by Id",
        "operationId": "GetResourceById",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetResourceResponse"
                },
                "example": {"resourceId":"18fe0e2b-d3a6-4c47-91ab-14326feb14ec","resourceType":"HotWaterTank","userId":"4bb682ae-918b-4ec4-89ee-43962b0a83bd","locationId":"4002e3dc-b82f-493f-b03c-1638d368816c","meterPointId":null}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Resources"
        ],
        "summary": "Delete Resource",
        "description": "Returns 204 No Content if the resource was deleted successfully.\nReturns 404 Not Found if the resource to delete does not exist.",
        "operationId": "DeleteResourceById",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/simulation/events/pricecurve": {
      "post": {
        "tags": [
          "Simulation | Events"
        ],
        "summary": "Simulate Price Curve Event",
        "description": "Creates a `PriceCurve` event in the system using the given parameters.\nThe event will be sent to all webhooks that subscribe to the given type of event.\n\n- If the `targets` parameter is not specified, simulated resources and locations will be targeted instead if any exist.\n\n- If the `priceArea` parameter is not specified, a random price area will be selected.\n\n- If the `priceCurveDelta` parameter is not specified, a random price curve delta will be created.",
        "operationId": "PostPriceCurveSimulation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulatePriceCurveEventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulateEventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/simulation/events/usereligibility": {
      "post": {
        "tags": [
          "Simulation | Events"
        ],
        "summary": "Simulate User Eligibility Event",
        "description": "Creates a `UserEligibility` event in the system using the given parameters.\nThe event will be sent to all webhooks that subscribe to the given type of event.\n\nThis event does not affect the eligibility of any users. It is only used to simulate the event.\n\nFor actual events, you can call the /users/eligible endpoint to check\nwhich users are eligible.",
        "operationId": "PostUserEligibilitySimulation",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulateEventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/simulation/events/lpc/locations": {
      "post": {
        "tags": [
          "Simulation | Events"
        ],
        "summary": "Simulate LPC Location Event",
        "description": "Creates a `LocationLPC` event in the system using the given parameters.\nThe event will be sent to all webhooks that subscribe to the given type of event.\n\n- If the `locations` parameter is not specified, random locations will be targeted if any exist.\n\n- If the `points` parameter is not specified, a random points array with maximum power will be generated.",
        "operationId": "PostLPCLocationSimulation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateLocationLPCEventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulateEventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/simulation/events/lpc/resources": {
      "post": {
        "tags": [
          "Simulation | Events"
        ],
        "summary": "Simulate LPC Resource Event",
        "description": "Creates a `ResourceLPC` event in the system using the given parameters.\nThe event will be sent to all webhooks that subscribe to the given type of event.\n\n- If the `resources` parameter is not specified, random resources at locations will be targeted if any exist.\n\n- If the `points` parameter is not specified, a random points array with maximum power will be generated.",
        "operationId": "PostLPCResourceSimulation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateResourceLPCEventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulateEventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/simulation/partner": {
      "post": {
        "tags": [
          "Simulation | Partner data"
        ],
        "summary": "Simulate DER-Partner Data",
        "description": "Creates simulated data with users, vehicles, locations and resources.",
        "operationId": "PostTenantDataSimulation",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Simulation | Partner data"
        ],
        "summary": "Cleanup Simulation Data",
        "description": "Deletes all simulation data from the system. This includes users, vehicles, locations and resources.",
        "operationId": "DeleteTenantDataSimulation",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get Users",
        "description": "Get all users. Maximum pageSize is 1000.",
        "operationId": "GetUsers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUsersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a User",
        "operationId": "PostUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostUserRequest"
              },
              "example": {"userId":"4bb682ae-918b-4ec4-89ee-43962b0a83bd"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserResponse"
                },
                "example": {"userId":"4bb682ae-918b-4ec4-89ee-43962b0a83bd"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User by Id",
        "operationId": "GetUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserResponse"
                },
                "example": {"userId":"4bb682ae-918b-4ec4-89ee-43962b0a83bd"}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete User",
        "description": "Returns 204 No Content if the user was deleted successfully.\nReturns 404 Not Found if the user to delete does not exist.",
        "operationId": "DeleteUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/batch": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create Multiple Users",
        "operationId": "PostUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostUsersBatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostUsersBatchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/locations": {
      "get": {
        "tags": [
          "User Locations"
        ],
        "summary": "Get A User's Locations",
        "operationId": "GetLocationsByUserId",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetLocationResponse"
                  }
                },
                "example": [{"locationId":"4002e3dc-b82f-493f-b03c-1638d368816c","locationType":"Residential","coordinates":null,"meterPointId":"78786c92-b0b6-488d-89a2-2dcb147a51fa","meterPointIds":["78786c92-b0b6-488d-89a2-2dcb147a51fa"],"userId":"4bb682ae-918b-4ec4-89ee-43962b0a83bd"}]
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User Locations"
        ],
        "summary": "Create User Location",
        "operationId": "PostLocation",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostLocationRequest"
              },
              "example": {"locationId":"4002e3dc-b82f-493f-b03c-1638d368816c","locationType":"Residential","coordinates":null,"meterPointId":null,"meterPointIds":["78786c92-b0b6-488d-89a2-2dcb147a51fa"]}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationResponse"
                },
                "example": {"locationId":"4002e3dc-b82f-493f-b03c-1638d368816c","locationType":"Residential","coordinates":null,"meterPointId":null,"meterPointIds":[],"userId":"4bb682ae-918b-4ec4-89ee-43962b0a83bd"}
              }
            }
          },
          "409": {
            "description": "Conflict"
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/locations/{locationId}": {
      "get": {
        "tags": [
          "User Locations"
        ],
        "summary": "Get User Location By Location Id",
        "operationId": "GetLocationByLocationId",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationResponse"
                },
                "example": {"locationId":"4002e3dc-b82f-493f-b03c-1638d368816c","locationType":"Residential","coordinates":null,"meterPointId":null,"meterPointIds":[],"userId":"4bb682ae-918b-4ec4-89ee-43962b0a83bd"}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User Locations"
        ],
        "summary": "Update User Location",
        "operationId": "UpdateLocation",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutLocationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationResponse"
                },
                "example": {"locationId":"4002e3dc-b82f-493f-b03c-1638d368816c","locationType":"Residential","coordinates":null,"meterPointId":null,"meterPointIds":[],"userId":"4bb682ae-918b-4ec4-89ee-43962b0a83bd"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "User Locations"
        ],
        "summary": "Patch User Location",
        "operationId": "PatchLocation",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchLocationRequest"
              },
              "example": {"locationType":null,"coordinates":{"latitude":78.22094240482632,"longitude":15.619465054484257},"meterPointIds":null}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationResponse"
                },
                "example": {"locationId":"4002e3dc-b82f-493f-b03c-1638d368816c","locationType":"Residential","coordinates":null,"meterPointId":null,"meterPointIds":[],"userId":"4bb682ae-918b-4ec4-89ee-43962b0a83bd"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        }
      },
      "delete": {
        "tags": [
          "User Locations"
        ],
        "summary": "Delete User Location",
        "description": "Returns 204 No Content if the location was deleted successfully.\nReturns 404 Not Found if the location to delete does not exist.",
        "operationId": "DeleteLocation",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/locations/batch": {
      "post": {
        "tags": [
          "User Locations"
        ],
        "summary": "Create Multiple User Locations",
        "description": "Create multiple locations for several users at once.\n\"The request body should be an array of objects, each containing a user id and a create location request.",
        "operationId": "PostLocations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostLocationsBatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostLocationsBatchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/vehicles": {
      "post": {
        "tags": [
          "User Resources"
        ],
        "summary": "Create Vehicle Resource",
        "operationId": "PostVehicle",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostVehicleResourceRequest"
              },
              "example": {"resourceId":"dd7085fd-0678-4ea6-939b-f97e7f010a3e","resourceType":"Vehicle"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetResourceResponse"
                },
                "example": {"resourceId":"18fe0e2b-d3a6-4c47-91ab-14326feb14ec","resourceType":"HotWaterTank","userId":"4bb682ae-918b-4ec4-89ee-43962b0a83bd","locationId":"4002e3dc-b82f-493f-b03c-1638d368816c","meterPointId":null}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/resources": {
      "get": {
        "tags": [
          "User Resources"
        ],
        "summary": "Get a User's Resources",
        "description": "Get all resources registered to a user. Returns both location bound resources and vehicles.",
        "operationId": "GetResourcesForUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserResourcesResponse"
                },
                "example": {"resources":[{"resourceId":"18fe0e2b-d3a6-4c47-91ab-14326feb14ec","resourceType":"HotWaterTank","userId":"4bb682ae-918b-4ec4-89ee-43962b0a83bd","locationId":"4002e3dc-b82f-493f-b03c-1638d368816c","meterPointId":null},{"resourceId":"dd7085fd-0678-4ea6-939b-f97e7f010a3e","resourceType":"Vehicle","userId":"4bb682ae-918b-4ec4-89ee-43962b0a83bd","locationId":null,"meterPointId":null}]}
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/{userId}/locations/{locationId}/resources": {
      "get": {
        "tags": [
          "User Resources | Location-bound"
        ],
        "summary": "Get Location Bound Resources",
        "description": "Get all resources registered at a location.",
        "operationId": "GetLocationBoundResources",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetLocationBoundResourceResponse"
                  }
                },
                "example": [{"resourceId":"18fe0e2b-d3a6-4c47-91ab-14326feb14ec","resourceType":"HotWaterTank","locationId":"4002e3dc-b82f-493f-b03c-1638d368816c","userId":"4bb682ae-918b-4ec4-89ee-43962b0a83bd","meterPointId":null},{"resourceId":"d8dea3d1-1a0a-4c23-b6e2-325547e725f2","resourceType":"Charger","locationId":"4002e3dc-b82f-493f-b03c-1638d368816c","userId":"4bb682ae-918b-4ec4-89ee-43962b0a83bd","meterPointId":null}]
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "User Resources | Location-bound"
        ],
        "summary": "Create Location Bound Resource",
        "description": "Create a resource at a location.",
        "operationId": "PostLocationBoundResource",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostLocationBoundResourceRequest"
              },
              "example": {"meterPointId":"78786c92-b0b6-488d-89a2-2dcb147a51fa","resourceId":"18fe0e2b-d3a6-4c47-91ab-14326feb14ec","resourceType":"HotWaterTank"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationBoundResourceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/enrollment": {
      "get": {
        "tags": [
          "User Spark Program"
        ],
        "summary": "Get User Enrollment",
        "description": "Get a user's enrollment status.\nAlso returns when the user was enrolled.",
        "operationId": "GetUserEnrollmentByUserId",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserEnrollmentResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User Spark Program"
        ],
        "summary": "Enroll User",
        "description": "Enroll a user into the SPARK Program",
        "operationId": "PostUserEnrollment",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserEnrollmentResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User Spark Program"
        ],
        "summary": "Delete User Enrollment",
        "description": "Remove a user from the SPARK Program",
        "operationId": "DeleteUserEnrollment",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/eligibility": {
      "get": {
        "tags": [
          "User Spark Program"
        ],
        "summary": "Get User Eligibility",
        "description": "Check if a user is eligible for the SPARK Program",
        "operationId": "GetUserEligibilityByUserId",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserEligibilityResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/eligible": {
      "get": {
        "tags": [
          "User Spark Program"
        ],
        "summary": "Get Eligible Users",
        "description": "Get all users who are eligible for the SPARK Program. Maximum pageSize is 1000.",
        "operationId": "GetEligibleUsers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEligibleUsersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/compensation": {
      "get": {
        "tags": [
          "User Spark Program"
        ],
        "summary": "Will fetch the total compensation per location the user has for the current month",
        "operationId": "FetchUserCompensation",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserCompensationForCurrentMonthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/meters/{mpid}/eligible": {
      "get": {
        "tags": [
          "User Spark Program"
        ],
        "summary": "Check if MeterPoint id eligible for Spark",
        "description": "Indicates whether or not the given MeterPoint is currently eligible for the Spark program",
        "operationId": "GetMpidEligibility",
        "parameters": [
          {
            "name": "mpid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMpidEligibilityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get All Webhooks",
        "operationId": "GetWebhooks",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWebhooksResponse"
                },
                "example": {"webhooks":[{"webhookId":"c4117708-194c-4d52-86f3-f0f5fdce7535","webhookUrl":"https://example.com/api","name":"Example Webhook","notificationTypes":["PriceCurveCreated"],"enabled":true,"status":"Healthy","modifiedDate":"2025-02-06T09:01:50.9290255+00:00","createdDate":"2025-02-06T09:01:50.9290082+00:00","lastAnalyzedTimestamp":"2025-02-06T09:01:50.9290366+00:00"}]}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create a Webhook",
        "operationId": "PostWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostWebhookRequest"
              },
              "example": {"name":"Example Webhook","webhookSecret":"CMJ0PqrOtGIat7j","webhookUrl":"https://example.com/api","notificationTypes":["PriceCurveCreated","UserEligibilityUpdated","LocationLPCRequested","ResourceLPCRequested"]}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWebhookResponse"
                },
                "example": {"webhookId":"c4117708-194c-4d52-86f3-f0f5fdce7535","webhookUrl":"https://example.com/api","name":"Example Webhook","notificationTypes":["PriceCurveCreated"],"enabled":true,"status":"Healthy","modifiedDate":"2025-02-06T09:01:50.9336807+00:00","createdDate":"2025-02-06T09:01:50.9336801+00:00","lastAnalyzedTimestamp":"2025-02-06T09:01:50.9336808+00:00"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/{webhookId}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get a Webhook by Id",
        "operationId": "GetWebhookById",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWebhookResponse"
                },
                "example": {"webhookId":"c4117708-194c-4d52-86f3-f0f5fdce7535","webhookUrl":"https://example.com/api","name":"Example Webhook","notificationTypes":["PriceCurveCreated"],"enabled":true,"status":"Healthy","modifiedDate":"2025-02-06T09:01:50.9342396+00:00","createdDate":"2025-02-06T09:01:50.934239+00:00","lastAnalyzedTimestamp":"2025-02-06T09:01:50.9342397+00:00"}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update a Webhook",
        "operationId": "UpdateWebhookById",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutWebhookRequest"
              },
              "example": {"webhookSecret":"New secret","webhookUrl":"https://new-example.com/api/v2/","notificationTypes":["PriceCurveCreated"],"enabled":true,"name":"New name"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWebhookResponse"
                },
                "example": {"webhookId":"c4117708-194c-4d52-86f3-f0f5fdce7535","webhookUrl":"https://example.com/api","name":"Example Webhook","notificationTypes":["PriceCurveCreated"],"enabled":true,"status":"Healthy","modifiedDate":"2025-02-06T09:01:50.9354505+00:00","createdDate":"2025-02-06T09:01:50.9354501+00:00","lastAnalyzedTimestamp":"2025-02-06T09:01:50.9354506+00:00"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete a webhook",
        "description": "Returns 204 No Content if the webhook was deleted successfully.\nReturns 404 Not Found if the webhook to delete does not exist.",
        "operationId": "DeleteWebhookById",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update individual fields of a Webhook",
        "operationId": "PatchWebhookById",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchWebhookRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWebhookResponse"
                },
                "example": {"webhookId":"c4117708-194c-4d52-86f3-f0f5fdce7535","webhookUrl":"https://example.com/api","name":"Example Webhook","notificationTypes":["PriceCurveCreated"],"enabled":true,"status":"Healthy","modifiedDate":"2025-02-06T09:01:50.9360123+00:00","createdDate":"2025-02-06T09:01:50.936012+00:00","lastAnalyzedTimestamp":"2025-02-06T09:01:50.9360123+00:00"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/webhooks/{webhookId}/enabled": {
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Enable or Disable a Webhook",
        "operationId": "UpdateWebhookEnabledById",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/webhooks/logs": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get all webhook notification logs",
        "operationId": "GetWebhookNotificationLogs",
        "parameters": [
          {
            "name": "webhookId",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/WebhookId"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWebhookNotificationLogsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/logs/{notificationId}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get a webhook notification log by notification id",
        "operationId": "GetWebhookNotificationLogById",
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWebhookNotificationLogByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiPagination": {
        "required": [
          "currentPage",
          "pageSize",
          "totalRecords"
        ],
        "type": "object",
        "properties": {
          "totalRecords": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "nextPage": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "previousPage": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Coordinate": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "Currency": {
        "enum": [
          "NOK",
          "EUR",
          "SEK",
          "DKK"
        ],
        "type": "string"
      },
      "EnergyCurvePoint": {
        "required": [
          "kiloWattHours",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "kiloWattHours": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "EnergyUnit": {
        "enum": [
          "kWh",
          "MWh"
        ],
        "type": "string"
      },
      "EnergyUsageReportPayload": {
        "required": [
          "resolution",
          "resourceId"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkReportPayload"
          }
        ],
        "properties": {
          "resourceId": {
            "type": "string"
          },
          "locationId": {
            "type": "string",
            "nullable": true
          },
          "meterPointId": {
            "type": "string",
            "nullable": true
          },
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnergyCurvePoint"
            }
          },
          "resolution": {
            "type": "string",
            "format": "time-span",
            "example": "02:00:00"
          },
          "curvePoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnergyCurvePoint"
            },
            "nullable": true,
            "deprecated": true
          }
        },
        "additionalProperties": false
      },
      "EventId": {
        "type": "string"
      },
      "EventNotification": {
        "required": [
          "eventCreatedAtUtc",
          "eventId",
          "notificationId",
          "notificationSentUtc",
          "notificationType",
          "payload"
        ],
        "type": "object",
        "properties": {
          "notificationId": {
            "$ref": "#/components/schemas/NotificationId"
          },
          "eventId": {
            "type": "string"
          },
          "eventCreatedAtUtc": {
            "type": "string",
            "format": "date-time"
          },
          "notificationSentUtc": {
            "type": "string",
            "format": "date-time"
          },
          "notificationType": {
            "$ref": "#/components/schemas/NotificationType"
          },
          "payload": {
            "$ref": "#/components/schemas/SparkEventPayload"
          }
        },
        "additionalProperties": false
      },
      "GetEligibleUsersResponse": {
        "required": [
          "pagination"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/ApiPagination"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetUserResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "GetEventResponse": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "payload": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PriceCurvePayload"
              },
              {
                "$ref": "#/components/schemas/UserEligibilityPayload"
              },
              {
                "$ref": "#/components/schemas/LocationLPCPayload"
              },
              {
                "$ref": "#/components/schemas/ResourceLPCPayload"
              },
              {
                "$ref": "#/components/schemas/LPCReservationPayload"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "GetEventsResponse": {
        "required": [
          "pagination"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/ApiPagination"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetEventResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "GetLocationBoundResourceResponse": {
        "required": [
          "locationId",
          "resourceId",
          "resourceType",
          "userId"
        ],
        "type": "object",
        "properties": {
          "resourceId": {
            "type": "string"
          },
          "resourceType": {
            "$ref": "#/components/schemas/ResourceType"
          },
          "locationId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "meterPointId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetLocationResponse": {
        "required": [
          "locationId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string"
          },
          "locationType": {
            "$ref": "#/components/schemas/LocationType"
          },
          "coordinates": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "meterPointId": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "meterPointIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetMpidEligibilityResponse": {
        "required": [
          "isEligible",
          "meterPointId"
        ],
        "type": "object",
        "properties": {
          "meterPointId": {
            "type": "string"
          },
          "isEligible": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GetReportResponse": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "GetResourceResponse": {
        "required": [
          "resourceId",
          "resourceType",
          "userId"
        ],
        "type": "object",
        "properties": {
          "resourceId": {
            "type": "string"
          },
          "resourceType": {
            "$ref": "#/components/schemas/ResourceType"
          },
          "userId": {
            "type": "string"
          },
          "locationId": {
            "type": "string",
            "nullable": true
          },
          "meterPointId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetUserCompensationForCurrentMonthResponse": {
        "required": [
          "period"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "$ref": "#/components/schemas/UserId"
          },
          "period": {
            "$ref": "#/components/schemas/Period"
          },
          "locationCompensations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationCompensation"
            }
          }
        },
        "additionalProperties": false
      },
      "GetUserEligibilityResponse": {
        "required": [
          "isEligible",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "isEligible": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GetUserEnrollmentResponse": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "isEnrolled": {
            "type": "boolean",
            "readOnly": true
          },
          "userId": {
            "type": "string"
          },
          "enrollmentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "enrollmentDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetUserResourcesResponse": {
        "required": [
          "resources"
        ],
        "type": "object",
        "properties": {
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetResourceResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "GetUserResponse": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetUsersResponse": {
        "required": [
          "pagination"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/ApiPagination"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetUserResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "GetWebhookNotificationLogByIdResponse": {
        "type": "object",
        "properties": {
          "webhookNotificationLog": {
            "$ref": "#/components/schemas/WebhookNotificationLog"
          },
          "notificationContent": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetWebhookNotificationLogsResponse": {
        "type": "object",
        "properties": {
          "webhookNotificationLogs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookNotificationLog"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/ApiPagination"
          }
        },
        "additionalProperties": false
      },
      "GetWebhookResponse": {
        "required": [
          "webhookId",
          "webhookUrl"
        ],
        "type": "object",
        "properties": {
          "webhookId": {
            "type": "string"
          },
          "webhookUrl": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "notificationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationType"
            }
          },
          "enabled": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/WebhookStatus"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastAnalyzedTimestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "GetWebhooksResponse": {
        "required": [
          "webhooks"
        ],
        "type": "object",
        "properties": {
          "webhooks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetWebhookResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "HttpValidationProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": { }
      },
      "LPCDataPoint": {
        "type": "object",
        "properties": {
          "maxPowerInKiloWatts": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "LPCLocation": {
        "required": [
          "locationId",
          "meterPointId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          },
          "meterPointId": {
            "$ref": "#/components/schemas/MeterPointId"
          }
        },
        "additionalProperties": false
      },
      "LPCLocationTarget": {
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationTarget"
          },
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCDataPoint"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LPCReservationPayload": {
        "required": [
          "payloadType",
          "targets"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkEventPayload"
          }
        ],
        "properties": {
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationLPCTarget"
            }
          }
        },
        "additionalProperties": false
      },
      "LPCResource": {
        "required": [
          "locationId",
          "meterPointId",
          "resourceId"
        ],
        "type": "object",
        "properties": {
          "meterPointId": {
            "$ref": "#/components/schemas/MeterPointId"
          },
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          },
          "resourceId": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        "additionalProperties": false
      },
      "LPCResourceTarget": {
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/ResourceTarget"
          },
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCDataPoint"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LocationCompensation": {
        "type": "object",
        "properties": {
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          },
          "meterPointIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeterPointId"
            }
          },
          "activeAmount": {
            "type": "number",
            "format": "double"
          },
          "blockedAmount": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "problems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Problem"
            }
          }
        },
        "additionalProperties": false
      },
      "LocationEnergyUsagePlanReportPayload": {
        "required": [
          "baseline",
          "flexibility",
          "locationId",
          "meterPointId",
          "resolution"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkReportPayload"
          }
        ],
        "properties": {
          "locationId": {
            "type": "string"
          },
          "meterPointId": {
            "type": "string"
          },
          "resolution": {
            "type": "string",
            "format": "time-span",
            "example": "02:00:00"
          },
          "baseline": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnergyCurvePoint"
            }
          },
          "flexibility": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnergyCurvePoint"
            }
          }
        },
        "additionalProperties": false
      },
      "LocationEnergyUsageReportPayload": {
        "required": [
          "locationId",
          "meterPointId",
          "resolution"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkReportPayload"
          }
        ],
        "properties": {
          "locationId": {
            "type": "string"
          },
          "meterPointId": {
            "type": "string"
          },
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnergyCurvePoint"
            }
          },
          "resolution": {
            "type": "string",
            "format": "time-span",
            "example": "02:00:00"
          }
        },
        "additionalProperties": false
      },
      "LocationId": {
        "type": "string"
      },
      "LocationLPCAcknowledgmentReportPayload": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkReportPayload"
          }
        ],
        "properties": {
          "acknowledgedTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCLocation"
            }
          },
          "declinedTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCLocation"
            }
          }
        },
        "additionalProperties": false
      },
      "LocationLPCPayload": {
        "required": [
          "payloadType",
          "targets"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkEventPayload"
          }
        ],
        "properties": {
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationLPCTarget"
            }
          }
        },
        "additionalProperties": false
      },
      "LocationLPCTarget": {
        "required": [
          "locationId",
          "meterPointId",
          "points",
          "resolution"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          },
          "meterPointId": {
            "$ref": "#/components/schemas/MeterPointId"
          },
          "resolution": {
            "type": "string",
            "format": "time-span",
            "example": "02:00:00"
          },
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCDataPoint"
            }
          }
        },
        "additionalProperties": false
      },
      "LocationTarget": {
        "type": "object",
        "properties": {
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          },
          "meterPointId": {
            "$ref": "#/components/schemas/MeterPointId"
          }
        },
        "additionalProperties": false
      },
      "LocationType": {
        "enum": [
          "Unknown",
          "Residential",
          "Commercial",
          "Other"
        ],
        "type": "string"
      },
      "MeterPointId": {
        "type": "string"
      },
      "NotificationId": {
        "type": "string"
      },
      "NotificationType": {
        "enum": [
          "Unknown",
          "PriceCurveCreated",
          "UserEligibilityUpdated",
          "LocationLPCRequested",
          "ResourceLPCRequested",
          "LPCReservationCreated"
        ],
        "type": "string"
      },
      "PatchLocationRequest": {
        "type": "object",
        "properties": {
          "locationType": {
            "$ref": "#/components/schemas/LocationType"
          },
          "coordinates": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "meterPointIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PatchWebhookRequest": {
        "type": "object",
        "properties": {
          "webhookSecret": {
            "type": "string",
            "nullable": true
          },
          "webhookUrl": {
            "type": "string",
            "nullable": true
          },
          "notificationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationType"
            },
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Period": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "format": "date"
          },
          "to": {
            "type": "string",
            "format": "date"
          }
        },
        "additionalProperties": false
      },
      "PostLocationBoundResourceRequest": {
        "required": [
          "resourceId",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "resourceId": {
            "type": "string"
          },
          "resourceType": {
            "$ref": "#/components/schemas/ResourceType"
          },
          "meterPointId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostLocationRequest": {
        "required": [
          "locationId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string"
          },
          "locationType": {
            "$ref": "#/components/schemas/LocationType"
          },
          "coordinates": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "meterPointId": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "meterPointIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostLocationWithUserRequest": {
        "required": [
          "locationId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string"
          },
          "locationType": {
            "$ref": "#/components/schemas/LocationType"
          },
          "coordinates": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "meterPointId": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "meterPointIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "userId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PostLocationsBatchRequest": {
        "required": [
          "locations"
        ],
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostLocationWithUserRequest"
            }
          }
        },
        "additionalProperties": false
      },
      "PostLocationsBatchResponse": {
        "required": [
          "locations"
        ],
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetLocationResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "PostReportRequest": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "payloads": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/EnergyUsageReportPayload"
                },
                {
                  "$ref": "#/components/schemas/LocationEnergyUsageReportPayload"
                },
                {
                  "$ref": "#/components/schemas/ResourceLPCAcknowledgmentReportPayload"
                },
                {
                  "$ref": "#/components/schemas/LocationLPCAcknowledgmentReportPayload"
                },
                {
                  "$ref": "#/components/schemas/LocationEnergyUsagePlanReportPayload"
                }
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "PostUserRequest": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PostUsersBatchRequest": {
        "required": [
          "users"
        ],
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostUserRequest"
            }
          }
        },
        "additionalProperties": false
      },
      "PostUsersBatchResponse": {
        "required": [
          "users"
        ],
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetUserResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "PostVehicleResourceRequest": {
        "required": [
          "resourceId",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "resourceId": {
            "type": "string"
          },
          "resourceType": {
            "$ref": "#/components/schemas/ResourceType"
          }
        },
        "additionalProperties": false
      },
      "PostWebhookRequest": {
        "required": [
          "webhookUrl"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "webhookSecret": {
            "type": "string",
            "nullable": true
          },
          "webhookUrl": {
            "type": "string"
          },
          "notificationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationType"
            }
          }
        },
        "additionalProperties": false
      },
      "PriceArea": {
        "enum": [
          "Unknown",
          "NO1",
          "NO2",
          "NO3",
          "NO4",
          "NO5",
          "FI",
          "DK1",
          "DK2",
          "SE1",
          "SE2",
          "SE3",
          "SE4"
        ],
        "type": "string"
      },
      "PriceCurve": {
        "type": "object",
        "properties": {
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceCurvePoint"
            }
          },
          "energyUnit": {
            "$ref": "#/components/schemas/EnergyUnit"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "resolution": {
            "type": "string",
            "format": "time-span",
            "example": "02:00:00"
          }
        },
        "additionalProperties": false
      },
      "PriceCurvePayload": {
        "required": [
          "payloadType",
          "priceArea",
          "priceCurveDelta",
          "targets"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkEventPayload"
          }
        ],
        "properties": {
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceCurveTarget"
            }
          },
          "priceCurveDelta": {
            "$ref": "#/components/schemas/PriceCurve"
          },
          "priceArea": {
            "$ref": "#/components/schemas/PriceArea"
          }
        },
        "additionalProperties": false
      },
      "PriceCurvePoint": {
        "type": "object",
        "properties": {
          "price": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PriceCurveTarget": {
        "required": [
          "locationId",
          "resourceId"
        ],
        "type": "object",
        "properties": {
          "resourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          }
        },
        "additionalProperties": false
      },
      "Problem": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "problemType": {
            "$ref": "#/components/schemas/ProblemType"
          },
          "message": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ProblemType": {
        "enum": [
          "MissingMpidOnLocation",
          "CompensationMpidDoesNotMatchLocation"
        ],
        "type": "string"
      },
      "PutLocationRequest": {
        "required": [
          "locationId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string"
          },
          "locationType": {
            "$ref": "#/components/schemas/LocationType"
          },
          "coordinates": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "meterPointId": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "meterPointIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutWebhookRequest": {
        "required": [
          "webhookUrl"
        ],
        "type": "object",
        "properties": {
          "webhookSecret": {
            "type": "string",
            "nullable": true
          },
          "webhookUrl": {
            "type": "string"
          },
          "notificationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationType"
            }
          },
          "enabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceId": {
        "type": "string"
      },
      "ResourceLPCAcknowledgmentReportPayload": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkReportPayload"
          }
        ],
        "properties": {
          "acknowledgedTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCResource"
            }
          },
          "declinedTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCResource"
            }
          }
        },
        "additionalProperties": false
      },
      "ResourceLPCPayload": {
        "required": [
          "payloadType",
          "targets"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkEventPayload"
          }
        ],
        "properties": {
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceLPCTarget"
            }
          }
        },
        "additionalProperties": false
      },
      "ResourceLPCTarget": {
        "required": [
          "locationId",
          "meterPointId",
          "points",
          "resolution",
          "resourceId"
        ],
        "type": "object",
        "properties": {
          "meterPointId": {
            "$ref": "#/components/schemas/MeterPointId"
          },
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          },
          "resourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "resolution": {
            "type": "string",
            "format": "time-span",
            "example": "02:00:00"
          },
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCDataPoint"
            }
          }
        },
        "additionalProperties": false
      },
      "ResourceTarget": {
        "type": "object",
        "properties": {
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          },
          "resourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "meterPointId": {
            "$ref": "#/components/schemas/MeterPointId"
          }
        },
        "additionalProperties": false
      },
      "ResourceType": {
        "enum": [
          "Generic",
          "Vehicle",
          "Charger",
          "HotWaterTank",
          "HVAC",
          "SolarInverter"
        ],
        "type": "string"
      },
      "SimulateEventResponse": {
        "type": "object",
        "properties": {
          "simulatedEvent": {
            "$ref": "#/components/schemas/GetEventResponse"
          }
        },
        "additionalProperties": false
      },
      "SimulateLocationLPCEventRequest": {
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCLocationTarget"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SimulatePriceCurveEventRequest": {
        "type": "object",
        "properties": {
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceCurveTarget"
            },
            "nullable": true
          },
          "priceCurveDelta": {
            "$ref": "#/components/schemas/PriceCurve"
          },
          "priceArea": {
            "$ref": "#/components/schemas/PriceArea"
          }
        },
        "additionalProperties": false
      },
      "SimulateResourceLPCEventRequest": {
        "type": "object",
        "properties": {
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCResourceTarget"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SparkEventPayload": {
        "required": [
          "payloadType"
        ],
        "type": "object",
        "properties": {
          "payloadType": {
            "$ref": "#/components/schemas/SparkEventPayloadType"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "payloadType",
          "mapping": {
            "PriceCurve": "#/components/schemas/PriceCurvePayload",
            "UserEligibility": "#/components/schemas/UserEligibilityPayload",
            "LocationLPC": "#/components/schemas/LocationLPCPayload",
            "ResourceLPC": "#/components/schemas/ResourceLPCPayload",
            "LPCReservation": "#/components/schemas/LPCReservationPayload"
          }
        }
      },
      "SparkEventPayloadType": {
        "enum": [
          "Unknown",
          "UserEligibility",
          "PriceCurve",
          "LocationLPC",
          "ResourceLPC",
          "LPCReservation"
        ],
        "type": "string"
      },
      "SparkReportPayload": {
        "type": "object",
        "properties": {
          "payloadType": {
            "$ref": "#/components/schemas/SparkReportPayloadType"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "payloadType",
          "mapping": {
            "EnergyUsage": "#/components/schemas/EnergyUsageReportPayload",
            "LocationEnergyUsage": "#/components/schemas/LocationEnergyUsageReportPayload",
            "ResourceLPCAcknowledgement": "#/components/schemas/ResourceLPCAcknowledgmentReportPayload",
            "LocationLPCAcknowledgement": "#/components/schemas/LocationLPCAcknowledgmentReportPayload",
            "LocationEnergyUsagePlan": "#/components/schemas/LocationEnergyUsagePlanReportPayload"
          }
        }
      },
      "SparkReportPayloadType": {
        "enum": [
          "EnergyUsage",
          "LocationEnergyUsage",
          "LocationEnergyUsagePlan",
          "ResourceLPCAcknowledgement",
          "LocationLPCAcknowledgement"
        ],
        "type": "string"
      },
      "TenantId": {
        "type": "string"
      },
      "UserEligibilityPayload": {
        "required": [
          "addedUsers",
          "lastUpdated",
          "payloadType",
          "removedUsers"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkEventPayload"
          }
        ],
        "properties": {
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "addedUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "removedUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "UserId": {
        "type": "string"
      },
      "WebhookId": {
        "type": "string"
      },
      "WebhookNotificationLog": {
        "required": [
          "tenantId",
          "webhookId",
          "webhookUrl"
        ],
        "type": "object",
        "properties": {
          "webhookId": {
            "$ref": "#/components/schemas/WebhookId"
          },
          "tenantId": {
            "$ref": "#/components/schemas/TenantId"
          },
          "partnerEventId": {
            "$ref": "#/components/schemas/EventId"
          },
          "notificationId": {
            "$ref": "#/components/schemas/NotificationId"
          },
          "notificationType": {
            "$ref": "#/components/schemas/NotificationType"
          },
          "notificationSent": {
            "type": "string",
            "format": "date-time"
          },
          "sparkSignature": {
            "type": "string",
            "nullable": true
          },
          "webhookUrl": {
            "type": "string",
            "format": "uri"
          },
          "requestTimeout": {
            "type": "boolean"
          },
          "responseStatusCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "requestDurationMs": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebhookStatus": {
        "enum": [
          "New",
          "Healthy",
          "Unhealthy",
          "TimeOut"
        ],
        "type": "string"
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "Enter the JWT-token. Bearer will be prepended.",
        "scheme": "Bearer"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}