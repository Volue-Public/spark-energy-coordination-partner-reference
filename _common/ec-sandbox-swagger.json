{
  "openapi": "3.0.1",
  "info": {
    "title": "Energy Coordination API - Partner Endpoints",
    "version": "v1"
  },
  "servers": [
    {
      "url": "/energy-coordination/v1"
    }
  ],
  "paths": {
    "/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get All Events",
        "description": "Get all events, ordered by the most recent events first. Maximum pageSize is 1000.",
        "operationId": "GetAllEvents",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventsResponse"
                },
                "example": {"events":[{"id":"6689ae75-a58b-42fc-98a1-66ccc6d85018","createdAt":"2025-04-07T09:02:08.8853743+00:00","payload":{"targets":[{"locationId":"02363f5b-d5e0-448b-815b-f1f0fa6c6633","meterPointId":"707057500048077150","resolution":"01:00:00","points":[{"maxPowerInKiloWatts":0,"timestamp":"2025-04-07T09:02:08.8853638+00:00"}]}],"payloadType":"LocationLPC"}},{"id":"ad1d87f7-51e6-4849-ba5a-c1f0d838ebd8","createdAt":"2025-04-07T09:02:08.8853618+00:00","payload":{"targets":[{"resolution":"01:00:00","points":[{"maxPowerInKiloWatts":0,"timestamp":"2025-04-07T09:02:08.8853505+00:00"}],"meterPointId":"707057500015380145","locationId":"fc095f5e-a378-400d-a048-c1141947aa8b","resourceId":"c82ec18a-3469-4c8b-9456-b0911ab28983"}],"payloadType":"ResourceLPC"}},{"id":"d865c82a-5ad1-48a6-b27b-8856260f3a88","createdAt":"2025-04-07T09:02:08.8853315+00:00","payload":{"lastUpdated":"2025-04-06T09:02:08.88534+00:00","addedUsers":["e3fce30f-6e82-43c6-9ede-4b70549931fa"],"removedUsers":["8b6e48f9-82ba-4bda-9a0a-e4085dfc8021"],"payloadType":"UserEligibility"}},{"id":"2c8951e9-90e0-4699-b875-6e2fb80548a3","createdAt":"2025-04-07T09:02:08.8853852+00:00","payload":{"targets":[{"resourceId":"76d6693f-20fb-4e21-946c-3c49ec5fd96f","locationId":"bcb79f54-6be6-4a76-abca-106a36d3c64a"},{"resourceId":"d6d9463e-05b3-4d53-bbe6-9c1920aa0b10","locationId":"a5c02993-4e79-4daf-9887-f2f763a28378"},{"resourceId":"42da9d4f-025d-4a20-bfb5-b5c80e0dca30","locationId":"3a4ce2ae-168a-4cbe-9e29-c3b0bd2b8381"},{"resourceId":"36edd06b-00b7-4678-9a42-9e1d29622067","locationId":"f7048f82-7ff6-46ef-bb3d-99f3788ad931"},{"resourceId":"33138135-d28c-44f4-a1c8-0dcef8dadbc1","locationId":"3667d0ea-efa8-4283-967d-161b77ef703e"}],"priceCurveDelta":{"points":[{"price":15.264948434748000,"timestamp":"2025-04-08T00:00:00+00:00"},{"price":65.0057415872804000,"timestamp":"2025-04-08T01:00:00+00:00"},{"price":341.119320001927000,"timestamp":"2025-04-08T02:00:00+00:00"},{"price":285.214246347374000,"timestamp":"2025-04-08T03:00:00+00:00"},{"price":219.600227699417000,"timestamp":"2025-04-08T04:00:00+00:00"},{"price":342.823221515279000,"timestamp":"2025-04-08T05:00:00+00:00"},{"price":633.348026772352000,"timestamp":"2025-04-08T06:00:00+00:00"},{"price":140.797226299174000,"timestamp":"2025-04-08T07:00:00+00:00"},{"price":773.58197818324000,"timestamp":"2025-04-08T08:00:00+00:00"},{"price":205.898793101606000,"timestamp":"2025-04-08T09:00:00+00:00"},{"price":986.740504130533000,"timestamp":"2025-04-08T10:00:00+00:00"},{"price":767.651674283336000,"timestamp":"2025-04-08T11:00:00+00:00"},{"price":349.400045791412000,"timestamp":"2025-04-08T12:00:00+00:00"},{"price":434.895067958461000,"timestamp":"2025-04-08T13:00:00+00:00"},{"price":232.441171344686000,"timestamp":"2025-04-08T14:00:00+00:00"},{"price":31.2479313927947000,"timestamp":"2025-04-08T15:00:00+00:00"},{"price":786.107731608743000,"timestamp":"2025-04-08T16:00:00+00:00"},{"price":135.791216879904000,"timestamp":"2025-04-08T17:00:00+00:00"},{"price":367.728070852472000,"timestamp":"2025-04-08T18:00:00+00:00"},{"price":926.470133191738000,"timestamp":"2025-04-08T19:00:00+00:00"},{"price":403.016761377535000,"timestamp":"2025-04-08T20:00:00+00:00"},{"price":738.7245248766000,"timestamp":"2025-04-08T21:00:00+00:00"},{"price":945.714944672381000,"timestamp":"2025-04-08T22:00:00+00:00"},{"price":504.960644181891000,"timestamp":"2025-04-08T23:00:00+00:00"}],"energyUnit":"kWh","currency":"NOK","resolution":"01:00:00"},"priceArea":"NO1","payloadType":"PriceCurve"}}],"pagination":{"totalRecords":4,"pageSize":4,"currentPage":1,"totalPages":1,"nextPage":null,"previousPage":null}}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get Event By Id",
        "operationId": "GetEventById",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventResponse"
                },
                "example": {"id":"6f52836c-1be2-4235-b331-d484a6e2804d","createdAt":"2025-04-07T09:02:08.8856971+00:00","payload":{"targets":[{"resourceId":"bb87b509-3ccd-42f8-bb05-30f01ca48146","locationId":"a8433c60-3caa-41b4-b7b8-896e2a93513b"},{"resourceId":"9389f067-936d-4da2-b1c7-90cd3fa7b45d","locationId":"0b322c57-2925-419d-a363-2b5101f0c855"},{"resourceId":"0cf59d8b-e633-42d0-8fd7-2157dc905233","locationId":"8ce3e8e5-1ad8-4db5-b1f4-d4fa7e449ffc"},{"resourceId":"d3d8db1c-c784-4f03-84af-9255b4299c1f","locationId":"54d53860-b00e-4823-963e-20788405f040"},{"resourceId":"3efd254d-18d6-4d5d-ae16-de2141a45f93","locationId":"c5b41a18-e0c1-4f08-a5d9-0056e6e2d808"}],"priceCurveDelta":{"points":[{"price":141.562930029751000,"timestamp":"2025-04-08T00:00:00+00:00"},{"price":743.71233470726000,"timestamp":"2025-04-08T01:00:00+00:00"},{"price":832.711141726392000,"timestamp":"2025-04-08T02:00:00+00:00"},{"price":489.701696752598000,"timestamp":"2025-04-08T03:00:00+00:00"},{"price":616.183500316447000,"timestamp":"2025-04-08T04:00:00+00:00"},{"price":312.097145926638000,"timestamp":"2025-04-08T05:00:00+00:00"},{"price":702.37198437589000,"timestamp":"2025-04-08T06:00:00+00:00"},{"price":367.75345817786000,"timestamp":"2025-04-08T07:00:00+00:00"},{"price":237.858502247405000,"timestamp":"2025-04-08T08:00:00+00:00"},{"price":765.919995233578000,"timestamp":"2025-04-08T09:00:00+00:00"},{"price":510.587703610516000,"timestamp":"2025-04-08T10:00:00+00:00"},{"price":997.269376821724000,"timestamp":"2025-04-08T11:00:00+00:00"},{"price":168.256989691628000,"timestamp":"2025-04-08T12:00:00+00:00"},{"price":941.035188732915000,"timestamp":"2025-04-08T13:00:00+00:00"},{"price":886.295523076798000,"timestamp":"2025-04-08T14:00:00+00:00"},{"price":391.932255650338000,"timestamp":"2025-04-08T15:00:00+00:00"},{"price":297.353203939351000,"timestamp":"2025-04-08T16:00:00+00:00"},{"price":88.2161870642795000,"timestamp":"2025-04-08T17:00:00+00:00"},{"price":543.306197832139000,"timestamp":"2025-04-08T18:00:00+00:00"},{"price":584.474603710328000,"timestamp":"2025-04-08T19:00:00+00:00"},{"price":449.325315891755000,"timestamp":"2025-04-08T20:00:00+00:00"},{"price":751.18786171958000,"timestamp":"2025-04-08T21:00:00+00:00"},{"price":654.01159331259000,"timestamp":"2025-04-08T22:00:00+00:00"},{"price":894.760290000144000,"timestamp":"2025-04-08T23:00:00+00:00"}],"energyUnit":"kWh","currency":"NOK","resolution":"01:00:00"},"priceArea":"NO1","payloadType":"PriceCurve"}}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/reports": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Create a report",
        "operationId": "PostReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostReportRequest"
              },
              "example": {"eventId":"53d752de-801c-4f33-ae89-970141384ad5","payloads":[{"resourceId":"844b15c6-600d-4077-b33e-4058d0dd435d","locationId":null,"meterPointId":null,"points":[{"timestamp":"2025-04-04T15:19:09.3327165+00:00","kiloWattHours":3.14}],"resolution":"01:00:00","curvePoints":null,"payloadType":"EnergyUsage"}]}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetReportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/resources/{resourceId}": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Get Resource by Id",
        "operationId": "GetResourceById",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetResourceResponse"
                },
                "example": {"resourceId":"844b15c6-600d-4077-b33e-4058d0dd435d","resourceType":"HotWaterTank","userId":"3ee0ee54-f31e-4b61-aa4f-7fb7b05216f8","locationId":"629f08c7-56da-4925-b74f-b21385cb6be0","meterPointId":null}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Resources"
        ],
        "summary": "Delete Resource",
        "description": "Returns 204 No Content if the resource was deleted successfully.\nReturns 404 Not Found if the resource to delete does not exist.",
        "operationId": "DeleteResourceById",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/simulation/events/pricecurve": {
      "post": {
        "tags": [
          "Simulation | Events"
        ],
        "summary": "Simulate Price Curve Event",
        "description": "Creates a `PriceCurve` event in the system using the given parameters.\nThe event will be sent to all webhooks that subscribe to the given type of event.\n\n- If the `targets` parameter is not specified, simulated resources and locations will be targeted instead if any exist.\n\n- If the `priceArea` parameter is not specified, a random price area will be selected.\n\n- If the `priceCurveDelta` parameter is not specified, a random price curve delta will be created.",
        "operationId": "PostPriceCurveSimulation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulatePriceCurveEventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulateEventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/simulation/events/usereligibility": {
      "post": {
        "tags": [
          "Simulation | Events"
        ],
        "summary": "Simulate User Eligibility Event",
        "description": "Creates a `UserEligibility` event in the system using the given parameters.\nThe event will be sent to all webhooks that subscribe to the given type of event.\n\nThis event does not affect the eligibility of any users. It is only used to simulate the event.\n\nFor actual events, you can call the /users/eligible endpoint to check\nwhich users are eligible.",
        "operationId": "PostUserEligibilitySimulation",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulateEventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/simulation/events/lpc/locations": {
      "post": {
        "tags": [
          "Simulation | Events"
        ],
        "summary": "Simulate LPC Location Event",
        "description": "Creates a `LocationLPC` event in the system using the given parameters.\nThe event will be sent to all webhooks that subscribe to the given type of event.\n\n- If the `locations` parameter is not specified, random locations will be targeted if any exist.\n\n- If the `points` parameter is not specified, a random points array with maximum power will be generated.",
        "operationId": "PostLPCLocationSimulation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateLocationLPCEventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulateEventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/simulation/events/lpc/resources": {
      "post": {
        "tags": [
          "Simulation | Events"
        ],
        "summary": "Simulate LPC Resource Event",
        "description": "Creates a `ResourceLPC` event in the system using the given parameters.\nThe event will be sent to all webhooks that subscribe to the given type of event.\n\n- If the `resources` parameter is not specified, random resources at locations will be targeted if any exist.\n\n- If the `points` parameter is not specified, a random points array with maximum power will be generated.",
        "operationId": "PostLPCResourceSimulation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateResourceLPCEventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulateEventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/simulation/partner": {
      "post": {
        "tags": [
          "Simulation | Partner data"
        ],
        "summary": "Simulate DER-Partner Data",
        "description": "Creates simulated data with users, vehicles, locations and resources.",
        "operationId": "PostTenantDataSimulation",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Simulation | Partner data"
        ],
        "summary": "Cleanup Simulation Data",
        "description": "Deletes all simulation data from the system. This includes users, vehicles, locations and resources.",
        "operationId": "DeleteTenantDataSimulation",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get Users",
        "description": "Get all users. Maximum pageSize is 1000.",
        "operationId": "GetUsers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUsersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a User",
        "operationId": "PostUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostUserRequest"
              },
              "example": {"userId":"3ee0ee54-f31e-4b61-aa4f-7fb7b05216f8"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserResponse"
                },
                "example": {"userId":"3ee0ee54-f31e-4b61-aa4f-7fb7b05216f8"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User by Id",
        "operationId": "GetUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserResponse"
                },
                "example": {"userId":"3ee0ee54-f31e-4b61-aa4f-7fb7b05216f8"}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete User",
        "description": "Returns 204 No Content if the user was deleted successfully.\nReturns 404 Not Found if the user to delete does not exist.",
        "operationId": "DeleteUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/batch": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create Multiple Users",
        "operationId": "PostUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostUsersBatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostUsersBatchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/locations": {
      "get": {
        "tags": [
          "User Locations"
        ],
        "summary": "Get A User's Locations",
        "operationId": "GetLocationsByUserId",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetLocationResponse"
                  }
                },
                "example": [{"locationId":"629f08c7-56da-4925-b74f-b21385cb6be0","locationType":"Residential","coordinates":null,"meterPointId":"232d6426-f08b-4c9b-a842-a8ef669fcf72","meterPointIds":["232d6426-f08b-4c9b-a842-a8ef669fcf72"],"userId":"3ee0ee54-f31e-4b61-aa4f-7fb7b05216f8"}]
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User Locations"
        ],
        "summary": "Create User Location",
        "operationId": "PostLocation",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostLocationRequest"
              },
              "example": {"locationId":"629f08c7-56da-4925-b74f-b21385cb6be0","locationType":"Residential","coordinates":null,"meterPointId":null,"meterPointIds":["232d6426-f08b-4c9b-a842-a8ef669fcf72"]}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationResponse"
                },
                "example": {"locationId":"629f08c7-56da-4925-b74f-b21385cb6be0","locationType":"Residential","coordinates":null,"meterPointId":null,"meterPointIds":[],"userId":"3ee0ee54-f31e-4b61-aa4f-7fb7b05216f8"}
              }
            }
          },
          "409": {
            "description": "Conflict"
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/locations/{locationId}": {
      "get": {
        "tags": [
          "User Locations"
        ],
        "summary": "Get User Location By Location Id",
        "operationId": "GetLocationByLocationId",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationResponse"
                },
                "example": {"locationId":"629f08c7-56da-4925-b74f-b21385cb6be0","locationType":"Residential","coordinates":null,"meterPointId":null,"meterPointIds":[],"userId":"3ee0ee54-f31e-4b61-aa4f-7fb7b05216f8"}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User Locations"
        ],
        "summary": "Update User Location",
        "operationId": "UpdateLocation",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutLocationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationResponse"
                },
                "example": {"locationId":"629f08c7-56da-4925-b74f-b21385cb6be0","locationType":"Residential","coordinates":null,"meterPointId":null,"meterPointIds":[],"userId":"3ee0ee54-f31e-4b61-aa4f-7fb7b05216f8"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "User Locations"
        ],
        "summary": "Patch User Location",
        "operationId": "PatchLocation",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchLocationRequest"
              },
              "example": {"locationType":null,"coordinates":{"latitude":78.22094240482632,"longitude":15.619465054484257},"meterPointIds":null}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationResponse"
                },
                "example": {"locationId":"629f08c7-56da-4925-b74f-b21385cb6be0","locationType":"Residential","coordinates":null,"meterPointId":null,"meterPointIds":[],"userId":"3ee0ee54-f31e-4b61-aa4f-7fb7b05216f8"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        }
      },
      "delete": {
        "tags": [
          "User Locations"
        ],
        "summary": "Delete User Location",
        "description": "Returns 204 No Content if the location was deleted successfully.\nReturns 404 Not Found if the location to delete does not exist.",
        "operationId": "DeleteLocation",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/locations/batch": {
      "post": {
        "tags": [
          "User Locations"
        ],
        "summary": "Create Multiple User Locations",
        "description": "Create multiple locations for several users at once.\n\"The request body should be an array of objects, each containing a user id and a create location request.",
        "operationId": "PostLocations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostLocationsBatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostLocationsBatchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/vehicles": {
      "post": {
        "tags": [
          "User Resources"
        ],
        "summary": "Create Vehicle Resource",
        "operationId": "PostVehicle",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostVehicleResourceRequest"
              },
              "example": {"resourceId":"022d69a0-f1a1-4e17-940c-00b92dd98b57","resourceType":"Vehicle"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetResourceResponse"
                },
                "example": {"resourceId":"844b15c6-600d-4077-b33e-4058d0dd435d","resourceType":"HotWaterTank","userId":"3ee0ee54-f31e-4b61-aa4f-7fb7b05216f8","locationId":"629f08c7-56da-4925-b74f-b21385cb6be0","meterPointId":null}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/resources": {
      "get": {
        "tags": [
          "User Resources"
        ],
        "summary": "Get a User's Resources",
        "description": "Get all resources registered to a user. Returns both location bound resources and vehicles.",
        "operationId": "GetResourcesForUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserResourcesResponse"
                },
                "example": {"resources":[{"resourceId":"844b15c6-600d-4077-b33e-4058d0dd435d","resourceType":"HotWaterTank","userId":"3ee0ee54-f31e-4b61-aa4f-7fb7b05216f8","locationId":"629f08c7-56da-4925-b74f-b21385cb6be0","meterPointId":null},{"resourceId":"022d69a0-f1a1-4e17-940c-00b92dd98b57","resourceType":"Vehicle","userId":"3ee0ee54-f31e-4b61-aa4f-7fb7b05216f8","locationId":null,"meterPointId":null}]}
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/{userId}/locations/{locationId}/resources": {
      "get": {
        "tags": [
          "User Resources | Location-bound"
        ],
        "summary": "Get Location Bound Resources",
        "description": "Get all resources registered at a location.",
        "operationId": "GetLocationBoundResources",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetLocationBoundResourceResponse"
                  }
                },
                "example": [{"resourceId":"844b15c6-600d-4077-b33e-4058d0dd435d","resourceType":"HotWaterTank","locationId":"629f08c7-56da-4925-b74f-b21385cb6be0","userId":"3ee0ee54-f31e-4b61-aa4f-7fb7b05216f8","meterPointId":null},{"resourceId":"e169900a-8d67-4eba-bdb0-376102ef66ed","resourceType":"Charger","locationId":"629f08c7-56da-4925-b74f-b21385cb6be0","userId":"3ee0ee54-f31e-4b61-aa4f-7fb7b05216f8","meterPointId":null}]
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "User Resources | Location-bound"
        ],
        "summary": "Create Location Bound Resource",
        "description": "Create a resource at a location.",
        "operationId": "PostLocationBoundResource",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostLocationBoundResourceRequest"
              },
              "example": {"meterPointId":"232d6426-f08b-4c9b-a842-a8ef669fcf72","resourceId":"844b15c6-600d-4077-b33e-4058d0dd435d","resourceType":"HotWaterTank"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationBoundResourceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/enrollment": {
      "get": {
        "tags": [
          "User Spark Program"
        ],
        "summary": "Get User Enrollment",
        "description": "Get a user's enrollment status.\nAlso returns when the user was enrolled.",
        "operationId": "GetUserEnrollmentByUserId",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserEnrollmentResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User Spark Program"
        ],
        "summary": "Enroll User",
        "description": "Enroll a user into the SPARK Program",
        "operationId": "PostUserEnrollment",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserEnrollmentResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User Spark Program"
        ],
        "summary": "Delete User Enrollment",
        "description": "Remove a user from the SPARK Program",
        "operationId": "DeleteUserEnrollment",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/eligibility": {
      "get": {
        "tags": [
          "User Spark Program"
        ],
        "summary": "Get User Eligibility",
        "description": "Check if a user is eligible for the SPARK Program",
        "operationId": "GetUserEligibilityByUserId",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserEligibilityResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/eligible": {
      "get": {
        "tags": [
          "User Spark Program"
        ],
        "summary": "Get Eligible Users",
        "description": "Get all users who are eligible for the SPARK Program. Maximum pageSize is 1000.",
        "operationId": "GetEligibleUsers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEligibleUsersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/compensation": {
      "get": {
        "tags": [
          "User Spark Program"
        ],
        "summary": "Will fetch the total compensation per location the user has for the current month",
        "operationId": "FetchUserCompensation",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserCompensationForCurrentMonthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/meters/{mpid}/eligible": {
      "get": {
        "tags": [
          "User Spark Program"
        ],
        "summary": "Check if MeterPoint id eligible for Spark",
        "description": "Indicates whether or not the given MeterPoint is currently eligible for the Spark program",
        "operationId": "GetMpidEligibility",
        "parameters": [
          {
            "name": "mpid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMpidEligibilityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get All Webhooks",
        "operationId": "GetWebhooks",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWebhooksResponse"
                },
                "example": {"webhooks":[{"webhookId":"c33fe196-cee7-4d60-b894-d2b757d7bc89","webhookUrl":"https://example.com/api","name":"Example Webhook","notificationTypes":["PriceCurveCreated"],"enabled":true,"status":"Healthy","modifiedDate":"2025-04-07T09:02:08.8922852+00:00","createdDate":"2025-04-07T09:02:08.8922837+00:00","lastAnalyzedTimestamp":"2025-04-07T09:02:08.8922853+00:00"}]}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create a Webhook",
        "operationId": "PostWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostWebhookRequest"
              },
              "example": {"name":"Example Webhook","webhookSecret":"CMJ0PqrOtGIat7j","webhookUrl":"https://example.com/api","notificationTypes":["PriceCurveCreated","UserEligibilityUpdated","LocationLPCRequested","ResourceLPCRequested"]}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWebhookResponse"
                },
                "example": {"webhookId":"c33fe196-cee7-4d60-b894-d2b757d7bc89","webhookUrl":"https://example.com/api","name":"Example Webhook","notificationTypes":["PriceCurveCreated"],"enabled":true,"status":"Healthy","modifiedDate":"2025-04-07T09:02:08.8925361+00:00","createdDate":"2025-04-07T09:02:08.8925359+00:00","lastAnalyzedTimestamp":"2025-04-07T09:02:08.8925361+00:00"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/{webhookId}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get a Webhook by Id",
        "operationId": "GetWebhookById",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWebhookResponse"
                },
                "example": {"webhookId":"c33fe196-cee7-4d60-b894-d2b757d7bc89","webhookUrl":"https://example.com/api","name":"Example Webhook","notificationTypes":["PriceCurveCreated"],"enabled":true,"status":"Healthy","modifiedDate":"2025-04-07T09:02:08.8927478+00:00","createdDate":"2025-04-07T09:02:08.8927475+00:00","lastAnalyzedTimestamp":"2025-04-07T09:02:08.8927478+00:00"}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update a Webhook",
        "operationId": "UpdateWebhookById",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutWebhookRequest"
              },
              "example": {"webhookSecret":"New secret","webhookUrl":"https://new-example.com/api/v2/","notificationTypes":["PriceCurveCreated"],"enabled":true,"name":"New name"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWebhookResponse"
                },
                "example": {"webhookId":"c33fe196-cee7-4d60-b894-d2b757d7bc89","webhookUrl":"https://example.com/api","name":"Example Webhook","notificationTypes":["PriceCurveCreated"],"enabled":true,"status":"Healthy","modifiedDate":"2025-04-07T09:02:08.893071+00:00","createdDate":"2025-04-07T09:02:08.8930708+00:00","lastAnalyzedTimestamp":"2025-04-07T09:02:08.8930711+00:00"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete a webhook",
        "description": "Returns 204 No Content if the webhook was deleted successfully.\nReturns 404 Not Found if the webhook to delete does not exist.",
        "operationId": "DeleteWebhookById",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update individual fields of a Webhook",
        "operationId": "PatchWebhookById",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchWebhookRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWebhookResponse"
                },
                "example": {"webhookId":"c33fe196-cee7-4d60-b894-d2b757d7bc89","webhookUrl":"https://example.com/api","name":"Example Webhook","notificationTypes":["PriceCurveCreated"],"enabled":true,"status":"Healthy","modifiedDate":"2025-04-07T09:02:08.89337+00:00","createdDate":"2025-04-07T09:02:08.8933698+00:00","lastAnalyzedTimestamp":"2025-04-07T09:02:08.89337+00:00"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/webhooks/{webhookId}/enabled": {
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Enable or Disable a Webhook",
        "operationId": "UpdateWebhookEnabledById",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/webhooks/logs": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get all webhook notification logs",
        "operationId": "GetWebhookNotificationLogs",
        "parameters": [
          {
            "name": "webhookId",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/WebhookId"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWebhookNotificationLogsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/logs/{notificationId}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get a webhook notification log by notification id",
        "operationId": "GetWebhookNotificationLogById",
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWebhookNotificationLogByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiPagination": {
        "required": [
          "currentPage",
          "pageSize",
          "totalRecords"
        ],
        "type": "object",
        "properties": {
          "totalRecords": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "nextPage": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "previousPage": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Coordinate": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "Currency": {
        "enum": [
          "NOK",
          "EUR",
          "SEK",
          "DKK"
        ],
        "type": "string"
      },
      "EnergyCurvePoint": {
        "required": [
          "kiloWattHours",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "kiloWattHours": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "EnergyUnit": {
        "enum": [
          "kWh",
          "MWh"
        ],
        "type": "string"
      },
      "EnergyUsageReportPayload": {
        "required": [
          "resolution",
          "resourceId"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkReportPayload"
          }
        ],
        "properties": {
          "resourceId": {
            "type": "string"
          },
          "locationId": {
            "type": "string",
            "nullable": true
          },
          "meterPointId": {
            "type": "string",
            "nullable": true
          },
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnergyCurvePoint"
            }
          },
          "resolution": {
            "type": "string",
            "format": "time-span",
            "example": "02:00:00"
          },
          "curvePoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnergyCurvePoint"
            },
            "nullable": true,
            "deprecated": true
          }
        },
        "additionalProperties": false
      },
      "EventId": {
        "type": "string"
      },
      "EventNotification": {
        "required": [
          "eventCreatedAtUtc",
          "eventId",
          "notificationId",
          "notificationSentUtc",
          "notificationType",
          "payload"
        ],
        "type": "object",
        "properties": {
          "notificationId": {
            "$ref": "#/components/schemas/NotificationId"
          },
          "eventId": {
            "type": "string"
          },
          "eventCreatedAtUtc": {
            "type": "string",
            "format": "date-time"
          },
          "notificationSentUtc": {
            "type": "string",
            "format": "date-time"
          },
          "notificationType": {
            "$ref": "#/components/schemas/NotificationType"
          },
          "payload": {
            "$ref": "#/components/schemas/SparkEventPayload"
          }
        },
        "additionalProperties": false
      },
      "GetEligibleUsersResponse": {
        "required": [
          "pagination"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/ApiPagination"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetUserResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "GetEventResponse": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "payload": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PriceCurvePayload"
              },
              {
                "$ref": "#/components/schemas/UserEligibilityPayload"
              },
              {
                "$ref": "#/components/schemas/LocationLPCPayload"
              },
              {
                "$ref": "#/components/schemas/ResourceLPCPayload"
              },
              {
                "$ref": "#/components/schemas/LPCReservationPayload"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "GetEventsResponse": {
        "required": [
          "pagination"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/ApiPagination"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetEventResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "GetLocationBoundResourceResponse": {
        "required": [
          "locationId",
          "resourceId",
          "resourceType",
          "userId"
        ],
        "type": "object",
        "properties": {
          "resourceId": {
            "type": "string"
          },
          "resourceType": {
            "$ref": "#/components/schemas/ResourceType"
          },
          "locationId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "meterPointId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetLocationResponse": {
        "required": [
          "locationId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string"
          },
          "locationType": {
            "$ref": "#/components/schemas/LocationType"
          },
          "coordinates": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "meterPointId": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "meterPointIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetMpidEligibilityResponse": {
        "required": [
          "isEligible",
          "meterPointId"
        ],
        "type": "object",
        "properties": {
          "meterPointId": {
            "type": "string"
          },
          "isEligible": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GetReportResponse": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "GetResourceResponse": {
        "required": [
          "resourceId",
          "resourceType",
          "userId"
        ],
        "type": "object",
        "properties": {
          "resourceId": {
            "type": "string"
          },
          "resourceType": {
            "$ref": "#/components/schemas/ResourceType"
          },
          "userId": {
            "type": "string"
          },
          "locationId": {
            "type": "string",
            "nullable": true
          },
          "meterPointId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetUserCompensationForCurrentMonthResponse": {
        "required": [
          "period"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "$ref": "#/components/schemas/UserId"
          },
          "period": {
            "$ref": "#/components/schemas/Period"
          },
          "locationCompensations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationCompensation"
            }
          }
        },
        "additionalProperties": false
      },
      "GetUserEligibilityResponse": {
        "required": [
          "isEligible",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "isEligible": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GetUserEnrollmentResponse": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "isEnrolled": {
            "type": "boolean",
            "readOnly": true
          },
          "userId": {
            "type": "string"
          },
          "enrollmentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "enrollmentDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetUserResourcesResponse": {
        "required": [
          "resources"
        ],
        "type": "object",
        "properties": {
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetResourceResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "GetUserResponse": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetUsersResponse": {
        "required": [
          "pagination"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/ApiPagination"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetUserResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "GetWebhookNotificationLogByIdResponse": {
        "type": "object",
        "properties": {
          "webhookNotificationLog": {
            "$ref": "#/components/schemas/WebhookNotificationLog"
          },
          "notificationContent": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetWebhookNotificationLogsResponse": {
        "type": "object",
        "properties": {
          "webhookNotificationLogs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookNotificationLog"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/ApiPagination"
          }
        },
        "additionalProperties": false
      },
      "GetWebhookResponse": {
        "required": [
          "webhookId",
          "webhookUrl"
        ],
        "type": "object",
        "properties": {
          "webhookId": {
            "type": "string"
          },
          "webhookUrl": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "notificationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationType"
            }
          },
          "enabled": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/WebhookStatus"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastAnalyzedTimestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "GetWebhooksResponse": {
        "required": [
          "webhooks"
        ],
        "type": "object",
        "properties": {
          "webhooks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetWebhookResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "HttpValidationProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": { }
      },
      "LPCDataPoint": {
        "type": "object",
        "properties": {
          "maxPowerInKiloWatts": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "LPCLocation": {
        "required": [
          "locationId",
          "meterPointId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          },
          "meterPointId": {
            "$ref": "#/components/schemas/MeterPointId"
          }
        },
        "additionalProperties": false
      },
      "LPCLocationTarget": {
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationTarget"
          },
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCDataPoint"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LPCReservationPayload": {
        "required": [
          "payloadType",
          "targets"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkEventPayload"
          }
        ],
        "properties": {
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationLPCTarget"
            }
          }
        },
        "additionalProperties": false
      },
      "LPCResource": {
        "required": [
          "locationId",
          "meterPointId",
          "resourceId"
        ],
        "type": "object",
        "properties": {
          "meterPointId": {
            "$ref": "#/components/schemas/MeterPointId"
          },
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          },
          "resourceId": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        "additionalProperties": false
      },
      "LPCResourceTarget": {
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/ResourceTarget"
          },
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCDataPoint"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LocationCompensation": {
        "type": "object",
        "properties": {
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          },
          "meterPointIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeterPointId"
            }
          },
          "activeAmount": {
            "type": "number",
            "format": "double"
          },
          "blockedAmount": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "problems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Problem"
            }
          }
        },
        "additionalProperties": false
      },
      "LocationEnergyUsagePlanReportPayload": {
        "required": [
          "baseline",
          "flexibility",
          "locationId",
          "meterPointId",
          "resolution"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkReportPayload"
          }
        ],
        "properties": {
          "locationId": {
            "type": "string"
          },
          "meterPointId": {
            "type": "string"
          },
          "resolution": {
            "type": "string",
            "format": "time-span",
            "example": "02:00:00"
          },
          "baseline": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnergyCurvePoint"
            }
          },
          "flexibility": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnergyCurvePoint"
            }
          }
        },
        "additionalProperties": false
      },
      "LocationEnergyUsageReportPayload": {
        "required": [
          "locationId",
          "meterPointId",
          "resolution"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkReportPayload"
          }
        ],
        "properties": {
          "locationId": {
            "type": "string"
          },
          "meterPointId": {
            "type": "string"
          },
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnergyCurvePoint"
            }
          },
          "resolution": {
            "type": "string",
            "format": "time-span",
            "example": "02:00:00"
          }
        },
        "additionalProperties": false
      },
      "LocationId": {
        "type": "string"
      },
      "LocationLPCAcknowledgmentReportPayload": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkReportPayload"
          }
        ],
        "properties": {
          "acknowledgedTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCLocation"
            }
          },
          "declinedTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCLocation"
            }
          }
        },
        "additionalProperties": false
      },
      "LocationLPCPayload": {
        "required": [
          "payloadType",
          "targets"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkEventPayload"
          }
        ],
        "properties": {
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationLPCTarget"
            }
          }
        },
        "additionalProperties": false
      },
      "LocationLPCTarget": {
        "required": [
          "locationId",
          "meterPointId",
          "points",
          "resolution"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          },
          "meterPointId": {
            "$ref": "#/components/schemas/MeterPointId"
          },
          "resolution": {
            "type": "string",
            "format": "time-span",
            "example": "02:00:00"
          },
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCDataPoint"
            }
          }
        },
        "additionalProperties": false
      },
      "LocationTarget": {
        "type": "object",
        "properties": {
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          },
          "meterPointId": {
            "$ref": "#/components/schemas/MeterPointId"
          }
        },
        "additionalProperties": false
      },
      "LocationType": {
        "enum": [
          "Unknown",
          "Residential",
          "Commercial",
          "Other"
        ],
        "type": "string"
      },
      "MeterPointId": {
        "type": "string"
      },
      "NotificationId": {
        "type": "string"
      },
      "NotificationType": {
        "enum": [
          "Unknown",
          "PriceCurveCreated",
          "UserEligibilityUpdated",
          "LocationLPCRequested",
          "ResourceLPCRequested",
          "LPCReservationCreated"
        ],
        "type": "string"
      },
      "PatchLocationRequest": {
        "type": "object",
        "properties": {
          "locationType": {
            "$ref": "#/components/schemas/LocationType"
          },
          "coordinates": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "meterPointIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PatchWebhookRequest": {
        "type": "object",
        "properties": {
          "webhookSecret": {
            "type": "string",
            "nullable": true
          },
          "webhookUrl": {
            "type": "string",
            "nullable": true
          },
          "notificationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationType"
            },
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Period": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "format": "date"
          },
          "to": {
            "type": "string",
            "format": "date"
          }
        },
        "additionalProperties": false
      },
      "PostLocationBoundResourceRequest": {
        "required": [
          "resourceId",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "resourceId": {
            "type": "string"
          },
          "resourceType": {
            "$ref": "#/components/schemas/ResourceType"
          },
          "meterPointId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostLocationRequest": {
        "required": [
          "locationId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string"
          },
          "locationType": {
            "$ref": "#/components/schemas/LocationType"
          },
          "coordinates": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "meterPointId": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "meterPointIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostLocationWithUserRequest": {
        "required": [
          "locationId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string"
          },
          "locationType": {
            "$ref": "#/components/schemas/LocationType"
          },
          "coordinates": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "meterPointId": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "meterPointIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "userId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PostLocationsBatchRequest": {
        "required": [
          "locations"
        ],
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostLocationWithUserRequest"
            }
          }
        },
        "additionalProperties": false
      },
      "PostLocationsBatchResponse": {
        "required": [
          "locations"
        ],
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetLocationResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "PostReportRequest": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "payloads": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/EnergyUsageReportPayload"
                },
                {
                  "$ref": "#/components/schemas/LocationEnergyUsageReportPayload"
                },
                {
                  "$ref": "#/components/schemas/ResourceLPCAcknowledgmentReportPayload"
                },
                {
                  "$ref": "#/components/schemas/LocationLPCAcknowledgmentReportPayload"
                },
                {
                  "$ref": "#/components/schemas/LocationEnergyUsagePlanReportPayload"
                }
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "PostUserRequest": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PostUsersBatchRequest": {
        "required": [
          "users"
        ],
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostUserRequest"
            }
          }
        },
        "additionalProperties": false
      },
      "PostUsersBatchResponse": {
        "required": [
          "users"
        ],
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetUserResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "PostVehicleResourceRequest": {
        "required": [
          "resourceId",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "resourceId": {
            "type": "string"
          },
          "resourceType": {
            "$ref": "#/components/schemas/ResourceType"
          }
        },
        "additionalProperties": false
      },
      "PostWebhookRequest": {
        "required": [
          "webhookUrl"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "webhookSecret": {
            "type": "string",
            "nullable": true
          },
          "webhookUrl": {
            "type": "string"
          },
          "notificationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationType"
            }
          }
        },
        "additionalProperties": false
      },
      "PriceArea": {
        "enum": [
          "Unknown",
          "NO1",
          "NO2",
          "NO3",
          "NO4",
          "NO5",
          "FI",
          "DK1",
          "DK2",
          "SE1",
          "SE2",
          "SE3",
          "SE4"
        ],
        "type": "string"
      },
      "PriceCurve": {
        "type": "object",
        "properties": {
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceCurvePoint"
            }
          },
          "energyUnit": {
            "$ref": "#/components/schemas/EnergyUnit"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "resolution": {
            "type": "string",
            "format": "time-span",
            "example": "02:00:00"
          }
        },
        "additionalProperties": false
      },
      "PriceCurvePayload": {
        "required": [
          "payloadType",
          "priceArea",
          "priceCurveDelta",
          "targets"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkEventPayload"
          }
        ],
        "properties": {
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceCurveTarget"
            }
          },
          "priceCurveDelta": {
            "$ref": "#/components/schemas/PriceCurve"
          },
          "priceArea": {
            "$ref": "#/components/schemas/PriceArea"
          }
        },
        "additionalProperties": false
      },
      "PriceCurvePoint": {
        "type": "object",
        "properties": {
          "price": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PriceCurveTarget": {
        "required": [
          "locationId",
          "resourceId"
        ],
        "type": "object",
        "properties": {
          "resourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          }
        },
        "additionalProperties": false
      },
      "Problem": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "problemType": {
            "$ref": "#/components/schemas/ProblemType"
          },
          "message": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ProblemType": {
        "enum": [
          "MissingMpidOnLocation",
          "CompensationMpidDoesNotMatchLocation"
        ],
        "type": "string"
      },
      "PutLocationRequest": {
        "required": [
          "locationId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string"
          },
          "locationType": {
            "$ref": "#/components/schemas/LocationType"
          },
          "coordinates": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "meterPointId": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "meterPointIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutWebhookRequest": {
        "required": [
          "webhookUrl"
        ],
        "type": "object",
        "properties": {
          "webhookSecret": {
            "type": "string",
            "nullable": true
          },
          "webhookUrl": {
            "type": "string"
          },
          "notificationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationType"
            }
          },
          "enabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceId": {
        "type": "string"
      },
      "ResourceLPCAcknowledgmentReportPayload": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkReportPayload"
          }
        ],
        "properties": {
          "acknowledgedTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCResource"
            }
          },
          "declinedTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCResource"
            }
          }
        },
        "additionalProperties": false
      },
      "ResourceLPCPayload": {
        "required": [
          "payloadType",
          "targets"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkEventPayload"
          }
        ],
        "properties": {
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceLPCTarget"
            }
          }
        },
        "additionalProperties": false
      },
      "ResourceLPCTarget": {
        "required": [
          "locationId",
          "meterPointId",
          "points",
          "resolution",
          "resourceId"
        ],
        "type": "object",
        "properties": {
          "meterPointId": {
            "$ref": "#/components/schemas/MeterPointId"
          },
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          },
          "resourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "resolution": {
            "type": "string",
            "format": "time-span",
            "example": "02:00:00"
          },
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCDataPoint"
            }
          }
        },
        "additionalProperties": false
      },
      "ResourceTarget": {
        "type": "object",
        "properties": {
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          },
          "resourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "meterPointId": {
            "$ref": "#/components/schemas/MeterPointId"
          }
        },
        "additionalProperties": false
      },
      "ResourceType": {
        "enum": [
          "Generic",
          "Vehicle",
          "Charger",
          "HotWaterTank",
          "HVAC",
          "SolarInverter"
        ],
        "type": "string"
      },
      "SimulateEventResponse": {
        "type": "object",
        "properties": {
          "simulatedEvent": {
            "$ref": "#/components/schemas/GetEventResponse"
          }
        },
        "additionalProperties": false
      },
      "SimulateLocationLPCEventRequest": {
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCLocationTarget"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SimulatePriceCurveEventRequest": {
        "type": "object",
        "properties": {
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceCurveTarget"
            },
            "nullable": true
          },
          "priceCurveDelta": {
            "$ref": "#/components/schemas/PriceCurve"
          },
          "priceArea": {
            "$ref": "#/components/schemas/PriceArea"
          }
        },
        "additionalProperties": false
      },
      "SimulateResourceLPCEventRequest": {
        "type": "object",
        "properties": {
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCResourceTarget"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SparkEventPayload": {
        "required": [
          "payloadType"
        ],
        "type": "object",
        "properties": {
          "payloadType": {
            "$ref": "#/components/schemas/SparkEventPayloadType"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "payloadType",
          "mapping": {
            "PriceCurve": "#/components/schemas/PriceCurvePayload",
            "UserEligibility": "#/components/schemas/UserEligibilityPayload",
            "LocationLPC": "#/components/schemas/LocationLPCPayload",
            "ResourceLPC": "#/components/schemas/ResourceLPCPayload",
            "LPCReservation": "#/components/schemas/LPCReservationPayload"
          }
        }
      },
      "SparkEventPayloadType": {
        "enum": [
          "Unknown",
          "UserEligibility",
          "PriceCurve",
          "LocationLPC",
          "ResourceLPC",
          "LPCReservation"
        ],
        "type": "string"
      },
      "SparkReportPayload": {
        "type": "object",
        "properties": {
          "payloadType": {
            "$ref": "#/components/schemas/SparkReportPayloadType"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "payloadType",
          "mapping": {
            "EnergyUsage": "#/components/schemas/EnergyUsageReportPayload",
            "LocationEnergyUsage": "#/components/schemas/LocationEnergyUsageReportPayload",
            "ResourceLPCAcknowledgement": "#/components/schemas/ResourceLPCAcknowledgmentReportPayload",
            "LocationLPCAcknowledgement": "#/components/schemas/LocationLPCAcknowledgmentReportPayload",
            "LocationEnergyUsagePlan": "#/components/schemas/LocationEnergyUsagePlanReportPayload"
          }
        }
      },
      "SparkReportPayloadType": {
        "enum": [
          "EnergyUsage",
          "LocationEnergyUsage",
          "LocationEnergyUsagePlan",
          "ResourceLPCAcknowledgement",
          "LocationLPCAcknowledgement"
        ],
        "type": "string"
      },
      "TenantId": {
        "type": "string"
      },
      "UserEligibilityPayload": {
        "required": [
          "addedUsers",
          "lastUpdated",
          "payloadType",
          "removedUsers"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkEventPayload"
          }
        ],
        "properties": {
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "addedUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "removedUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "UserId": {
        "type": "string"
      },
      "WebhookId": {
        "type": "string"
      },
      "WebhookNotificationLog": {
        "required": [
          "tenantId",
          "webhookId",
          "webhookUrl"
        ],
        "type": "object",
        "properties": {
          "webhookId": {
            "$ref": "#/components/schemas/WebhookId"
          },
          "tenantId": {
            "$ref": "#/components/schemas/TenantId"
          },
          "partnerEventId": {
            "$ref": "#/components/schemas/EventId"
          },
          "notificationId": {
            "$ref": "#/components/schemas/NotificationId"
          },
          "notificationType": {
            "$ref": "#/components/schemas/NotificationType"
          },
          "notificationSent": {
            "type": "string",
            "format": "date-time"
          },
          "sparkSignature": {
            "type": "string",
            "nullable": true
          },
          "webhookUrl": {
            "type": "string",
            "format": "uri"
          },
          "requestTimeout": {
            "type": "boolean"
          },
          "responseStatusCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "requestDurationMs": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebhookStatus": {
        "enum": [
          "New",
          "Healthy",
          "Unhealthy",
          "TimeOut"
        ],
        "type": "string"
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "Enter the JWT-token. Bearer will be prepended.",
        "scheme": "Bearer"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}