{
  "openapi": "3.0.1",
  "info": {
    "title": "Energy Coordination API - Partner Endpoints",
    "version": "v1"
  },
  "servers": [
    {
      "url": "/energy-coordination/v1"
    }
  ],
  "paths": {
    "/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get All Events",
        "description": "Get all events, ordered by the most recent events first. Maximum pageSize is 1000.",
        "operationId": "GetAllEvents",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventsResponse"
                },
                "example": {"events":[{"id":"e6985202-d2d9-41ba-8640-1d419ab6654c","createdAt":"2025-05-12T09:02:23.1996145+00:00","payload":{"targets":[{"locationId":"85a064ae-b364-4b03-a615-75333faff9db","meterPointId":"707057500098843674","resolution":"01:00:00","points":[{"maxPowerInKiloWatts":0,"timestamp":"2025-05-12T09:02:23.1995262+00:00"}]}],"payloadType":"LocationLPC"}},{"id":"f8e23ef9-1ca5-42fa-a010-7eead20a7355","createdAt":"2025-05-12T09:02:23.1993456+00:00","payload":{"targets":[{"resolution":"01:00:00","points":[{"maxPowerInKiloWatts":0,"timestamp":"2025-05-12T09:02:23.1991753+00:00"}],"meterPointId":"707057500040862611","locationId":"762c6af4-a1f8-4355-8ace-3090e98048e2","resourceId":"e03a2822-1744-4871-afb2-74f191bd3ef7"}],"payloadType":"ResourceLPC"}},{"id":"88a2093b-ccf0-4f72-bb3c-788ac0b832a3","createdAt":"2025-05-12T09:02:23.1984868+00:00","payload":{"lastUpdated":"2025-05-11T09:02:23.1985269+00:00","addedUsers":["d8fdb9dc-9e64-4f3b-a9be-c937ef3aed16"],"removedUsers":["2c35353d-d1f9-448f-8d7c-fe40570b769c"],"payloadType":"UserEligibility"}},{"id":"ca8e7205-657b-43d2-a049-566d489e406b","createdAt":"2025-05-12T09:02:23.1996569+00:00","payload":{"targets":[{"resourceId":"3fdac41c-af35-4df2-9871-a9f65f5d2964","locationId":"0309586d-2505-4704-b6f4-5da1a0774689"},{"resourceId":"1287e84f-9d64-45cb-a3f9-92742aedcc97","locationId":"6bc188c7-8024-442b-b400-07b4bf1c38b1"},{"resourceId":"1db873c5-9c47-4e98-b1db-858de8ff08ee","locationId":"99bbd1f1-f261-43ff-aeb5-68a9a7324064"},{"resourceId":"0803b51b-3f21-41e6-9e23-130eae0c3d1a","locationId":"4dcf85a4-5db1-4287-9adc-dad9bee557fa"},{"resourceId":"66dcf5b3-d78c-415e-9761-f6be1b2b8202","locationId":"0e126648-0ba3-4026-b77f-89795f9d9958"}],"priceCurveDelta":{"points":[{"price":909.739780742631000,"timestamp":"2025-05-13T00:00:00+00:00"},{"price":426.00680575256000,"timestamp":"2025-05-13T01:00:00+00:00"},{"price":700.361779307983000,"timestamp":"2025-05-13T02:00:00+00:00"},{"price":516.00721362714000,"timestamp":"2025-05-13T03:00:00+00:00"},{"price":529.777085142214000,"timestamp":"2025-05-13T04:00:00+00:00"},{"price":452.927711061968000,"timestamp":"2025-05-13T05:00:00+00:00"},{"price":32.9525081030795000,"timestamp":"2025-05-13T06:00:00+00:00"},{"price":340.761315114845000,"timestamp":"2025-05-13T07:00:00+00:00"},{"price":191.082412016693000,"timestamp":"2025-05-13T08:00:00+00:00"},{"price":997.058268550926000,"timestamp":"2025-05-13T09:00:00+00:00"},{"price":501.199230744628000,"timestamp":"2025-05-13T10:00:00+00:00"},{"price":723.096224680394000,"timestamp":"2025-05-13T11:00:00+00:00"},{"price":533.428023098844000,"timestamp":"2025-05-13T12:00:00+00:00"},{"price":572.837914883807000,"timestamp":"2025-05-13T13:00:00+00:00"},{"price":166.702550010527000,"timestamp":"2025-05-13T14:00:00+00:00"},{"price":136.716446023272000,"timestamp":"2025-05-13T15:00:00+00:00"},{"price":33.2803321817914000,"timestamp":"2025-05-13T16:00:00+00:00"},{"price":5.80651233821738000,"timestamp":"2025-05-13T17:00:00+00:00"},{"price":927.94048017597000,"timestamp":"2025-05-13T18:00:00+00:00"},{"price":306.888556042156000,"timestamp":"2025-05-13T19:00:00+00:00"},{"price":546.498712124874000,"timestamp":"2025-05-13T20:00:00+00:00"},{"price":981.627370026294000,"timestamp":"2025-05-13T21:00:00+00:00"},{"price":409.957452397188000,"timestamp":"2025-05-13T22:00:00+00:00"},{"price":542.204960422267000,"timestamp":"2025-05-13T23:00:00+00:00"}],"energyUnit":"kWh","currency":"NOK","resolution":"01:00:00"},"priceArea":"NO1","payloadType":"PriceCurve"}}],"pagination":{"totalRecords":4,"pageSize":4,"currentPage":1,"totalPages":1,"nextPage":null,"previousPage":null}}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/events/{eventId}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get Event By Id",
        "operationId": "GetEventById",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEventResponse"
                },
                "example": {"id":"88cf780b-4995-4397-bc16-bc51110b05b2","createdAt":"2025-05-12T09:02:23.258884+00:00","payload":{"targets":[{"resourceId":"acfd1ebb-a5c9-4fbb-a3c2-128f21710f1e","locationId":"fa56729c-2963-4ee1-8f24-40d13200807d"},{"resourceId":"d719acd4-397b-46f0-b14e-d2196dd39c7b","locationId":"41bd5409-7d17-46df-956a-05f42f270513"},{"resourceId":"1756e3a0-6e5a-4b9b-9e9c-465688b5aa28","locationId":"778898e4-bbe1-48df-ab02-d770f85c9a0d"},{"resourceId":"bcbf1762-fc77-4ed7-88c4-004c89c2b044","locationId":"bf6021aa-dead-4506-890d-b41b5901d55b"},{"resourceId":"6d87d97f-5f34-4486-ac7c-69601a65f695","locationId":"a2801e05-42a9-427b-a7a6-b853788c6c2b"}],"priceCurveDelta":{"points":[{"price":367.011563427617000,"timestamp":"2025-05-13T00:00:00+00:00"},{"price":989.02403611195000,"timestamp":"2025-05-13T01:00:00+00:00"},{"price":219.544040815552000,"timestamp":"2025-05-13T02:00:00+00:00"},{"price":942.634150317712000,"timestamp":"2025-05-13T03:00:00+00:00"},{"price":852.834501183957000,"timestamp":"2025-05-13T04:00:00+00:00"},{"price":942.196111982406000,"timestamp":"2025-05-13T05:00:00+00:00"},{"price":308.585637539818000,"timestamp":"2025-05-13T06:00:00+00:00"},{"price":803.164804918021000,"timestamp":"2025-05-13T07:00:00+00:00"},{"price":777.100499030334000,"timestamp":"2025-05-13T08:00:00+00:00"},{"price":420.839718845638000,"timestamp":"2025-05-13T09:00:00+00:00"},{"price":584.859029703632000,"timestamp":"2025-05-13T10:00:00+00:00"},{"price":972.701436099315000,"timestamp":"2025-05-13T11:00:00+00:00"},{"price":386.827202362266000,"timestamp":"2025-05-13T12:00:00+00:00"},{"price":995.000057232839000,"timestamp":"2025-05-13T13:00:00+00:00"},{"price":237.479795105668000,"timestamp":"2025-05-13T14:00:00+00:00"},{"price":675.131439962281000,"timestamp":"2025-05-13T15:00:00+00:00"},{"price":260.112581733406000,"timestamp":"2025-05-13T16:00:00+00:00"},{"price":633.248148609143000,"timestamp":"2025-05-13T17:00:00+00:00"},{"price":459.867819491298000,"timestamp":"2025-05-13T18:00:00+00:00"},{"price":642.075737599545000,"timestamp":"2025-05-13T19:00:00+00:00"},{"price":889.364167215438000,"timestamp":"2025-05-13T20:00:00+00:00"},{"price":996.730483249938000,"timestamp":"2025-05-13T21:00:00+00:00"},{"price":550.622892329812000,"timestamp":"2025-05-13T22:00:00+00:00"},{"price":146.770125745861000,"timestamp":"2025-05-13T23:00:00+00:00"}],"energyUnit":"kWh","currency":"NOK","resolution":"01:00:00"},"priceArea":"NO1","payloadType":"PriceCurve"}}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/reports": {
      "post": {
        "tags": [
          "Reports"
        ],
        "summary": "Create a report",
        "operationId": "PostReport",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostReportRequest"
              },
              "example": {"eventId":"c63d7de9-43c8-4a04-8a0f-1efaab1b6e01","payloads":[{"resourceId":"dfc7bbcb-cfa0-4380-a14a-435e3d5da0ea","locationId":null,"meterPointId":null,"points":[{"timestamp":"2025-05-12T09:02:23.2722463+00:00","kiloWattHours":3.14}],"resolution":"01:00:00","curvePoints":null,"payloadType":"EnergyUsage"}]}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetReportResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/resources/{resourceId}": {
      "get": {
        "tags": [
          "Resources"
        ],
        "summary": "Get Resource by Id",
        "operationId": "GetResourceById",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetResourceResponse"
                },
                "example": {"resourceId":"dfc7bbcb-cfa0-4380-a14a-435e3d5da0ea","resourceType":"HotWaterTank","userId":"c61668fd-c0f3-4a41-8d6e-73c7385bbd64","locationId":"575c18ab-3f9b-4b2c-9329-6994507c437d","meterPointId":null}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Resources"
        ],
        "summary": "Delete Resource",
        "description": "Returns 204 No Content if the resource was deleted successfully.\nReturns 404 Not Found if the resource to delete does not exist.",
        "operationId": "DeleteResourceById",
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/simulation/events/pricecurve": {
      "post": {
        "tags": [
          "Simulation | Events"
        ],
        "summary": "Simulate Price Curve Event",
        "description": "Creates a `PriceCurve` event in the system using the given parameters.\nThe event will be sent to all webhooks that subscribe to the given type of event.\n\n- If the `targets` parameter is not specified, simulated resources and locations will be targeted instead if any exist.\n\n- If the `priceArea` parameter is not specified, a random price area will be selected.\n\n- If the `priceCurveDelta` parameter is not specified, a random price curve delta will be created.",
        "operationId": "PostPriceCurveSimulation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulatePriceCurveEventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulateEventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/simulation/events/usereligibility": {
      "post": {
        "tags": [
          "Simulation | Events"
        ],
        "summary": "Simulate User Eligibility Event",
        "description": "Creates a `UserEligibility` event in the system using the given parameters.\nThe event will be sent to all webhooks that subscribe to the given type of event.\n\nThis event does not affect the eligibility of any users. It is only used to simulate the event.\n\nFor actual events, you can call the /users/eligible endpoint to check\nwhich users are eligible.",
        "operationId": "PostUserEligibilitySimulation",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulateEventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/simulation/events/lpc/locations": {
      "post": {
        "tags": [
          "Simulation | Events"
        ],
        "summary": "Simulate LPC Location Event",
        "description": "Creates a `LocationLPC` event in the system using the given parameters.\nThe event will be sent to all webhooks that subscribe to the given type of event.\n\n- If the `locations` parameter is not specified, random locations will be targeted if any exist.\n\n- If the `points` parameter is not specified, a random points array with maximum power will be generated.",
        "operationId": "PostLPCLocationSimulation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateLocationLPCEventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulateEventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/simulation/events/lpc/resources": {
      "post": {
        "tags": [
          "Simulation | Events"
        ],
        "summary": "Simulate LPC Resource Event",
        "description": "Creates a `ResourceLPC` event in the system using the given parameters.\nThe event will be sent to all webhooks that subscribe to the given type of event.\n\n- If the `resources` parameter is not specified, random resources at locations will be targeted if any exist.\n\n- If the `points` parameter is not specified, a random points array with maximum power will be generated.",
        "operationId": "PostLPCResourceSimulation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimulateResourceLPCEventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimulateEventResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/simulation/partner": {
      "post": {
        "tags": [
          "Simulation | Partner data"
        ],
        "summary": "Simulate DER-Partner Data",
        "description": "Creates simulated data with users, vehicles, locations and resources.",
        "operationId": "PostTenantDataSimulation",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Simulation | Partner data"
        ],
        "summary": "Cleanup Simulation Data",
        "description": "Deletes all simulation data from the system. This includes users, vehicles, locations and resources.",
        "operationId": "DeleteTenantDataSimulation",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get Users",
        "description": "Get all users. Maximum pageSize is 1000.",
        "operationId": "GetUsers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUsersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a User",
        "operationId": "PostUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostUserRequest"
              },
              "example": {"userId":"c61668fd-c0f3-4a41-8d6e-73c7385bbd64"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserResponse"
                },
                "example": {"userId":"c61668fd-c0f3-4a41-8d6e-73c7385bbd64"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Get User by Id",
        "operationId": "GetUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserResponse"
                },
                "example": {"userId":"c61668fd-c0f3-4a41-8d6e-73c7385bbd64"}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Delete User",
        "description": "Returns 204 No Content if the user was deleted successfully.\nReturns 404 Not Found if the user to delete does not exist.",
        "operationId": "DeleteUserById",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/batch": {
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create Multiple Users",
        "operationId": "PostUsers",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostUsersBatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostUsersBatchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/locations": {
      "get": {
        "tags": [
          "User Locations"
        ],
        "summary": "Get A User's Locations",
        "operationId": "GetLocationsByUserId",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetLocationResponse"
                  }
                },
                "example": [{"locationId":"575c18ab-3f9b-4b2c-9329-6994507c437d","locationType":"Residential","coordinates":null,"meterPointId":"e3afe58d-9301-4a7d-a316-c6706b7aac37","meterPointIds":["e3afe58d-9301-4a7d-a316-c6706b7aac37"],"userId":"c61668fd-c0f3-4a41-8d6e-73c7385bbd64"}]
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User Locations"
        ],
        "summary": "Create User Location",
        "operationId": "PostLocation",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostLocationRequest"
              },
              "example": {"locationId":"575c18ab-3f9b-4b2c-9329-6994507c437d","locationType":"Residential","coordinates":null,"meterPointId":null,"meterPointIds":["e3afe58d-9301-4a7d-a316-c6706b7aac37"]}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationResponse"
                },
                "example": {"locationId":"575c18ab-3f9b-4b2c-9329-6994507c437d","locationType":"Residential","coordinates":null,"meterPointId":null,"meterPointIds":[],"userId":"c61668fd-c0f3-4a41-8d6e-73c7385bbd64"}
              }
            }
          },
          "409": {
            "description": "Conflict"
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/locations/{locationId}": {
      "get": {
        "tags": [
          "User Locations"
        ],
        "summary": "Get User Location By Location Id",
        "operationId": "GetLocationByLocationId",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationResponse"
                },
                "example": {"locationId":"575c18ab-3f9b-4b2c-9329-6994507c437d","locationType":"Residential","coordinates":null,"meterPointId":null,"meterPointIds":[],"userId":"c61668fd-c0f3-4a41-8d6e-73c7385bbd64"}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "User Locations"
        ],
        "summary": "Update User Location",
        "operationId": "UpdateLocation",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutLocationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationResponse"
                },
                "example": {"locationId":"575c18ab-3f9b-4b2c-9329-6994507c437d","locationType":"Residential","coordinates":null,"meterPointId":null,"meterPointIds":[],"userId":"c61668fd-c0f3-4a41-8d6e-73c7385bbd64"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "patch": {
        "tags": [
          "User Locations"
        ],
        "summary": "Patch User Location",
        "operationId": "PatchLocation",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchLocationRequest"
              },
              "example": {"locationType":null,"coordinates":{"latitude":78.22094240482632,"longitude":15.619465054484257},"meterPointIds":null}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationResponse"
                },
                "example": {"locationId":"575c18ab-3f9b-4b2c-9329-6994507c437d","locationType":"Residential","coordinates":null,"meterPointId":null,"meterPointIds":[],"userId":"c61668fd-c0f3-4a41-8d6e-73c7385bbd64"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        }
      },
      "delete": {
        "tags": [
          "User Locations"
        ],
        "summary": "Delete User Location",
        "description": "Returns 204 No Content if the location was deleted successfully.\nReturns 404 Not Found if the location to delete does not exist.",
        "operationId": "DeleteLocation",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/locations/batch": {
      "post": {
        "tags": [
          "User Locations"
        ],
        "summary": "Create Multiple User Locations",
        "description": "Create multiple locations for several users at once.\n\"The request body should be an array of objects, each containing a user id and a create location request.",
        "operationId": "PostLocations",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostLocationsBatchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PostLocationsBatchResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/vehicles": {
      "post": {
        "tags": [
          "User Resources"
        ],
        "summary": "Create Vehicle Resource",
        "operationId": "PostVehicle",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostVehicleResourceRequest"
              },
              "example": {"resourceId":"53c6d38b-8bf4-484c-9935-13b4bff677cc","resourceType":"Vehicle"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetResourceResponse"
                },
                "example": {"resourceId":"dfc7bbcb-cfa0-4380-a14a-435e3d5da0ea","resourceType":"HotWaterTank","userId":"c61668fd-c0f3-4a41-8d6e-73c7385bbd64","locationId":"575c18ab-3f9b-4b2c-9329-6994507c437d","meterPointId":null}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/resources": {
      "get": {
        "tags": [
          "User Resources"
        ],
        "summary": "Get a User's Resources",
        "description": "Get all resources registered to a user. Returns both location bound resources and vehicles.",
        "operationId": "GetResourcesForUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserResourcesResponse"
                },
                "example": {"resources":[{"resourceId":"dfc7bbcb-cfa0-4380-a14a-435e3d5da0ea","resourceType":"HotWaterTank","userId":"c61668fd-c0f3-4a41-8d6e-73c7385bbd64","locationId":"575c18ab-3f9b-4b2c-9329-6994507c437d","meterPointId":null},{"resourceId":"53c6d38b-8bf4-484c-9935-13b4bff677cc","resourceType":"Vehicle","userId":"c61668fd-c0f3-4a41-8d6e-73c7385bbd64","locationId":null,"meterPointId":null}]}
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/{userId}/locations/{locationId}/resources": {
      "get": {
        "tags": [
          "User Resources | Location-bound"
        ],
        "summary": "Get Location Bound Resources",
        "description": "Get all resources registered at a location.",
        "operationId": "GetLocationBoundResources",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GetLocationBoundResourceResponse"
                  }
                },
                "example": [{"resourceId":"dfc7bbcb-cfa0-4380-a14a-435e3d5da0ea","resourceType":"HotWaterTank","locationId":"575c18ab-3f9b-4b2c-9329-6994507c437d","userId":"c61668fd-c0f3-4a41-8d6e-73c7385bbd64","meterPointId":null},{"resourceId":"c73deda3-3d54-4509-8637-85e901c9eadb","resourceType":"Charger","locationId":"575c18ab-3f9b-4b2c-9329-6994507c437d","userId":"c61668fd-c0f3-4a41-8d6e-73c7385bbd64","meterPointId":null}]
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "post": {
        "tags": [
          "User Resources | Location-bound"
        ],
        "summary": "Create Location Bound Resource",
        "description": "Create a resource at a location.",
        "operationId": "PostLocationBoundResource",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "locationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostLocationBoundResourceRequest"
              },
              "example": {"meterPointId":"e3afe58d-9301-4a7d-a316-c6706b7aac37","resourceId":"dfc7bbcb-cfa0-4380-a14a-435e3d5da0ea","resourceType":"HotWaterTank"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetLocationBoundResourceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/enrollment": {
      "get": {
        "tags": [
          "User Spark Program"
        ],
        "summary": "Get User Enrollment",
        "description": "Get a user's enrollment status.\nAlso returns when the user was enrolled.",
        "operationId": "GetUserEnrollmentByUserId",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserEnrollmentResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "User Spark Program"
        ],
        "summary": "Enroll User",
        "description": "Enroll a user into the SPARK Program",
        "operationId": "PostUserEnrollment",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserEnrollmentResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "User Spark Program"
        ],
        "summary": "Delete User Enrollment",
        "description": "Remove a user from the SPARK Program",
        "operationId": "DeleteUserEnrollment",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/eligibility": {
      "get": {
        "tags": [
          "User Spark Program"
        ],
        "summary": "Get User Eligibility",
        "description": "Check if a user is eligible for the SPARK Program",
        "operationId": "GetUserEligibilityByUserId",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserEligibilityResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/users/eligible": {
      "get": {
        "tags": [
          "User Spark Program"
        ],
        "summary": "Get Eligible Users",
        "description": "Get all users who are eligible for the SPARK Program. Maximum pageSize is 1000.",
        "operationId": "GetEligibleUsers",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetEligibleUsersResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userId}/compensation": {
      "get": {
        "tags": [
          "User Spark Program"
        ],
        "summary": "Will fetch the total compensation per location the user has for the current month",
        "operationId": "FetchUserCompensation",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetUserCompensationForCurrentMonthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/meters/{mpid}/eligible": {
      "get": {
        "tags": [
          "User Spark Program"
        ],
        "summary": "Check if MeterPoint id eligible for Spark",
        "description": "Indicates whether or not the given MeterPoint is currently eligible for the Spark program",
        "operationId": "GetMpidEligibility",
        "parameters": [
          {
            "name": "mpid",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMpidEligibilityResponse"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get All Webhooks",
        "operationId": "GetWebhooks",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWebhooksResponse"
                },
                "example": {"webhooks":[{"webhookId":"99bdb59c-828e-4b15-bb1d-e6e3b796ac2c","webhookUrl":"https://example.com/api","name":"Example Webhook","notificationTypes":["PriceCurveCreated"],"enabled":true,"status":"Healthy","modifiedDate":"2025-05-12T09:02:23.3174028+00:00","createdDate":"2025-05-12T09:02:23.3173768+00:00","lastAnalyzedTimestamp":"2025-05-12T09:02:23.3174197+00:00"}]}
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Create a Webhook",
        "operationId": "PostWebhook",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PostWebhookRequest"
              },
              "example": {"name":"Example Webhook","webhookSecret":"CMJ0PqrOtGIat7j","webhookUrl":"https://example.com/api","notificationTypes":["PriceCurveCreated","UserEligibilityUpdated","LocationLPCRequested","ResourceLPCRequested"]}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWebhookResponse"
                },
                "example": {"webhookId":"99bdb59c-828e-4b15-bb1d-e6e3b796ac2c","webhookUrl":"https://example.com/api","name":"Example Webhook","notificationTypes":["PriceCurveCreated"],"enabled":true,"status":"Healthy","modifiedDate":"2025-05-12T09:02:23.3563246+00:00","createdDate":"2025-05-12T09:02:23.3563218+00:00","lastAnalyzedTimestamp":"2025-05-12T09:02:23.3563247+00:00"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/{webhookId}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get a Webhook by Id",
        "operationId": "GetWebhookById",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWebhookResponse"
                },
                "example": {"webhookId":"99bdb59c-828e-4b15-bb1d-e6e3b796ac2c","webhookUrl":"https://example.com/api","name":"Example Webhook","notificationTypes":["PriceCurveCreated"],"enabled":true,"status":"Healthy","modifiedDate":"2025-05-12T09:02:23.3570298+00:00","createdDate":"2025-05-12T09:02:23.3570281+00:00","lastAnalyzedTimestamp":"2025-05-12T09:02:23.357031+00:00"}
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update a Webhook",
        "operationId": "UpdateWebhookById",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PutWebhookRequest"
              },
              "example": {"webhookSecret":"New secret","webhookUrl":"https://new-example.com/api/v2/","notificationTypes":["PriceCurveCreated"],"enabled":true,"name":"New name"}
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWebhookResponse"
                },
                "example": {"webhookId":"99bdb59c-828e-4b15-bb1d-e6e3b796ac2c","webhookUrl":"https://example.com/api","name":"Example Webhook","notificationTypes":["PriceCurveCreated"],"enabled":true,"status":"Healthy","modifiedDate":"2025-05-12T09:02:23.3589951+00:00","createdDate":"2025-05-12T09:02:23.3589936+00:00","lastAnalyzedTimestamp":"2025-05-12T09:02:23.3589952+00:00"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Delete a webhook",
        "description": "Returns 204 No Content if the webhook was deleted successfully.\nReturns 404 Not Found if the webhook to delete does not exist.",
        "operationId": "DeleteWebhookById",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Update individual fields of a Webhook",
        "operationId": "PatchWebhookById",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchWebhookRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWebhookResponse"
                },
                "example": {"webhookId":"99bdb59c-828e-4b15-bb1d-e6e3b796ac2c","webhookUrl":"https://example.com/api","name":"Example Webhook","notificationTypes":["PriceCurveCreated"],"enabled":true,"status":"Healthy","modifiedDate":"2025-05-12T09:02:23.3599+00:00","createdDate":"2025-05-12T09:02:23.3598976+00:00","lastAnalyzedTimestamp":"2025-05-12T09:02:23.3599001+00:00"}
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/webhooks/{webhookId}/enabled": {
      "put": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Enable or Disable a Webhook",
        "operationId": "UpdateWebhookEnabledById",
        "parameters": [
          {
            "name": "webhookId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": { }
            }
          },
          "204": {
            "description": "No Content"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/webhooks/logs": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get all webhook notification logs",
        "operationId": "GetWebhookNotificationLogs",
        "parameters": [
          {
            "name": "webhookId",
            "in": "query",
            "schema": {
              "$ref": "#/components/schemas/WebhookId"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWebhookNotificationLogsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/webhooks/logs/{notificationId}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "summary": "Get a webhook notification log by notification id",
        "operationId": "GetWebhookNotificationLogById",
        "parameters": [
          {
            "name": "notificationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetWebhookNotificationLogByIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/problem+json": {
                "schema": {
                  "$ref": "#/components/schemas/HttpValidationProblemDetails"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ApiPagination": {
        "required": [
          "currentPage",
          "pageSize",
          "totalRecords"
        ],
        "type": "object",
        "properties": {
          "totalRecords": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "currentPage": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "nextPage": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          },
          "previousPage": {
            "type": "integer",
            "format": "int32",
            "nullable": true,
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "Coordinate": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "format": "double"
          },
          "longitude": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "Currency": {
        "enum": [
          "NOK",
          "EUR",
          "SEK",
          "DKK"
        ],
        "type": "string"
      },
      "EnergyCurvePoint": {
        "required": [
          "kiloWattHours",
          "timestamp"
        ],
        "type": "object",
        "properties": {
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "kiloWattHours": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "EnergyUnit": {
        "enum": [
          "kWh",
          "MWh"
        ],
        "type": "string"
      },
      "EnergyUsageReportPayload": {
        "required": [
          "resolution",
          "resourceId"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkReportPayload"
          }
        ],
        "properties": {
          "resourceId": {
            "type": "string"
          },
          "locationId": {
            "type": "string",
            "nullable": true
          },
          "meterPointId": {
            "type": "string",
            "nullable": true
          },
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnergyCurvePoint"
            }
          },
          "resolution": {
            "type": "string",
            "format": "time-span",
            "example": "02:00:00"
          },
          "curvePoints": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnergyCurvePoint"
            },
            "nullable": true,
            "deprecated": true
          }
        },
        "additionalProperties": false
      },
      "EventId": {
        "type": "string"
      },
      "EventNotification": {
        "required": [
          "eventCreatedAtUtc",
          "eventId",
          "notificationId",
          "notificationSentUtc",
          "notificationType",
          "payload"
        ],
        "type": "object",
        "properties": {
          "notificationId": {
            "$ref": "#/components/schemas/NotificationId"
          },
          "eventId": {
            "type": "string"
          },
          "eventCreatedAtUtc": {
            "type": "string",
            "format": "date-time"
          },
          "notificationSentUtc": {
            "type": "string",
            "format": "date-time"
          },
          "notificationType": {
            "$ref": "#/components/schemas/NotificationType"
          },
          "payload": {
            "$ref": "#/components/schemas/SparkEventPayload"
          }
        },
        "additionalProperties": false
      },
      "GetEligibleUsersResponse": {
        "required": [
          "pagination"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/ApiPagination"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetUserResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "GetEventResponse": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "payload": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PriceCurvePayload"
              },
              {
                "$ref": "#/components/schemas/UserEligibilityPayload"
              },
              {
                "$ref": "#/components/schemas/LocationLPCPayload"
              },
              {
                "$ref": "#/components/schemas/ResourceLPCPayload"
              },
              {
                "$ref": "#/components/schemas/LPCReservationPayload"
              }
            ]
          },
          "id": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "GetEventsResponse": {
        "required": [
          "pagination"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/ApiPagination"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetEventResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "GetLocationBoundResourceResponse": {
        "required": [
          "locationId",
          "resourceId",
          "resourceType",
          "userId"
        ],
        "type": "object",
        "properties": {
          "resourceId": {
            "type": "string"
          },
          "resourceType": {
            "$ref": "#/components/schemas/ResourceType"
          },
          "locationId": {
            "type": "string"
          },
          "userId": {
            "type": "string"
          },
          "meterPointId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetLocationResponse": {
        "required": [
          "locationId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string"
          },
          "locationType": {
            "$ref": "#/components/schemas/LocationType"
          },
          "coordinates": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "meterPointId": {
            "type": "string",
            "nullable": true,
            "readOnly": true,
            "deprecated": true
          },
          "meterPointIds": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "userId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetMpidEligibilityResponse": {
        "required": [
          "isEligible",
          "meterPointId"
        ],
        "type": "object",
        "properties": {
          "meterPointId": {
            "type": "string"
          },
          "isEligible": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GetReportResponse": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "GetResourceResponse": {
        "required": [
          "resourceId",
          "resourceType",
          "userId"
        ],
        "type": "object",
        "properties": {
          "resourceId": {
            "type": "string"
          },
          "resourceType": {
            "$ref": "#/components/schemas/ResourceType"
          },
          "userId": {
            "type": "string"
          },
          "locationId": {
            "type": "string",
            "nullable": true
          },
          "meterPointId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetUserCompensationForCurrentMonthResponse": {
        "required": [
          "period"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "$ref": "#/components/schemas/UserId"
          },
          "period": {
            "$ref": "#/components/schemas/Period"
          },
          "locationCompensations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationCompensation"
            }
          }
        },
        "additionalProperties": false
      },
      "GetUserEligibilityResponse": {
        "required": [
          "isEligible",
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          },
          "isEligible": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "GetUserEnrollmentResponse": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "isEnrolled": {
            "type": "boolean",
            "readOnly": true
          },
          "userId": {
            "type": "string"
          },
          "enrollmentId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "enrollmentDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "GetUserResourcesResponse": {
        "required": [
          "resources"
        ],
        "type": "object",
        "properties": {
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetResourceResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "GetUserResponse": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetUsersResponse": {
        "required": [
          "pagination"
        ],
        "type": "object",
        "properties": {
          "pagination": {
            "$ref": "#/components/schemas/ApiPagination"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetUserResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "GetWebhookNotificationLogByIdResponse": {
        "type": "object",
        "properties": {
          "webhookNotificationLog": {
            "$ref": "#/components/schemas/WebhookNotificationLog"
          },
          "notificationContent": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "GetWebhookNotificationLogsResponse": {
        "type": "object",
        "properties": {
          "webhookNotificationLogs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WebhookNotificationLog"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/ApiPagination"
          }
        },
        "additionalProperties": false
      },
      "GetWebhookResponse": {
        "required": [
          "webhookId",
          "webhookUrl"
        ],
        "type": "object",
        "properties": {
          "webhookId": {
            "type": "string"
          },
          "webhookUrl": {
            "type": "string"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "notificationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationType"
            }
          },
          "enabled": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/WebhookStatus"
          },
          "modifiedDate": {
            "type": "string",
            "format": "date-time"
          },
          "createdDate": {
            "type": "string",
            "format": "date-time"
          },
          "lastAnalyzedTimestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "GetWebhooksResponse": {
        "required": [
          "webhooks"
        ],
        "type": "object",
        "properties": {
          "webhooks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetWebhookResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "HttpValidationProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": { }
      },
      "LPCDataPoint": {
        "type": "object",
        "properties": {
          "maxPowerInKiloWatts": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "LPCLocation": {
        "required": [
          "locationId",
          "meterPointId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          },
          "meterPointId": {
            "$ref": "#/components/schemas/MeterPointId"
          }
        },
        "additionalProperties": false
      },
      "LPCLocationTarget": {
        "type": "object",
        "properties": {
          "location": {
            "$ref": "#/components/schemas/LocationTarget"
          },
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCDataPoint"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LPCReservationPayload": {
        "required": [
          "payloadType",
          "targets"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkEventPayload"
          }
        ],
        "properties": {
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationLPCTarget"
            }
          }
        },
        "additionalProperties": false
      },
      "LPCResource": {
        "required": [
          "locationId",
          "meterPointId",
          "resourceId"
        ],
        "type": "object",
        "properties": {
          "meterPointId": {
            "$ref": "#/components/schemas/MeterPointId"
          },
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          },
          "resourceId": {
            "$ref": "#/components/schemas/ResourceId"
          }
        },
        "additionalProperties": false
      },
      "LPCResourceTarget": {
        "type": "object",
        "properties": {
          "resource": {
            "$ref": "#/components/schemas/ResourceTarget"
          },
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCDataPoint"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LocationCompensation": {
        "type": "object",
        "properties": {
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          },
          "meterPointIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MeterPointId"
            }
          },
          "activeAmount": {
            "type": "number",
            "format": "double"
          },
          "blockedAmount": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "problems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Problem"
            }
          }
        },
        "additionalProperties": false
      },
      "LocationEnergyUsagePlanReportPayload": {
        "required": [
          "baseline",
          "flexibility",
          "locationId",
          "meterPointId",
          "resolution"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkReportPayload"
          }
        ],
        "properties": {
          "locationId": {
            "type": "string"
          },
          "meterPointId": {
            "type": "string"
          },
          "resolution": {
            "type": "string",
            "format": "time-span",
            "example": "02:00:00"
          },
          "baseline": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnergyCurvePoint"
            }
          },
          "flexibility": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnergyCurvePoint"
            }
          }
        },
        "additionalProperties": false
      },
      "LocationEnergyUsageReportPayload": {
        "required": [
          "locationId",
          "meterPointId",
          "resolution"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkReportPayload"
          }
        ],
        "properties": {
          "locationId": {
            "type": "string"
          },
          "meterPointId": {
            "type": "string"
          },
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EnergyCurvePoint"
            }
          },
          "resolution": {
            "type": "string",
            "format": "time-span",
            "example": "02:00:00"
          }
        },
        "additionalProperties": false
      },
      "LocationId": {
        "type": "string"
      },
      "LocationLPCAcknowledgmentReportPayload": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkReportPayload"
          }
        ],
        "properties": {
          "acknowledgedTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCLocation"
            }
          },
          "declinedTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCLocation"
            }
          }
        },
        "additionalProperties": false
      },
      "LocationLPCPayload": {
        "required": [
          "payloadType",
          "targets"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkEventPayload"
          }
        ],
        "properties": {
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationLPCTarget"
            }
          }
        },
        "additionalProperties": false
      },
      "LocationLPCTarget": {
        "required": [
          "locationId",
          "meterPointId",
          "points",
          "resolution"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          },
          "meterPointId": {
            "$ref": "#/components/schemas/MeterPointId"
          },
          "resolution": {
            "type": "string",
            "format": "time-span",
            "example": "02:00:00"
          },
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCDataPoint"
            }
          }
        },
        "additionalProperties": false
      },
      "LocationTarget": {
        "type": "object",
        "properties": {
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          },
          "meterPointId": {
            "$ref": "#/components/schemas/MeterPointId"
          }
        },
        "additionalProperties": false
      },
      "LocationType": {
        "enum": [
          "Unknown",
          "Residential",
          "Commercial",
          "Other"
        ],
        "type": "string"
      },
      "MeterPointId": {
        "type": "string"
      },
      "NotificationId": {
        "type": "string"
      },
      "NotificationType": {
        "enum": [
          "Unknown",
          "PriceCurveCreated",
          "UserEligibilityUpdated",
          "LocationLPCRequested",
          "ResourceLPCRequested",
          "LPCReservationCreated"
        ],
        "type": "string"
      },
      "PatchLocationRequest": {
        "type": "object",
        "properties": {
          "locationType": {
            "$ref": "#/components/schemas/LocationType"
          },
          "coordinates": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "meterPointIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PatchWebhookRequest": {
        "type": "object",
        "properties": {
          "webhookSecret": {
            "type": "string",
            "nullable": true
          },
          "webhookUrl": {
            "type": "string",
            "nullable": true
          },
          "notificationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationType"
            },
            "nullable": true
          },
          "enabled": {
            "type": "boolean",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "Period": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "format": "date"
          },
          "to": {
            "type": "string",
            "format": "date"
          }
        },
        "additionalProperties": false
      },
      "PostLocationBoundResourceRequest": {
        "required": [
          "resourceId",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "resourceId": {
            "type": "string"
          },
          "resourceType": {
            "$ref": "#/components/schemas/ResourceType"
          },
          "meterPointId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostLocationRequest": {
        "required": [
          "locationId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string"
          },
          "locationType": {
            "$ref": "#/components/schemas/LocationType"
          },
          "coordinates": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "meterPointId": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "meterPointIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PostLocationWithUserRequest": {
        "required": [
          "locationId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string"
          },
          "locationType": {
            "$ref": "#/components/schemas/LocationType"
          },
          "coordinates": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "meterPointId": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "meterPointIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "userId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PostLocationsBatchRequest": {
        "required": [
          "locations"
        ],
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostLocationWithUserRequest"
            }
          }
        },
        "additionalProperties": false
      },
      "PostLocationsBatchResponse": {
        "required": [
          "locations"
        ],
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetLocationResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "PostReportRequest": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "nullable": true
          },
          "payloads": {
            "type": "array",
            "items": {
              "oneOf": [
                {
                  "$ref": "#/components/schemas/EnergyUsageReportPayload"
                },
                {
                  "$ref": "#/components/schemas/LocationEnergyUsageReportPayload"
                },
                {
                  "$ref": "#/components/schemas/ResourceLPCAcknowledgmentReportPayload"
                },
                {
                  "$ref": "#/components/schemas/LocationLPCAcknowledgmentReportPayload"
                },
                {
                  "$ref": "#/components/schemas/LocationEnergyUsagePlanReportPayload"
                }
              ]
            }
          }
        },
        "additionalProperties": false
      },
      "PostUserRequest": {
        "required": [
          "userId"
        ],
        "type": "object",
        "properties": {
          "userId": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "PostUsersBatchRequest": {
        "required": [
          "users"
        ],
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PostUserRequest"
            }
          }
        },
        "additionalProperties": false
      },
      "PostUsersBatchResponse": {
        "required": [
          "users"
        ],
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GetUserResponse"
            }
          }
        },
        "additionalProperties": false
      },
      "PostVehicleResourceRequest": {
        "required": [
          "resourceId",
          "resourceType"
        ],
        "type": "object",
        "properties": {
          "resourceId": {
            "type": "string"
          },
          "resourceType": {
            "$ref": "#/components/schemas/ResourceType"
          }
        },
        "additionalProperties": false
      },
      "PostWebhookRequest": {
        "required": [
          "webhookUrl"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "webhookSecret": {
            "type": "string",
            "nullable": true
          },
          "webhookUrl": {
            "type": "string"
          },
          "notificationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationType"
            }
          }
        },
        "additionalProperties": false
      },
      "PriceArea": {
        "enum": [
          "Unknown",
          "NO1",
          "NO2",
          "NO3",
          "NO4",
          "NO5",
          "FI",
          "DK1",
          "DK2",
          "SE1",
          "SE2",
          "SE3",
          "SE4"
        ],
        "type": "string"
      },
      "PriceCurve": {
        "type": "object",
        "properties": {
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceCurvePoint"
            }
          },
          "energyUnit": {
            "$ref": "#/components/schemas/EnergyUnit"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "resolution": {
            "type": "string",
            "format": "time-span",
            "example": "02:00:00"
          }
        },
        "additionalProperties": false
      },
      "PriceCurvePayload": {
        "required": [
          "payloadType",
          "priceArea",
          "priceCurveDelta",
          "targets"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkEventPayload"
          }
        ],
        "properties": {
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceCurveTarget"
            }
          },
          "priceCurveDelta": {
            "$ref": "#/components/schemas/PriceCurve"
          },
          "priceArea": {
            "$ref": "#/components/schemas/PriceArea"
          }
        },
        "additionalProperties": false
      },
      "PriceCurvePoint": {
        "type": "object",
        "properties": {
          "price": {
            "type": "number",
            "format": "double"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "PriceCurveTarget": {
        "required": [
          "locationId",
          "resourceId"
        ],
        "type": "object",
        "properties": {
          "resourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          }
        },
        "additionalProperties": false
      },
      "Problem": {
        "required": [
          "message"
        ],
        "type": "object",
        "properties": {
          "problemType": {
            "$ref": "#/components/schemas/ProblemType"
          },
          "message": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ProblemType": {
        "enum": [
          "MissingMpidOnLocation",
          "CompensationMpidDoesNotMatchLocation"
        ],
        "type": "string"
      },
      "PutLocationRequest": {
        "required": [
          "locationId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "string"
          },
          "locationType": {
            "$ref": "#/components/schemas/LocationType"
          },
          "coordinates": {
            "$ref": "#/components/schemas/Coordinate"
          },
          "meterPointId": {
            "type": "string",
            "nullable": true,
            "deprecated": true
          },
          "meterPointIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PutWebhookRequest": {
        "required": [
          "webhookUrl"
        ],
        "type": "object",
        "properties": {
          "webhookSecret": {
            "type": "string",
            "nullable": true
          },
          "webhookUrl": {
            "type": "string"
          },
          "notificationTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NotificationType"
            }
          },
          "enabled": {
            "type": "boolean"
          },
          "name": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ResourceId": {
        "type": "string"
      },
      "ResourceLPCAcknowledgmentReportPayload": {
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkReportPayload"
          }
        ],
        "properties": {
          "acknowledgedTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCResource"
            }
          },
          "declinedTargets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCResource"
            }
          }
        },
        "additionalProperties": false
      },
      "ResourceLPCPayload": {
        "required": [
          "payloadType",
          "targets"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkEventPayload"
          }
        ],
        "properties": {
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResourceLPCTarget"
            }
          }
        },
        "additionalProperties": false
      },
      "ResourceLPCTarget": {
        "required": [
          "locationId",
          "meterPointId",
          "points",
          "resolution",
          "resourceId"
        ],
        "type": "object",
        "properties": {
          "meterPointId": {
            "$ref": "#/components/schemas/MeterPointId"
          },
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          },
          "resourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "resolution": {
            "type": "string",
            "format": "time-span",
            "example": "02:00:00"
          },
          "points": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCDataPoint"
            }
          }
        },
        "additionalProperties": false
      },
      "ResourceTarget": {
        "type": "object",
        "properties": {
          "locationId": {
            "$ref": "#/components/schemas/LocationId"
          },
          "resourceId": {
            "$ref": "#/components/schemas/ResourceId"
          },
          "meterPointId": {
            "$ref": "#/components/schemas/MeterPointId"
          }
        },
        "additionalProperties": false
      },
      "ResourceType": {
        "enum": [
          "Generic",
          "Vehicle",
          "Charger",
          "HotWaterTank",
          "HVAC",
          "SolarInverter"
        ],
        "type": "string"
      },
      "SimulateEventResponse": {
        "type": "object",
        "properties": {
          "simulatedEvent": {
            "$ref": "#/components/schemas/GetEventResponse"
          }
        },
        "additionalProperties": false
      },
      "SimulateLocationLPCEventRequest": {
        "type": "object",
        "properties": {
          "locations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCLocationTarget"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SimulatePriceCurveEventRequest": {
        "type": "object",
        "properties": {
          "targets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PriceCurveTarget"
            },
            "nullable": true
          },
          "priceCurveDelta": {
            "$ref": "#/components/schemas/PriceCurve"
          },
          "priceArea": {
            "$ref": "#/components/schemas/PriceArea"
          }
        },
        "additionalProperties": false
      },
      "SimulateResourceLPCEventRequest": {
        "type": "object",
        "properties": {
          "resources": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LPCResourceTarget"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SparkEventPayload": {
        "required": [
          "payloadType"
        ],
        "type": "object",
        "properties": {
          "payloadType": {
            "$ref": "#/components/schemas/SparkEventPayloadType"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "payloadType",
          "mapping": {
            "PriceCurve": "#/components/schemas/PriceCurvePayload",
            "UserEligibility": "#/components/schemas/UserEligibilityPayload",
            "LocationLPC": "#/components/schemas/LocationLPCPayload",
            "ResourceLPC": "#/components/schemas/ResourceLPCPayload",
            "LPCReservation": "#/components/schemas/LPCReservationPayload"
          }
        }
      },
      "SparkEventPayloadType": {
        "enum": [
          "Unknown",
          "UserEligibility",
          "PriceCurve",
          "LocationLPC",
          "ResourceLPC",
          "LPCReservation"
        ],
        "type": "string"
      },
      "SparkReportPayload": {
        "type": "object",
        "properties": {
          "payloadType": {
            "$ref": "#/components/schemas/SparkReportPayloadType"
          }
        },
        "additionalProperties": false,
        "discriminator": {
          "propertyName": "payloadType",
          "mapping": {
            "EnergyUsage": "#/components/schemas/EnergyUsageReportPayload",
            "LocationEnergyUsage": "#/components/schemas/LocationEnergyUsageReportPayload",
            "ResourceLPCAcknowledgement": "#/components/schemas/ResourceLPCAcknowledgmentReportPayload",
            "LocationLPCAcknowledgement": "#/components/schemas/LocationLPCAcknowledgmentReportPayload",
            "LocationEnergyUsagePlan": "#/components/schemas/LocationEnergyUsagePlanReportPayload"
          }
        }
      },
      "SparkReportPayloadType": {
        "enum": [
          "EnergyUsage",
          "LocationEnergyUsage",
          "LocationEnergyUsagePlan",
          "ResourceLPCAcknowledgement",
          "LocationLPCAcknowledgement"
        ],
        "type": "string"
      },
      "TenantId": {
        "type": "string"
      },
      "UserEligibilityPayload": {
        "required": [
          "addedUsers",
          "lastUpdated",
          "payloadType",
          "removedUsers"
        ],
        "type": "object",
        "allOf": [
          {
            "$ref": "#/components/schemas/SparkEventPayload"
          }
        ],
        "properties": {
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "addedUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "removedUsers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "additionalProperties": false
      },
      "UserId": {
        "type": "string"
      },
      "WebhookId": {
        "type": "string"
      },
      "WebhookNotificationLog": {
        "required": [
          "tenantId",
          "webhookId",
          "webhookUrl"
        ],
        "type": "object",
        "properties": {
          "webhookId": {
            "$ref": "#/components/schemas/WebhookId"
          },
          "tenantId": {
            "$ref": "#/components/schemas/TenantId"
          },
          "partnerEventId": {
            "$ref": "#/components/schemas/EventId"
          },
          "notificationId": {
            "$ref": "#/components/schemas/NotificationId"
          },
          "notificationType": {
            "$ref": "#/components/schemas/NotificationType"
          },
          "notificationSent": {
            "type": "string",
            "format": "date-time"
          },
          "sparkSignature": {
            "type": "string",
            "nullable": true
          },
          "webhookUrl": {
            "type": "string",
            "format": "uri"
          },
          "requestTimeout": {
            "type": "boolean"
          },
          "responseStatusCode": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "requestDurationMs": {
            "type": "integer",
            "format": "int64",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "WebhookStatus": {
        "enum": [
          "New",
          "Healthy",
          "Unhealthy",
          "TimeOut"
        ],
        "type": "string"
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "description": "Enter the JWT-token. Bearer will be prepended.",
        "scheme": "Bearer"
      }
    }
  },
  "security": [
    {
      "Bearer": [ ]
    }
  ]
}