/* tslint:disable */
/* eslint-disable */
/**
 * Energy Coordination API - Partner Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetLocationBoundResourceResponse,
  PostLocationBoundResourceRequest,
} from '../models/index';
import {
    GetLocationBoundResourceResponseFromJSON,
    GetLocationBoundResourceResponseToJSON,
    PostLocationBoundResourceRequestFromJSON,
    PostLocationBoundResourceRequestToJSON,
} from '../models/index';

export interface GetLocationBoundResourcesRequest {
    locationId: string;
    userId: string;
}

export interface PostLocationBoundResourceOperationRequest {
    userId: string;
    locationId: string;
    postLocationBoundResourceRequest: PostLocationBoundResourceRequest;
}

/**
 * 
 */
export class UserResourcesLocationBoundApi extends runtime.BaseAPI {

    /**
     * Get all resources registered at a location.
     * Get Location Bound Resources
     */
    async getLocationBoundResourcesRaw(requestParameters: GetLocationBoundResourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetLocationBoundResourceResponse>>> {
        if (requestParameters['locationId'] == null) {
            throw new runtime.RequiredError(
                'locationId',
                'Required parameter "locationId" was null or undefined when calling getLocationBoundResources().'
            );
        }

        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getLocationBoundResources().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{userId}/locations/{locationId}/resources`.replace(`{${"locationId"}}`, encodeURIComponent(String(requestParameters['locationId']))).replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetLocationBoundResourceResponseFromJSON));
    }

    /**
     * Get all resources registered at a location.
     * Get Location Bound Resources
     */
    async getLocationBoundResources(requestParameters: GetLocationBoundResourcesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetLocationBoundResourceResponse>> {
        const response = await this.getLocationBoundResourcesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a resource at a location.
     * Create Location Bound Resource
     */
    async postLocationBoundResourceRaw(requestParameters: PostLocationBoundResourceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling postLocationBoundResource().'
            );
        }

        if (requestParameters['locationId'] == null) {
            throw new runtime.RequiredError(
                'locationId',
                'Required parameter "locationId" was null or undefined when calling postLocationBoundResource().'
            );
        }

        if (requestParameters['postLocationBoundResourceRequest'] == null) {
            throw new runtime.RequiredError(
                'postLocationBoundResourceRequest',
                'Required parameter "postLocationBoundResourceRequest" was null or undefined when calling postLocationBoundResource().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{userId}/locations/{locationId}/resources`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"locationId"}}`, encodeURIComponent(String(requestParameters['locationId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostLocationBoundResourceRequestToJSON(requestParameters['postLocationBoundResourceRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create a resource at a location.
     * Create Location Bound Resource
     */
    async postLocationBoundResource(requestParameters: PostLocationBoundResourceOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postLocationBoundResourceRaw(requestParameters, initOverrides);
    }

}
