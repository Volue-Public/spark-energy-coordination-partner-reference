/* tslint:disable */
/* eslint-disable */
/**
 * Energy Coordination API - Partner Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetEligibleUsersResponse,
  GetMpidEligibilityResponse,
  GetUserCompensationForCurrentMonthResponse,
  GetUserEligibilityResponse,
  GetUserEnrollmentResponse,
  HttpValidationProblemDetails,
} from '../models/index';
import {
    GetEligibleUsersResponseFromJSON,
    GetEligibleUsersResponseToJSON,
    GetMpidEligibilityResponseFromJSON,
    GetMpidEligibilityResponseToJSON,
    GetUserCompensationForCurrentMonthResponseFromJSON,
    GetUserCompensationForCurrentMonthResponseToJSON,
    GetUserEligibilityResponseFromJSON,
    GetUserEligibilityResponseToJSON,
    GetUserEnrollmentResponseFromJSON,
    GetUserEnrollmentResponseToJSON,
    HttpValidationProblemDetailsFromJSON,
    HttpValidationProblemDetailsToJSON,
} from '../models/index';

export interface DeleteUserEnrollmentRequest {
    userId: string;
}

export interface FetchUserCompensationRequest {
    userId: string;
}

export interface GetEligibleUsersRequest {
    page?: number;
    pageSize?: number;
}

export interface GetMpidEligibilityRequest {
    mpid: string;
}

export interface GetUserEligibilityByUserIdRequest {
    userId: string;
}

export interface GetUserEnrollmentByUserIdRequest {
    userId: string;
}

export interface PostUserEnrollmentRequest {
    userId: string;
}

/**
 * 
 */
export class UserSparkProgramApi extends runtime.BaseAPI {

    /**
     * Remove a user from the SPARK Program
     * Delete User Enrollment
     */
    async deleteUserEnrollmentRaw(requestParameters: DeleteUserEnrollmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteUserEnrollment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{userId}/enrollment`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Remove a user from the SPARK Program
     * Delete User Enrollment
     */
    async deleteUserEnrollment(requestParameters: DeleteUserEnrollmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteUserEnrollmentRaw(requestParameters, initOverrides);
    }

    /**
     * Will fetch the total compensation per location the user has for the current month
     */
    async fetchUserCompensationRaw(requestParameters: FetchUserCompensationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserCompensationForCurrentMonthResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling fetchUserCompensation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{userId}/compensation`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserCompensationForCurrentMonthResponseFromJSON(jsonValue));
    }

    /**
     * Will fetch the total compensation per location the user has for the current month
     */
    async fetchUserCompensation(requestParameters: FetchUserCompensationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserCompensationForCurrentMonthResponse> {
        const response = await this.fetchUserCompensationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all users who are eligible for the SPARK Program. Maximum pageSize is 1000.
     * Get Eligible Users
     */
    async getEligibleUsersRaw(requestParameters: GetEligibleUsersRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetEligibleUsersResponse>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['pageSize'] != null) {
            queryParameters['pageSize'] = requestParameters['pageSize'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/eligible`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetEligibleUsersResponseFromJSON(jsonValue));
    }

    /**
     * Get all users who are eligible for the SPARK Program. Maximum pageSize is 1000.
     * Get Eligible Users
     */
    async getEligibleUsers(requestParameters: GetEligibleUsersRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetEligibleUsersResponse> {
        const response = await this.getEligibleUsersRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Indicates whether or not the given MeterPoint is currently eligible for the Spark program
     * Check if MeterPoint id eligible for Spark
     */
    async getMpidEligibilityRaw(requestParameters: GetMpidEligibilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMpidEligibilityResponse>> {
        if (requestParameters['mpid'] == null) {
            throw new runtime.RequiredError(
                'mpid',
                'Required parameter "mpid" was null or undefined when calling getMpidEligibility().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/meters/{mpid}/eligible`.replace(`{${"mpid"}}`, encodeURIComponent(String(requestParameters['mpid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMpidEligibilityResponseFromJSON(jsonValue));
    }

    /**
     * Indicates whether or not the given MeterPoint is currently eligible for the Spark program
     * Check if MeterPoint id eligible for Spark
     */
    async getMpidEligibility(requestParameters: GetMpidEligibilityRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMpidEligibilityResponse> {
        const response = await this.getMpidEligibilityRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Check if a user is eligible for the SPARK Program
     * Get User Eligibility
     */
    async getUserEligibilityByUserIdRaw(requestParameters: GetUserEligibilityByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserEligibilityResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserEligibilityByUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{userId}/eligibility`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserEligibilityResponseFromJSON(jsonValue));
    }

    /**
     * Check if a user is eligible for the SPARK Program
     * Get User Eligibility
     */
    async getUserEligibilityByUserId(requestParameters: GetUserEligibilityByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserEligibilityResponse> {
        const response = await this.getUserEligibilityByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a user\'s enrollment status. Also returns when the user was enrolled.
     * Get User Enrollment
     */
    async getUserEnrollmentByUserIdRaw(requestParameters: GetUserEnrollmentByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserEnrollmentResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getUserEnrollmentByUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{userId}/enrollment`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserEnrollmentResponseFromJSON(jsonValue));
    }

    /**
     * Get a user\'s enrollment status. Also returns when the user was enrolled.
     * Get User Enrollment
     */
    async getUserEnrollmentByUserId(requestParameters: GetUserEnrollmentByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserEnrollmentResponse> {
        const response = await this.getUserEnrollmentByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Enroll a user into the SPARK Program
     * Enroll User
     */
    async postUserEnrollmentRaw(requestParameters: PostUserEnrollmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserEnrollmentResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling postUserEnrollment().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{userId}/enrollment`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserEnrollmentResponseFromJSON(jsonValue));
    }

    /**
     * Enroll a user into the SPARK Program
     * Enroll User
     */
    async postUserEnrollment(requestParameters: PostUserEnrollmentRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserEnrollmentResponse> {
        const response = await this.postUserEnrollmentRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
