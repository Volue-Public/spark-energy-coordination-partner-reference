/* tslint:disable */
/* eslint-disable */
/**
 * Energy Coordination API - Partner Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetResourceResponse,
  GetUserResourcesResponse,
  HttpValidationProblemDetails,
  PostVehicleResourceRequest,
} from '../models/index';
import {
    GetResourceResponseFromJSON,
    GetResourceResponseToJSON,
    GetUserResourcesResponseFromJSON,
    GetUserResourcesResponseToJSON,
    HttpValidationProblemDetailsFromJSON,
    HttpValidationProblemDetailsToJSON,
    PostVehicleResourceRequestFromJSON,
    PostVehicleResourceRequestToJSON,
} from '../models/index';

export interface GetResourcesForUserRequest {
    userId: string;
}

export interface PostVehicleRequest {
    userId: string;
    postVehicleResourceRequest: PostVehicleResourceRequest;
}

/**
 * 
 */
export class UserResourcesApi extends runtime.BaseAPI {

    /**
     * Get all resources registered to a user. Returns both location bound resources and vehicles.
     * Get a User\'s Resources
     */
    async getResourcesForUserRaw(requestParameters: GetResourcesForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetUserResourcesResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getResourcesForUser().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{userId}/resources`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetUserResourcesResponseFromJSON(jsonValue));
    }

    /**
     * Get all resources registered to a user. Returns both location bound resources and vehicles.
     * Get a User\'s Resources
     */
    async getResourcesForUser(requestParameters: GetResourcesForUserRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetUserResourcesResponse> {
        const response = await this.getResourcesForUserRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Vehicle Resource
     */
    async postVehicleRaw(requestParameters: PostVehicleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling postVehicle().'
            );
        }

        if (requestParameters['postVehicleResourceRequest'] == null) {
            throw new runtime.RequiredError(
                'postVehicleResourceRequest',
                'Required parameter "postVehicleResourceRequest" was null or undefined when calling postVehicle().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{userId}/vehicles`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostVehicleResourceRequestToJSON(requestParameters['postVehicleResourceRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create Vehicle Resource
     */
    async postVehicle(requestParameters: PostVehicleRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postVehicleRaw(requestParameters, initOverrides);
    }

}
