/* tslint:disable */
/* eslint-disable */
/**
 * Energy Coordination API - Partner Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetLocationResponse,
  PatchLocationRequest,
  PostLocationRequest,
  PostLocationsBatchRequest,
  PostLocationsBatchResponse,
  PutLocationRequest,
} from '../models/index';
import {
    GetLocationResponseFromJSON,
    GetLocationResponseToJSON,
    PatchLocationRequestFromJSON,
    PatchLocationRequestToJSON,
    PostLocationRequestFromJSON,
    PostLocationRequestToJSON,
    PostLocationsBatchRequestFromJSON,
    PostLocationsBatchRequestToJSON,
    PostLocationsBatchResponseFromJSON,
    PostLocationsBatchResponseToJSON,
    PutLocationRequestFromJSON,
    PutLocationRequestToJSON,
} from '../models/index';

export interface DeleteLocationRequest {
    userId: string;
    locationId: string;
}

export interface GetLocationByLocationIdRequest {
    userId: string;
    locationId: string;
}

export interface GetLocationsByUserIdRequest {
    userId: string;
}

export interface PatchLocationOperationRequest {
    userId: string;
    locationId: string;
    patchLocationRequest: PatchLocationRequest;
}

export interface PostLocationOperationRequest {
    userId: string;
    postLocationRequest: PostLocationRequest;
}

export interface PostLocationsRequest {
    postLocationsBatchRequest: PostLocationsBatchRequest;
}

export interface UpdateLocationRequest {
    userId: string;
    locationId: string;
    putLocationRequest: PutLocationRequest;
}

/**
 * 
 */
export class UserLocationsApi extends runtime.BaseAPI {

    /**
     * Returns 204 No Content if the location was deleted successfully. Returns 404 Not Found if the location to delete does not exist.
     * Delete User Location
     */
    async deleteLocationRaw(requestParameters: DeleteLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling deleteLocation().'
            );
        }

        if (requestParameters['locationId'] == null) {
            throw new runtime.RequiredError(
                'locationId',
                'Required parameter "locationId" was null or undefined when calling deleteLocation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{userId}/locations/{locationId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"locationId"}}`, encodeURIComponent(String(requestParameters['locationId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns 204 No Content if the location was deleted successfully. Returns 404 Not Found if the location to delete does not exist.
     * Delete User Location
     */
    async deleteLocation(requestParameters: DeleteLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteLocationRaw(requestParameters, initOverrides);
    }

    /**
     * Get User Location By Location Id
     */
    async getLocationByLocationIdRaw(requestParameters: GetLocationByLocationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLocationResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getLocationByLocationId().'
            );
        }

        if (requestParameters['locationId'] == null) {
            throw new runtime.RequiredError(
                'locationId',
                'Required parameter "locationId" was null or undefined when calling getLocationByLocationId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{userId}/locations/{locationId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"locationId"}}`, encodeURIComponent(String(requestParameters['locationId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLocationResponseFromJSON(jsonValue));
    }

    /**
     * Get User Location By Location Id
     */
    async getLocationByLocationId(requestParameters: GetLocationByLocationIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLocationResponse> {
        const response = await this.getLocationByLocationIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get A User\'s Locations
     */
    async getLocationsByUserIdRaw(requestParameters: GetLocationsByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<GetLocationResponse>>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling getLocationsByUserId().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{userId}/locations`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GetLocationResponseFromJSON));
    }

    /**
     * Get A User\'s Locations
     */
    async getLocationsByUserId(requestParameters: GetLocationsByUserIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<GetLocationResponse>> {
        const response = await this.getLocationsByUserIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Patch User Location
     */
    async patchLocationRaw(requestParameters: PatchLocationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLocationResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling patchLocation().'
            );
        }

        if (requestParameters['locationId'] == null) {
            throw new runtime.RequiredError(
                'locationId',
                'Required parameter "locationId" was null or undefined when calling patchLocation().'
            );
        }

        if (requestParameters['patchLocationRequest'] == null) {
            throw new runtime.RequiredError(
                'patchLocationRequest',
                'Required parameter "patchLocationRequest" was null or undefined when calling patchLocation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{userId}/locations/{locationId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"locationId"}}`, encodeURIComponent(String(requestParameters['locationId']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchLocationRequestToJSON(requestParameters['patchLocationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLocationResponseFromJSON(jsonValue));
    }

    /**
     * Patch User Location
     */
    async patchLocation(requestParameters: PatchLocationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLocationResponse> {
        const response = await this.patchLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create User Location
     */
    async postLocationRaw(requestParameters: PostLocationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling postLocation().'
            );
        }

        if (requestParameters['postLocationRequest'] == null) {
            throw new runtime.RequiredError(
                'postLocationRequest',
                'Required parameter "postLocationRequest" was null or undefined when calling postLocation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{userId}/locations`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostLocationRequestToJSON(requestParameters['postLocationRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create User Location
     */
    async postLocation(requestParameters: PostLocationOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postLocationRaw(requestParameters, initOverrides);
    }

    /**
     * Create multiple locations for several users at once. \"The request body should be an array of objects, each containing a user id and a create location request.
     * Create Multiple User Locations
     */
    async postLocationsRaw(requestParameters: PostLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['postLocationsBatchRequest'] == null) {
            throw new runtime.RequiredError(
                'postLocationsBatchRequest',
                'Required parameter "postLocationsBatchRequest" was null or undefined when calling postLocations().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/locations/batch`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PostLocationsBatchRequestToJSON(requestParameters['postLocationsBatchRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create multiple locations for several users at once. \"The request body should be an array of objects, each containing a user id and a create location request.
     * Create Multiple User Locations
     */
    async postLocations(requestParameters: PostLocationsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.postLocationsRaw(requestParameters, initOverrides);
    }

    /**
     * Update User Location
     */
    async updateLocationRaw(requestParameters: UpdateLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetLocationResponse>> {
        if (requestParameters['userId'] == null) {
            throw new runtime.RequiredError(
                'userId',
                'Required parameter "userId" was null or undefined when calling updateLocation().'
            );
        }

        if (requestParameters['locationId'] == null) {
            throw new runtime.RequiredError(
                'locationId',
                'Required parameter "locationId" was null or undefined when calling updateLocation().'
            );
        }

        if (requestParameters['putLocationRequest'] == null) {
            throw new runtime.RequiredError(
                'putLocationRequest',
                'Required parameter "putLocationRequest" was null or undefined when calling updateLocation().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/users/{userId}/locations/{locationId}`.replace(`{${"userId"}}`, encodeURIComponent(String(requestParameters['userId']))).replace(`{${"locationId"}}`, encodeURIComponent(String(requestParameters['locationId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PutLocationRequestToJSON(requestParameters['putLocationRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetLocationResponseFromJSON(jsonValue));
    }

    /**
     * Update User Location
     */
    async updateLocation(requestParameters: UpdateLocationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetLocationResponse> {
        const response = await this.updateLocationRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
