/* tslint:disable */
/* eslint-disable */
/**
 * Energy Coordination API - Partner Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetResourceResponse,
} from '../models/index';
import {
    GetResourceResponseFromJSON,
    GetResourceResponseToJSON,
} from '../models/index';

export interface DeleteResourceByIdRequest {
    resourceId: string;
}

export interface GetResourceByIdRequest {
    resourceId: string;
}

/**
 * 
 */
export class ResourcesApi extends runtime.BaseAPI {

    /**
     * Returns 204 No Content if the resource was deleted successfully. Returns 404 Not Found if the resource to delete does not exist.
     * Delete Resource
     */
    async deleteResourceByIdRaw(requestParameters: DeleteResourceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['resourceId'] == null) {
            throw new runtime.RequiredError(
                'resourceId',
                'Required parameter "resourceId" was null or undefined when calling deleteResourceById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/resources/{resourceId}`.replace(`{${"resourceId"}}`, encodeURIComponent(String(requestParameters['resourceId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Returns 204 No Content if the resource was deleted successfully. Returns 404 Not Found if the resource to delete does not exist.
     * Delete Resource
     */
    async deleteResourceById(requestParameters: DeleteResourceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteResourceByIdRaw(requestParameters, initOverrides);
    }

    /**
     * Get Resource by Id
     */
    async getResourceByIdRaw(requestParameters: GetResourceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetResourceResponse>> {
        if (requestParameters['resourceId'] == null) {
            throw new runtime.RequiredError(
                'resourceId',
                'Required parameter "resourceId" was null or undefined when calling getResourceById().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/resources/{resourceId}`.replace(`{${"resourceId"}}`, encodeURIComponent(String(requestParameters['resourceId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetResourceResponseFromJSON(jsonValue));
    }

    /**
     * Get Resource by Id
     */
    async getResourceById(requestParameters: GetResourceByIdRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetResourceResponse> {
        const response = await this.getResourceByIdRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
