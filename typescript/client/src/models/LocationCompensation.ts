/* tslint:disable */
/* eslint-disable */
/**
 * Energy Coordination API - Partner Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Currency } from './Currency';
import {
    CurrencyFromJSON,
    CurrencyFromJSONTyped,
    CurrencyToJSON,
    CurrencyToJSONTyped,
} from './Currency';
import type { Problem } from './Problem';
import {
    ProblemFromJSON,
    ProblemFromJSONTyped,
    ProblemToJSON,
    ProblemToJSONTyped,
} from './Problem';

/**
 * 
 * @export
 * @interface LocationCompensation
 */
export interface LocationCompensation {
    /**
     * 
     * @type {string}
     * @memberof LocationCompensation
     */
    locationId?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof LocationCompensation
     */
    meterPointIds?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof LocationCompensation
     */
    activeAmount?: number;
    /**
     * 
     * @type {number}
     * @memberof LocationCompensation
     */
    blockedAmount?: number;
    /**
     * 
     * @type {Currency}
     * @memberof LocationCompensation
     */
    currency?: Currency;
    /**
     * 
     * @type {Array<Problem>}
     * @memberof LocationCompensation
     */
    problems?: Array<Problem>;
}



/**
 * Check if a given object implements the LocationCompensation interface.
 */
export function instanceOfLocationCompensation(value: object): value is LocationCompensation {
    return true;
}

export function LocationCompensationFromJSON(json: any): LocationCompensation {
    return LocationCompensationFromJSONTyped(json, false);
}

export function LocationCompensationFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocationCompensation {
    if (json == null) {
        return json;
    }
    return {
        
        'locationId': json['locationId'] == null ? undefined : json['locationId'],
        'meterPointIds': json['meterPointIds'] == null ? undefined : json['meterPointIds'],
        'activeAmount': json['activeAmount'] == null ? undefined : json['activeAmount'],
        'blockedAmount': json['blockedAmount'] == null ? undefined : json['blockedAmount'],
        'currency': json['currency'] == null ? undefined : CurrencyFromJSON(json['currency']),
        'problems': json['problems'] == null ? undefined : ((json['problems'] as Array<any>).map(ProblemFromJSON)),
    };
}

export function LocationCompensationToJSON(json: any): LocationCompensation {
    return LocationCompensationToJSONTyped(json, false);
}

export function LocationCompensationToJSONTyped(value?: LocationCompensation | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'locationId': value['locationId'],
        'meterPointIds': value['meterPointIds'],
        'activeAmount': value['activeAmount'],
        'blockedAmount': value['blockedAmount'],
        'currency': CurrencyToJSON(value['currency']),
        'problems': value['problems'] == null ? undefined : ((value['problems'] as Array<any>).map(ProblemToJSON)),
    };
}

