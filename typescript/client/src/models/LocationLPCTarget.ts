/* tslint:disable */
/* eslint-disable */
/**
 * Energy Coordination API - Partner Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LPCDataPoint } from './LPCDataPoint';
import {
    LPCDataPointFromJSON,
    LPCDataPointFromJSONTyped,
    LPCDataPointToJSON,
    LPCDataPointToJSONTyped,
} from './LPCDataPoint';

/**
 * 
 * @export
 * @interface LocationLPCTarget
 */
export interface LocationLPCTarget {
    /**
     * 
     * @type {string}
     * @memberof LocationLPCTarget
     */
    locationId: string;
    /**
     * 
     * @type {string}
     * @memberof LocationLPCTarget
     */
    meterPointId: string;
    /**
     * 
     * @type {string}
     * @memberof LocationLPCTarget
     */
    resolution: string;
    /**
     * 
     * @type {Array<LPCDataPoint>}
     * @memberof LocationLPCTarget
     */
    points: Array<LPCDataPoint>;
}

/**
 * Check if a given object implements the LocationLPCTarget interface.
 */
export function instanceOfLocationLPCTarget(value: object): value is LocationLPCTarget {
    if (!('locationId' in value) || value['locationId'] === undefined) return false;
    if (!('meterPointId' in value) || value['meterPointId'] === undefined) return false;
    if (!('resolution' in value) || value['resolution'] === undefined) return false;
    if (!('points' in value) || value['points'] === undefined) return false;
    return true;
}

export function LocationLPCTargetFromJSON(json: any): LocationLPCTarget {
    return LocationLPCTargetFromJSONTyped(json, false);
}

export function LocationLPCTargetFromJSONTyped(json: any, ignoreDiscriminator: boolean): LocationLPCTarget {
    if (json == null) {
        return json;
    }
    return {
        
        'locationId': json['locationId'],
        'meterPointId': json['meterPointId'],
        'resolution': json['resolution'],
        'points': ((json['points'] as Array<any>).map(LPCDataPointFromJSON)),
    };
}

export function LocationLPCTargetToJSON(json: any): LocationLPCTarget {
    return LocationLPCTargetToJSONTyped(json, false);
}

export function LocationLPCTargetToJSONTyped(value?: LocationLPCTarget | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'locationId': value['locationId'],
        'meterPointId': value['meterPointId'],
        'resolution': value['resolution'],
        'points': ((value['points'] as Array<any>).map(LPCDataPointToJSON)),
    };
}

