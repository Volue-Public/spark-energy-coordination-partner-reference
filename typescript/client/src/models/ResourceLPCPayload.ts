/* tslint:disable */
/* eslint-disable */
/**
 * Energy Coordination API - Partner Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SparkEventPayload } from './SparkEventPayload';
import {
    SparkEventPayloadFromJSON,
    SparkEventPayloadFromJSONTyped,
    SparkEventPayloadToJSON,
    SparkEventPayloadToJSONTyped,
} from './SparkEventPayload';
import type { SparkEventPayloadType } from './SparkEventPayloadType';
import {
    SparkEventPayloadTypeFromJSON,
    SparkEventPayloadTypeFromJSONTyped,
    SparkEventPayloadTypeToJSON,
    SparkEventPayloadTypeToJSONTyped,
} from './SparkEventPayloadType';
import type { ResourceLPCTarget } from './ResourceLPCTarget';
import {
    ResourceLPCTargetFromJSON,
    ResourceLPCTargetFromJSONTyped,
    ResourceLPCTargetToJSON,
    ResourceLPCTargetToJSONTyped,
} from './ResourceLPCTarget';

/**
 * 
 * @export
 * @interface ResourceLPCPayload
 */
export interface ResourceLPCPayload extends SparkEventPayload {
    /**
     * 
     * @type {Array<ResourceLPCTarget>}
     * @memberof ResourceLPCPayload
     */
    targets: Array<ResourceLPCTarget>;
}



/**
 * Check if a given object implements the ResourceLPCPayload interface.
 */
export function instanceOfResourceLPCPayload(value: object): value is ResourceLPCPayload {
    if (!('targets' in value) || value['targets'] === undefined) return false;
    return true;
}

export function ResourceLPCPayloadFromJSON(json: any): ResourceLPCPayload {
    return ResourceLPCPayloadFromJSONTyped(json, false);
}

export function ResourceLPCPayloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResourceLPCPayload {
    if (json == null) {
        return json;
    }
    return {
        ...SparkEventPayloadFromJSONTyped(json, true),
        'targets': ((json['targets'] as Array<any>).map(ResourceLPCTargetFromJSON)),
    };
}

export function ResourceLPCPayloadToJSON(json: any): ResourceLPCPayload {
    return ResourceLPCPayloadToJSONTyped(json, false);
}

export function ResourceLPCPayloadToJSONTyped(value?: ResourceLPCPayload | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        ...SparkEventPayloadToJSONTyped(value, true),
        'targets': ((value['targets'] as Array<any>).map(ResourceLPCTargetToJSON)),
    };
}

