/* tslint:disable */
/* eslint-disable */
/**
 * Energy Coordination API - Partner Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SparkReportPayload } from './SparkReportPayload';
import {
    SparkReportPayloadFromJSON,
    SparkReportPayloadFromJSONTyped,
    SparkReportPayloadToJSON,
    SparkReportPayloadToJSONTyped,
} from './SparkReportPayload';
import type { SparkReportPayloadType } from './SparkReportPayloadType';
import {
    SparkReportPayloadTypeFromJSON,
    SparkReportPayloadTypeFromJSONTyped,
    SparkReportPayloadTypeToJSON,
    SparkReportPayloadTypeToJSONTyped,
} from './SparkReportPayloadType';
import type { LPCResource } from './LPCResource';
import {
    LPCResourceFromJSON,
    LPCResourceFromJSONTyped,
    LPCResourceToJSON,
    LPCResourceToJSONTyped,
} from './LPCResource';

/**
 * 
 * @export
 * @interface ResourceLPCAcknowledgmentReportPayload
 */
export interface ResourceLPCAcknowledgmentReportPayload extends SparkReportPayload {
    /**
     * 
     * @type {Array<LPCResource>}
     * @memberof ResourceLPCAcknowledgmentReportPayload
     */
    acknowledgedTargets?: Array<LPCResource>;
    /**
     * 
     * @type {Array<LPCResource>}
     * @memberof ResourceLPCAcknowledgmentReportPayload
     */
    declinedTargets?: Array<LPCResource>;
}



/**
 * Check if a given object implements the ResourceLPCAcknowledgmentReportPayload interface.
 */
export function instanceOfResourceLPCAcknowledgmentReportPayload(value: object): value is ResourceLPCAcknowledgmentReportPayload {
    return true;
}

export function ResourceLPCAcknowledgmentReportPayloadFromJSON(json: any): ResourceLPCAcknowledgmentReportPayload {
    return ResourceLPCAcknowledgmentReportPayloadFromJSONTyped(json, false);
}

export function ResourceLPCAcknowledgmentReportPayloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResourceLPCAcknowledgmentReportPayload {
    if (json == null) {
        return json;
    }
    return {
        ...SparkReportPayloadFromJSONTyped(json, true),
        'acknowledgedTargets': json['acknowledgedTargets'] == null ? undefined : ((json['acknowledgedTargets'] as Array<any>).map(LPCResourceFromJSON)),
        'declinedTargets': json['declinedTargets'] == null ? undefined : ((json['declinedTargets'] as Array<any>).map(LPCResourceFromJSON)),
    };
}

export function ResourceLPCAcknowledgmentReportPayloadToJSON(json: any): ResourceLPCAcknowledgmentReportPayload {
    return ResourceLPCAcknowledgmentReportPayloadToJSONTyped(json, false);
}

export function ResourceLPCAcknowledgmentReportPayloadToJSONTyped(value?: ResourceLPCAcknowledgmentReportPayload | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        ...SparkReportPayloadToJSONTyped(value, true),
        'acknowledgedTargets': value['acknowledgedTargets'] == null ? undefined : ((value['acknowledgedTargets'] as Array<any>).map(LPCResourceToJSON)),
        'declinedTargets': value['declinedTargets'] == null ? undefined : ((value['declinedTargets'] as Array<any>).map(LPCResourceToJSON)),
    };
}

