/* tslint:disable */
/* eslint-disable */
/**
 * Energy Coordination API - Partner Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LocationLPCTarget } from './LocationLPCTarget';
import {
    LocationLPCTargetFromJSON,
    LocationLPCTargetFromJSONTyped,
    LocationLPCTargetToJSON,
    LocationLPCTargetToJSONTyped,
} from './LocationLPCTarget';
import type { SparkEventPayload } from './SparkEventPayload';
import {
    SparkEventPayloadFromJSON,
    SparkEventPayloadFromJSONTyped,
    SparkEventPayloadToJSON,
    SparkEventPayloadToJSONTyped,
} from './SparkEventPayload';
import type { SparkEventPayloadType } from './SparkEventPayloadType';
import {
    SparkEventPayloadTypeFromJSON,
    SparkEventPayloadTypeFromJSONTyped,
    SparkEventPayloadTypeToJSON,
    SparkEventPayloadTypeToJSONTyped,
} from './SparkEventPayloadType';

/**
 * 
 * @export
 * @interface LPCReservationPayload
 */
export interface LPCReservationPayload extends SparkEventPayload {
    /**
     * 
     * @type {Array<LocationLPCTarget>}
     * @memberof LPCReservationPayload
     */
    targets: Array<LocationLPCTarget>;
}



/**
 * Check if a given object implements the LPCReservationPayload interface.
 */
export function instanceOfLPCReservationPayload(value: object): value is LPCReservationPayload {
    if (!('targets' in value) || value['targets'] === undefined) return false;
    return true;
}

export function LPCReservationPayloadFromJSON(json: any): LPCReservationPayload {
    return LPCReservationPayloadFromJSONTyped(json, false);
}

export function LPCReservationPayloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): LPCReservationPayload {
    if (json == null) {
        return json;
    }
    return {
        ...SparkEventPayloadFromJSONTyped(json, true),
        'targets': ((json['targets'] as Array<any>).map(LocationLPCTargetFromJSON)),
    };
}

export function LPCReservationPayloadToJSON(json: any): LPCReservationPayload {
    return LPCReservationPayloadToJSONTyped(json, false);
}

export function LPCReservationPayloadToJSONTyped(value?: LPCReservationPayload | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        ...SparkEventPayloadToJSONTyped(value, true),
        'targets': ((value['targets'] as Array<any>).map(LocationLPCTargetToJSON)),
    };
}

