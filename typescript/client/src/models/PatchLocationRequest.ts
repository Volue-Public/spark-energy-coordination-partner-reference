/* tslint:disable */
/* eslint-disable */
/**
 * Energy Coordination API - Partner Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Coordinate } from './Coordinate';
import {
    CoordinateFromJSON,
    CoordinateFromJSONTyped,
    CoordinateToJSON,
    CoordinateToJSONTyped,
} from './Coordinate';
import type { LocationType } from './LocationType';
import {
    LocationTypeFromJSON,
    LocationTypeFromJSONTyped,
    LocationTypeToJSON,
    LocationTypeToJSONTyped,
} from './LocationType';

/**
 * 
 * @export
 * @interface PatchLocationRequest
 */
export interface PatchLocationRequest {
    /**
     * 
     * @type {LocationType}
     * @memberof PatchLocationRequest
     */
    locationType?: LocationType;
    /**
     * 
     * @type {Coordinate}
     * @memberof PatchLocationRequest
     */
    coordinates?: Coordinate;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchLocationRequest
     */
    meterPointIds?: Array<string> | null;
}



/**
 * Check if a given object implements the PatchLocationRequest interface.
 */
export function instanceOfPatchLocationRequest(value: object): value is PatchLocationRequest {
    return true;
}

export function PatchLocationRequestFromJSON(json: any): PatchLocationRequest {
    return PatchLocationRequestFromJSONTyped(json, false);
}

export function PatchLocationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchLocationRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'locationType': json['locationType'] == null ? undefined : LocationTypeFromJSON(json['locationType']),
        'coordinates': json['coordinates'] == null ? undefined : CoordinateFromJSON(json['coordinates']),
        'meterPointIds': json['meterPointIds'] == null ? undefined : json['meterPointIds'],
    };
}

export function PatchLocationRequestToJSON(json: any): PatchLocationRequest {
    return PatchLocationRequestToJSONTyped(json, false);
}

export function PatchLocationRequestToJSONTyped(value?: PatchLocationRequest | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'locationType': LocationTypeToJSON(value['locationType']),
        'coordinates': CoordinateToJSON(value['coordinates']),
        'meterPointIds': value['meterPointIds'],
    };
}

