/* tslint:disable */
/* eslint-disable */
/**
 * Energy Coordination API - Partner Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SparkReportPayloadType } from './SparkReportPayloadType';
import {
    SparkReportPayloadTypeFromJSON,
    SparkReportPayloadTypeFromJSONTyped,
    SparkReportPayloadTypeToJSON,
    SparkReportPayloadTypeToJSONTyped,
} from './SparkReportPayloadType';

import { EnergyUsageReportPayload, EnergyUsageReportPayloadFromJSONTyped, EnergyUsageReportPayloadToJSON, EnergyUsageReportPayloadToJSONTyped } from './EnergyUsageReportPayload';
import { LocationEnergyUsageReportPayload, LocationEnergyUsageReportPayloadFromJSONTyped, LocationEnergyUsageReportPayloadToJSON, LocationEnergyUsageReportPayloadToJSONTyped } from './LocationEnergyUsageReportPayload';
import { LocationEnergyUsagePlanReportPayload, LocationEnergyUsagePlanReportPayloadFromJSONTyped, LocationEnergyUsagePlanReportPayloadToJSON, LocationEnergyUsagePlanReportPayloadToJSONTyped } from './LocationEnergyUsagePlanReportPayload';
import { LocationLPCAcknowledgmentReportPayload, LocationLPCAcknowledgmentReportPayloadFromJSONTyped, LocationLPCAcknowledgmentReportPayloadToJSON, LocationLPCAcknowledgmentReportPayloadToJSONTyped } from './LocationLPCAcknowledgmentReportPayload';
import { ResourceLPCAcknowledgmentReportPayload, ResourceLPCAcknowledgmentReportPayloadFromJSONTyped, ResourceLPCAcknowledgmentReportPayloadToJSON, ResourceLPCAcknowledgmentReportPayloadToJSONTyped } from './ResourceLPCAcknowledgmentReportPayload';
/**
 * 
 * @export
 * @interface SparkReportPayload
 */
export interface SparkReportPayload {
    /**
     * 
     * @type {SparkReportPayloadType}
     * @memberof SparkReportPayload
     */
    payloadType?: SparkReportPayloadType;
}



/**
 * Check if a given object implements the SparkReportPayload interface.
 */
export function instanceOfSparkReportPayload(value: object): value is SparkReportPayload {
    return true;
}

export function SparkReportPayloadFromJSON(json: any): SparkReportPayload {
    return SparkReportPayloadFromJSONTyped(json, false);
}

export function SparkReportPayloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): SparkReportPayload {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['payloadType'] === 'EnergyUsage') {
            return EnergyUsageReportPayloadFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['payloadType'] === 'LocationEnergyUsage') {
            return LocationEnergyUsageReportPayloadFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['payloadType'] === 'LocationEnergyUsagePlan') {
            return LocationEnergyUsagePlanReportPayloadFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['payloadType'] === 'LocationLPCAcknowledgement') {
            return LocationLPCAcknowledgmentReportPayloadFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['payloadType'] === 'ResourceLPCAcknowledgement') {
            return ResourceLPCAcknowledgmentReportPayloadFromJSONTyped(json, ignoreDiscriminator);
        }
    }
    return {
        
        'payloadType': json['payloadType'] == null ? undefined : SparkReportPayloadTypeFromJSON(json['payloadType']),
    };
}

export function SparkReportPayloadToJSON(json: any): SparkReportPayload {
    return SparkReportPayloadToJSONTyped(json, false);
}

export function SparkReportPayloadToJSONTyped(value?: SparkReportPayload | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (!ignoreDiscriminator) {
        switch (value['payloadType']) {
            case 'EnergyUsage':
                return EnergyUsageReportPayloadToJSONTyped(value as EnergyUsageReportPayload, ignoreDiscriminator);
            case 'LocationEnergyUsage':
                return LocationEnergyUsageReportPayloadToJSONTyped(value as LocationEnergyUsageReportPayload, ignoreDiscriminator);
            case 'LocationEnergyUsagePlan':
                return LocationEnergyUsagePlanReportPayloadToJSONTyped(value as LocationEnergyUsagePlanReportPayload, ignoreDiscriminator);
            case 'LocationLPCAcknowledgement':
                return LocationLPCAcknowledgmentReportPayloadToJSONTyped(value as LocationLPCAcknowledgmentReportPayload, ignoreDiscriminator);
            case 'ResourceLPCAcknowledgement':
                return ResourceLPCAcknowledgmentReportPayloadToJSONTyped(value as ResourceLPCAcknowledgmentReportPayload, ignoreDiscriminator);
            default:
                return value;
        }
    }

    return {
        
        'payloadType': SparkReportPayloadTypeToJSON(value['payloadType']),
    };
}

