/* tslint:disable */
/* eslint-disable */
/**
 * Energy Coordination API - Partner Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EnergyCurvePoint } from './EnergyCurvePoint';
import {
    EnergyCurvePointFromJSON,
    EnergyCurvePointFromJSONTyped,
    EnergyCurvePointToJSON,
    EnergyCurvePointToJSONTyped,
} from './EnergyCurvePoint';
import type { SparkReportPayload } from './SparkReportPayload';
import {
    SparkReportPayloadFromJSON,
    SparkReportPayloadFromJSONTyped,
    SparkReportPayloadToJSON,
    SparkReportPayloadToJSONTyped,
} from './SparkReportPayload';
import type { SparkReportPayloadType } from './SparkReportPayloadType';
import {
    SparkReportPayloadTypeFromJSON,
    SparkReportPayloadTypeFromJSONTyped,
    SparkReportPayloadTypeToJSON,
    SparkReportPayloadTypeToJSONTyped,
} from './SparkReportPayloadType';

/**
 * 
 * @export
 * @interface EnergyUsageReportPayload
 */
export interface EnergyUsageReportPayload extends SparkReportPayload {
    /**
     * 
     * @type {string}
     * @memberof EnergyUsageReportPayload
     */
    resourceId: string;
    /**
     * 
     * @type {string}
     * @memberof EnergyUsageReportPayload
     */
    locationId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof EnergyUsageReportPayload
     */
    meterPointId?: string | null;
    /**
     * 
     * @type {Array<EnergyCurvePoint>}
     * @memberof EnergyUsageReportPayload
     */
    points?: Array<EnergyCurvePoint>;
    /**
     * 
     * @type {string}
     * @memberof EnergyUsageReportPayload
     */
    resolution: string;
    /**
     * 
     * @type {Array<EnergyCurvePoint>}
     * @memberof EnergyUsageReportPayload
     * @deprecated
     */
    curvePoints?: Array<EnergyCurvePoint> | null;
}



/**
 * Check if a given object implements the EnergyUsageReportPayload interface.
 */
export function instanceOfEnergyUsageReportPayload(value: object): value is EnergyUsageReportPayload {
    if (!('resourceId' in value) || value['resourceId'] === undefined) return false;
    if (!('resolution' in value) || value['resolution'] === undefined) return false;
    return true;
}

export function EnergyUsageReportPayloadFromJSON(json: any): EnergyUsageReportPayload {
    return EnergyUsageReportPayloadFromJSONTyped(json, false);
}

export function EnergyUsageReportPayloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): EnergyUsageReportPayload {
    if (json == null) {
        return json;
    }
    return {
        ...SparkReportPayloadFromJSONTyped(json, true),
        'resourceId': json['resourceId'],
        'locationId': json['locationId'] == null ? undefined : json['locationId'],
        'meterPointId': json['meterPointId'] == null ? undefined : json['meterPointId'],
        'points': json['points'] == null ? undefined : ((json['points'] as Array<any>).map(EnergyCurvePointFromJSON)),
        'resolution': json['resolution'],
        'curvePoints': json['curvePoints'] == null ? undefined : ((json['curvePoints'] as Array<any>).map(EnergyCurvePointFromJSON)),
    };
}

export function EnergyUsageReportPayloadToJSON(json: any): EnergyUsageReportPayload {
    return EnergyUsageReportPayloadToJSONTyped(json, false);
}

export function EnergyUsageReportPayloadToJSONTyped(value?: EnergyUsageReportPayload | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        ...SparkReportPayloadToJSONTyped(value, true),
        'resourceId': value['resourceId'],
        'locationId': value['locationId'],
        'meterPointId': value['meterPointId'],
        'points': value['points'] == null ? undefined : ((value['points'] as Array<any>).map(EnergyCurvePointToJSON)),
        'resolution': value['resolution'],
        'curvePoints': value['curvePoints'] == null ? undefined : ((value['curvePoints'] as Array<any>).map(EnergyCurvePointToJSON)),
    };
}

