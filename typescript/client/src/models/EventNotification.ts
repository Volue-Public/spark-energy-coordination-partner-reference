/* tslint:disable */
/* eslint-disable */
/**
 * Energy Coordination API - Partner Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { NotificationType } from './NotificationType';
import {
    NotificationTypeFromJSON,
    NotificationTypeFromJSONTyped,
    NotificationTypeToJSON,
    NotificationTypeToJSONTyped,
} from './NotificationType';
import type { SparkEventPayload } from './SparkEventPayload';
import {
    SparkEventPayloadFromJSON,
    SparkEventPayloadFromJSONTyped,
    SparkEventPayloadToJSON,
    SparkEventPayloadToJSONTyped,
} from './SparkEventPayload';

/**
 * 
 * @export
 * @interface EventNotification
 */
export interface EventNotification {
    /**
     * 
     * @type {string}
     * @memberof EventNotification
     */
    notificationId: string;
    /**
     * 
     * @type {string}
     * @memberof EventNotification
     */
    eventId: string;
    /**
     * 
     * @type {Date}
     * @memberof EventNotification
     */
    eventCreatedAtUtc: Date;
    /**
     * 
     * @type {Date}
     * @memberof EventNotification
     */
    notificationSentUtc: Date;
    /**
     * 
     * @type {NotificationType}
     * @memberof EventNotification
     */
    notificationType: NotificationType;
    /**
     * 
     * @type {SparkEventPayload}
     * @memberof EventNotification
     */
    payload: SparkEventPayload;
}



/**
 * Check if a given object implements the EventNotification interface.
 */
export function instanceOfEventNotification(value: object): value is EventNotification {
    if (!('notificationId' in value) || value['notificationId'] === undefined) return false;
    if (!('eventId' in value) || value['eventId'] === undefined) return false;
    if (!('eventCreatedAtUtc' in value) || value['eventCreatedAtUtc'] === undefined) return false;
    if (!('notificationSentUtc' in value) || value['notificationSentUtc'] === undefined) return false;
    if (!('notificationType' in value) || value['notificationType'] === undefined) return false;
    if (!('payload' in value) || value['payload'] === undefined) return false;
    return true;
}

export function EventNotificationFromJSON(json: any): EventNotification {
    return EventNotificationFromJSONTyped(json, false);
}

export function EventNotificationFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventNotification {
    if (json == null) {
        return json;
    }
    return {
        
        'notificationId': json['notificationId'],
        'eventId': json['eventId'],
        'eventCreatedAtUtc': (new Date(json['eventCreatedAtUtc'])),
        'notificationSentUtc': (new Date(json['notificationSentUtc'])),
        'notificationType': NotificationTypeFromJSON(json['notificationType']),
        'payload': SparkEventPayloadFromJSON(json['payload']),
    };
}

export function EventNotificationToJSON(json: any): EventNotification {
    return EventNotificationToJSONTyped(json, false);
}

export function EventNotificationToJSONTyped(value?: EventNotification | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'notificationId': value['notificationId'],
        'eventId': value['eventId'],
        'eventCreatedAtUtc': ((value['eventCreatedAtUtc']).toISOString()),
        'notificationSentUtc': ((value['notificationSentUtc']).toISOString()),
        'notificationType': NotificationTypeToJSON(value['notificationType']),
        'payload': SparkEventPayloadToJSON(value['payload']),
    };
}

