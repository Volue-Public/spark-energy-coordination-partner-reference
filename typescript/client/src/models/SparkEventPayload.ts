/* tslint:disable */
/* eslint-disable */
/**
 * Energy Coordination API - Partner Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SparkEventPayloadType } from './SparkEventPayloadType';
import {
    SparkEventPayloadTypeFromJSON,
    SparkEventPayloadTypeFromJSONTyped,
    SparkEventPayloadTypeToJSON,
    SparkEventPayloadTypeToJSONTyped,
} from './SparkEventPayloadType';

import { LPCReservationPayload, LPCReservationPayloadFromJSONTyped, LPCReservationPayloadToJSON, LPCReservationPayloadToJSONTyped } from './LPCReservationPayload';
import { LocationLPCPayload, LocationLPCPayloadFromJSONTyped, LocationLPCPayloadToJSON, LocationLPCPayloadToJSONTyped } from './LocationLPCPayload';
import { PriceCurvePayload, PriceCurvePayloadFromJSONTyped, PriceCurvePayloadToJSON, PriceCurvePayloadToJSONTyped } from './PriceCurvePayload';
import { ResourceLPCPayload, ResourceLPCPayloadFromJSONTyped, ResourceLPCPayloadToJSON, ResourceLPCPayloadToJSONTyped } from './ResourceLPCPayload';
import { UserEligibilityPayload, UserEligibilityPayloadFromJSONTyped, UserEligibilityPayloadToJSON, UserEligibilityPayloadToJSONTyped } from './UserEligibilityPayload';
/**
 * 
 * @export
 * @interface SparkEventPayload
 */
export interface SparkEventPayload {
    /**
     * 
     * @type {SparkEventPayloadType}
     * @memberof SparkEventPayload
     */
    payloadType: SparkEventPayloadType;
}



/**
 * Check if a given object implements the SparkEventPayload interface.
 */
export function instanceOfSparkEventPayload(value: object): value is SparkEventPayload {
    if (!('payloadType' in value) || value['payloadType'] === undefined) return false;
    return true;
}

export function SparkEventPayloadFromJSON(json: any): SparkEventPayload {
    return SparkEventPayloadFromJSONTyped(json, false);
}

export function SparkEventPayloadFromJSONTyped(json: any, ignoreDiscriminator: boolean): SparkEventPayload {
    if (json == null) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['payloadType'] === 'LPCReservation') {
            return LPCReservationPayloadFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['payloadType'] === 'LocationLPC') {
            return LocationLPCPayloadFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['payloadType'] === 'PriceCurve') {
            return PriceCurvePayloadFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['payloadType'] === 'ResourceLPC') {
            return ResourceLPCPayloadFromJSONTyped(json, ignoreDiscriminator);
        }
        if (json['payloadType'] === 'UserEligibility') {
            return UserEligibilityPayloadFromJSONTyped(json, ignoreDiscriminator);
        }
    }
    return {
        
        'payloadType': SparkEventPayloadTypeFromJSON(json['payloadType']),
    };
}

export function SparkEventPayloadToJSON(json: any): SparkEventPayload {
    return SparkEventPayloadToJSONTyped(json, false);
}

export function SparkEventPayloadToJSONTyped(value?: SparkEventPayload | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    if (!ignoreDiscriminator) {
        switch (value['payloadType']) {
            case 'LPCReservation':
                return LPCReservationPayloadToJSONTyped(value as LPCReservationPayload, ignoreDiscriminator);
            case 'LocationLPC':
                return LocationLPCPayloadToJSONTyped(value as LocationLPCPayload, ignoreDiscriminator);
            case 'PriceCurve':
                return PriceCurvePayloadToJSONTyped(value as PriceCurvePayload, ignoreDiscriminator);
            case 'ResourceLPC':
                return ResourceLPCPayloadToJSONTyped(value as ResourceLPCPayload, ignoreDiscriminator);
            case 'UserEligibility':
                return UserEligibilityPayloadToJSONTyped(value as UserEligibilityPayload, ignoreDiscriminator);
            default:
                throw new Error(`No variant of SparkEventPayload exists with 'payloadType=${value['payloadType']}'`);
        }
    }

    return {
        
        'payloadType': SparkEventPayloadTypeToJSON(value['payloadType']),
    };
}

