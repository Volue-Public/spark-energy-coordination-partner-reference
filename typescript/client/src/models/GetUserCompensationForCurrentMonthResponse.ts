/* tslint:disable */
/* eslint-disable */
/**
 * Energy Coordination API - Partner Endpoints
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LocationCompensation } from './LocationCompensation';
import {
    LocationCompensationFromJSON,
    LocationCompensationFromJSONTyped,
    LocationCompensationToJSON,
    LocationCompensationToJSONTyped,
} from './LocationCompensation';
import type { Period } from './Period';
import {
    PeriodFromJSON,
    PeriodFromJSONTyped,
    PeriodToJSON,
    PeriodToJSONTyped,
} from './Period';

/**
 * 
 * @export
 * @interface GetUserCompensationForCurrentMonthResponse
 */
export interface GetUserCompensationForCurrentMonthResponse {
    /**
     * 
     * @type {string}
     * @memberof GetUserCompensationForCurrentMonthResponse
     */
    userId?: string;
    /**
     * 
     * @type {Period}
     * @memberof GetUserCompensationForCurrentMonthResponse
     */
    period: Period;
    /**
     * 
     * @type {Array<LocationCompensation>}
     * @memberof GetUserCompensationForCurrentMonthResponse
     */
    locationCompensations?: Array<LocationCompensation>;
}

/**
 * Check if a given object implements the GetUserCompensationForCurrentMonthResponse interface.
 */
export function instanceOfGetUserCompensationForCurrentMonthResponse(value: object): value is GetUserCompensationForCurrentMonthResponse {
    if (!('period' in value) || value['period'] === undefined) return false;
    return true;
}

export function GetUserCompensationForCurrentMonthResponseFromJSON(json: any): GetUserCompensationForCurrentMonthResponse {
    return GetUserCompensationForCurrentMonthResponseFromJSONTyped(json, false);
}

export function GetUserCompensationForCurrentMonthResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetUserCompensationForCurrentMonthResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'userId': json['userId'] == null ? undefined : json['userId'],
        'period': PeriodFromJSON(json['period']),
        'locationCompensations': json['locationCompensations'] == null ? undefined : ((json['locationCompensations'] as Array<any>).map(LocationCompensationFromJSON)),
    };
}

export function GetUserCompensationForCurrentMonthResponseToJSON(json: any): GetUserCompensationForCurrentMonthResponse {
    return GetUserCompensationForCurrentMonthResponseToJSONTyped(json, false);
}

export function GetUserCompensationForCurrentMonthResponseToJSONTyped(value?: GetUserCompensationForCurrentMonthResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'userId': value['userId'],
        'period': PeriodToJSON(value['period']),
        'locationCompensations': value['locationCompensations'] == null ? undefined : ((value['locationCompensations'] as Array<any>).map(LocationCompensationToJSON)),
    };
}

